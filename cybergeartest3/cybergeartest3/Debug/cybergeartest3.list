
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ac  080058ac  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080058ac  080058ac  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058ac  080058ac  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ac  080058ac  000068ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b0  080058b0  000068b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080058b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000010  080058c4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  080058c4  00007530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d29  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002797  00000000  00000000  00019d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6d  00000000  00000000  0001d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c237  00000000  00000000  0001e0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001286a  00000000  00000000  0003a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7a2b  00000000  00000000  0004cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f45c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f4  00000000  00000000  000f460c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f8800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005838 	.word	0x08005838

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005838 	.word	0x08005838

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	@ 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f005 fae0 	bl	800581c <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	@ 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f9a9 	bl	8000600 <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	@ 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8cf 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	@ 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8ae 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	@ 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f88a 	bl	80004ee <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	@ 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	@ 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f866 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_ControlSpeed>:
void CyberGear_CurrentControlPram(CyberGear_Typedef *cyber, float kp, float ki,
		float gain);
void CyberGear_ControlSpeed(CyberGear_Typedef *cyber, float target_speed) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	ed87 0a00 	vstr	s0, [r7]
	cyber->cybermotion.velocity = target_speed;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
	union float_binary b_speed;
	b_speed.data = make_float_writedata(target_speed, V_MIN, V_MAX);
 8000442:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000446:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 800044a:	ed97 0a00 	vldr	s0, [r7]
 800044e:	f7ff febb 	bl	80001c8 <make_float_writedata>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700A, b_speed.bin);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	461a      	mov	r2, r3
 8000460:	f247 010a 	movw	r1, #28682	@ 0x700a
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f842 	bl	80004ee <CyberGear_WriteIndexParam>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af02      	add	r7, sp, #8
 8000478:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795a      	ldrb	r2, [r3, #5]
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	4613      	mov	r3, r2
 8000494:	460a      	mov	r2, r1
 8000496:	2103      	movs	r1, #3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff febf 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80004a4:	200a      	movs	r0, #10
 80004a6:	4798      	blx	r3
}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795a      	ldrb	r2, [r3, #5]
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	4613      	mov	r3, r2
 80004d2:	460a      	mov	r2, r1
 80004d4:	2104      	movs	r1, #4
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff fea0 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80004e2:	200a      	movs	r0, #10
 80004e4:	4798      	blx	r3
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b08a      	sub	sp, #40	@ 0x28
 80004f2:	af02      	add	r7, sp, #8
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	460b      	mov	r3, r1
 80004f8:	607a      	str	r2, [r7, #4]
 80004fa:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 8000504:	897b      	ldrh	r3, [r7, #10]
 8000506:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 8000508:	7d3b      	ldrb	r3, [r7, #20]
 800050a:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 800050c:	7d7b      	ldrb	r3, [r7, #21]
 800050e:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	795a      	ldrb	r2, [r3, #5]
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4613      	mov	r3, r2
 800053a:	460a      	mov	r2, r1
 800053c:	2112      	movs	r1, #18
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f7ff fe6c 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800054a:	2001      	movs	r0, #1
 800054c:	4798      	blx	r3
}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	4613      	mov	r3, r2
 8000562:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	639a      	str	r2, [r3, #56]	@ 0x38
	ecan->filter.FilterIdLow = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	63da      	str	r2, [r3, #60]	@ 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	641a      	str	r2, [r3, #64]	@ 0x40
	ecan->filter.FilterMaskIdLow = 0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	645a      	str	r2, [r3, #68]	@ 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	649a      	str	r2, [r3, #72]	@ 0x48

	if (can_nuumber == 1)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d103      	bne.n	8000596 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000594:	e002      	b.n	800059c <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	220e      	movs	r2, #14
 800059a:	64da      	str	r2, [r3, #76]	@ 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	651a      	str	r2, [r3, #80]	@ 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	655a      	str	r2, [r3, #84]	@ 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2201      	movs	r2, #1
 80005ac:	659a      	str	r2, [r3, #88]	@ 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	220e      	movs	r2, #14
 80005b2:	65da      	str	r2, [r3, #92]	@ 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3338      	adds	r3, #56	@ 0x38
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f000 ff1b 	bl	80013fa <HAL_CAN_ConfigFilter>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <Easy_CAN6_Start+0x78>
		Error_Handler();
 80005ca:	f000 fba1 	bl	8000d10 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2102      	movs	r1, #2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f923 	bl	8001820 <HAL_CAN_ActivateNotification>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 80005e0:	f000 fb96 	bl	8000d10 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ffd0 	bl	800158e <HAL_CAN_Start>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005f4:	f001 fa55 	bl	8001aa2 <HAL_NVIC_SystemReset>

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2204      	movs	r2, #4
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
	ecan->TxHeader.DLC = size;
 8000624:	78fa      	ldrb	r2, [r7, #3]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000632:	e000      	b.n	8000636 <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 8000634:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f8bb 	bl	80017b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f6      	beq.n	8000634 <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f103 0120 	add.w	r1, r3, #32
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	f000 ffde 	bl	8001616 <HAL_CAN_AddTxMessage>

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[1], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800066c:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <HAL_UART_TxCpltCallback+0x1c>)
 800066e:	2220      	movs	r2, #32
 8000670:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000a0 	.word	0x200000a0

08000684 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <HAL_UART_RxCpltCallback+0x1c>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000508 	.word	0x20000508

080006a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006aa:	f000 fd21 	bl	80010f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ae:	f000 f96f 	bl	8000990 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b2:	f000 fae3 	bl	8000c7c <MX_GPIO_Init>
	MX_DMA_Init();
 80006b6:	f000 fabb 	bl	8000c30 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80006ba:	f000 fa89 	bl	8000bd0 <MX_USART2_UART_Init>
	MX_CAN_Init();
 80006be:	f000 f9c1 	bl	8000a44 <MX_CAN_Init>
	MX_TIM1_Init();
 80006c2:	f000 f9f5 	bl	8000ab0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 80006c6:	2202      	movs	r2, #2
 80006c8:	499f      	ldr	r1, [pc, #636]	@ (8000948 <main+0x2a4>)
 80006ca:	48a0      	ldr	r0, [pc, #640]	@ (800094c <main+0x2a8>)
 80006cc:	f7ff ff43 	bl	8000556 <Easy_CAN6_Start>

	for (int i = 0; i < 4; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e03d      	b.n	8000752 <main+0xae>
		if (is_run_CyberGear) {
			CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	22b0      	movs	r2, #176	@ 0xb0
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a9c      	ldr	r2, [pc, #624]	@ (8000950 <main+0x2ac>)
 80006e0:	1898      	adds	r0, r3, r2
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3370      	adds	r3, #112	@ 0x70
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b9a      	ldr	r3, [pc, #616]	@ (8000954 <main+0x2b0>)
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	4996      	ldr	r1, [pc, #600]	@ (800094c <main+0x2a8>)
 80006f2:	f7ff fde0 	bl	80002b6 <CyberGear_Init>
			CyberGear_ResetMotor(&my_cyber[i]);
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	22b0      	movs	r2, #176	@ 0xb0
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4a94      	ldr	r2, [pc, #592]	@ (8000950 <main+0x2ac>)
 8000700:	4413      	add	r3, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fed4 	bl	80004b0 <CyberGear_ResetMotor>
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	22b0      	movs	r2, #176	@ 0xb0
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	4a8f      	ldr	r2, [pc, #572]	@ (8000950 <main+0x2ac>)
 8000712:	4413      	add	r3, r2
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fe08 	bl	800032c <CyberGear_SetMode>
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	22b0      	movs	r2, #176	@ 0xb0
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4a8a      	ldr	r2, [pc, #552]	@ (8000950 <main+0x2ac>)
 8000726:	4413      	add	r3, r2
 8000728:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 800072c:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000730:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fddc 	bl	80002f2 <CyberGear_SetConfig>
			CyberGear_EnableMotor(&my_cyber[i]);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	22b0      	movs	r2, #176	@ 0xb0
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	4a83      	ldr	r2, [pc, #524]	@ (8000950 <main+0x2ac>)
 8000744:	4413      	add	r3, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fe93 	bl	8000472 <CyberGear_EnableMotor>
	for (int i = 0; i < 4; i++) {
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b03      	cmp	r3, #3
 8000756:	ddbe      	ble.n	80006d6 <main+0x32>
		}
	}
	HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	@ 0x64
 800075a:	f000 fd2f 	bl	80011bc <HAL_Delay>
//  }
//  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Type any key.\r\n", 14);
//  while (huart2.gState != HAL_UART_STATE_READY)
//  {
//  }
	HAL_UART_Transmit_DMA(&huart2,
 800075e:	2221      	movs	r2, #33	@ 0x21
 8000760:	497d      	ldr	r1, [pc, #500]	@ (8000958 <main+0x2b4>)
 8000762:	487e      	ldr	r0, [pc, #504]	@ (800095c <main+0x2b8>)
 8000764:	f003 feb8 	bl	80044d8 <HAL_UART_Transmit_DMA>
			(uint8_t*) "Then toggle LED each 8 letters.\r\n", 33);

	//	HAL_UART_Receive_DMA(&huart2, UART2_RX_Buffer, byte_number);
	//	HAL_UART_Receive_DMA(&huart2,serialData,DATANUM);
	HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	@ 0x64
 800076a:	f000 fd27 	bl	80011bc <HAL_Delay>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 800076e:	2108      	movs	r1, #8
 8000770:	487b      	ldr	r0, [pc, #492]	@ (8000960 <main+0x2bc>)
 8000772:	f001 fd3f 	bl	80021f4 <HAL_GPIO_TogglePin>

		debug = HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 8000776:	2207      	movs	r2, #7
 8000778:	497a      	ldr	r1, [pc, #488]	@ (8000964 <main+0x2c0>)
 800077a:	4878      	ldr	r0, [pc, #480]	@ (800095c <main+0x2b8>)
 800077c:	f003 ff28 	bl	80045d0 <HAL_UART_Receive_DMA>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b78      	ldr	r3, [pc, #480]	@ (8000968 <main+0x2c4>)
 8000786:	701a      	strb	r2, [r3, #0]

		memcpy(buf, rcvBuffer, sizeof(buf));
 8000788:	4a78      	ldr	r2, [pc, #480]	@ (800096c <main+0x2c8>)
 800078a:	4b76      	ldr	r3, [pc, #472]	@ (8000964 <main+0x2c0>)
 800078c:	4614      	mov	r4, r2
 800078e:	461d      	mov	r5, r3
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	6023      	str	r3, [r4, #0]

//		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
		memcpy(&uart_prev_count, &buf[1], sizeof(uint8_t));
 8000798:	4b74      	ldr	r3, [pc, #464]	@ (800096c <main+0x2c8>)
 800079a:	785a      	ldrb	r2, [r3, #1]
 800079c:	4b74      	ldr	r3, [pc, #464]	@ (8000970 <main+0x2cc>)
 800079e:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[3];
 80007a0:	4b72      	ldr	r3, [pc, #456]	@ (800096c <main+0x2c8>)
 80007a2:	78db      	ldrb	r3, [r3, #3]
 80007a4:	723b      	strb	r3, [r7, #8]
		reversed_bytes[1] = buf[2];
 80007a6:	4b71      	ldr	r3, [pc, #452]	@ (800096c <main+0x2c8>)
 80007a8:	789b      	ldrb	r3, [r3, #2]
 80007aa:	727b      	strb	r3, [r7, #9]

//		reversed_bytes[0] = buf[2];
//		reversed_bytes[1] = buf[1];
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 80007ac:	893a      	ldrh	r2, [r7, #8]
 80007ae:	4b71      	ldr	r3, [pc, #452]	@ (8000974 <main+0x2d0>)
 80007b0:	801a      	strh	r2, [r3, #0]
// memcpy(&reversed_command_id, reversed_bytes, sizeof(uint16_t));
// command_id = reversed_command_id;

		uint8_t _temp_command_content[4];
		// uint8_t reversed_bytes[4];
		memcpy(_temp_command_content, &buf[4], sizeof(float));
 80007b2:	4b6e      	ldr	r3, [pc, #440]	@ (800096c <main+0x2c8>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	607b      	str	r3, [r7, #4]

//		memcpy(_temp_command_content, &buf[3], sizeof(float));

		//    // バイト列を逆順にコピー
		for (int j = 0; j < 4; j++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	e00f      	b.n	80007de <main+0x13a>
			reversed_bytes[j] = _temp_command_content[3 - j];
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	f1c3 0303 	rsb	r3, r3, #3
 80007c4:	3318      	adds	r3, #24
 80007c6:	443b      	add	r3, r7
 80007c8:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80007cc:	f107 0208 	add.w	r2, r7, #8
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	460a      	mov	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	3301      	adds	r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	ddec      	ble.n	80007be <main+0x11a>
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4a64      	ldr	r2, [pc, #400]	@ (8000978 <main+0x2d4>)
 80007e8:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

		switch (command_id) {
 80007ea:	4b62      	ldr	r3, [pc, #392]	@ (8000974 <main+0x2d0>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	3b16      	subs	r3, #22
 80007f0:	2b06      	cmp	r3, #6
 80007f2:	f200 80a5 	bhi.w	8000940 <main+0x29c>
 80007f6:	a201      	add	r2, pc, #4	@ (adr r2, 80007fc <main+0x158>)
 80007f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fc:	08000819 	.word	0x08000819
 8000800:	08000941 	.word	0x08000941
 8000804:	08000833 	.word	0x08000833
 8000808:	08000941 	.word	0x08000941
 800080c:	0800084d 	.word	0x0800084d
 8000810:	08000867 	.word	0x08000867
 8000814:	08000927 	.word	0x08000927
		case 22:
			motor_speed[0] = command_content;
 8000818:	4b57      	ldr	r3, [pc, #348]	@ (8000978 <main+0x2d4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a57      	ldr	r2, [pc, #348]	@ (800097c <main+0x2d8>)
 800081e:	6013      	str	r3, [r2, #0]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[0], (float) motor_speed[0]);
 8000820:	4b56      	ldr	r3, [pc, #344]	@ (800097c <main+0x2d8>)
 8000822:	edd3 7a00 	vldr	s15, [r3]
 8000826:	eeb0 0a67 	vmov.f32	s0, s15
 800082a:	4849      	ldr	r0, [pc, #292]	@ (8000950 <main+0x2ac>)
 800082c:	f7ff fe00 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000830:	e086      	b.n	8000940 <main+0x29c>
		case 24:
			motor_speed[1] = command_content;
 8000832:	4b51      	ldr	r3, [pc, #324]	@ (8000978 <main+0x2d4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a51      	ldr	r2, [pc, #324]	@ (800097c <main+0x2d8>)
 8000838:	6053      	str	r3, [r2, #4]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[1], (float) motor_speed[1]);
 800083a:	4b50      	ldr	r3, [pc, #320]	@ (800097c <main+0x2d8>)
 800083c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	484e      	ldr	r0, [pc, #312]	@ (8000980 <main+0x2dc>)
 8000846:	f7ff fdf3 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 800084a:	e079      	b.n	8000940 <main+0x29c>
		case 26:
			motor_speed[2] = command_content;
 800084c:	4b4a      	ldr	r3, [pc, #296]	@ (8000978 <main+0x2d4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a4a      	ldr	r2, [pc, #296]	@ (800097c <main+0x2d8>)
 8000852:	6093      	str	r3, [r2, #8]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[2], (float) motor_speed[2]);
 8000854:	4b49      	ldr	r3, [pc, #292]	@ (800097c <main+0x2d8>)
 8000856:	edd3 7a02 	vldr	s15, [r3, #8]
 800085a:	eeb0 0a67 	vmov.f32	s0, s15
 800085e:	4849      	ldr	r0, [pc, #292]	@ (8000984 <main+0x2e0>)
 8000860:	f7ff fde6 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000864:	e06c      	b.n	8000940 <main+0x29c>
		case 27:
			debug_2 = 100;
 8000866:	4b48      	ldr	r3, [pc, #288]	@ (8000988 <main+0x2e4>)
 8000868:	2264      	movs	r2, #100	@ 0x64
 800086a:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e055      	b.n	800091e <main+0x27a>
				if (is_run_CyberGear) {
					debug_2 = 288;
 8000872:	4b45      	ldr	r3, [pc, #276]	@ (8000988 <main+0x2e4>)
 8000874:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8000878:	801a      	strh	r2, [r3, #0]
					CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	22b0      	movs	r2, #176	@ 0xb0
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	4a33      	ldr	r2, [pc, #204]	@ (8000950 <main+0x2ac>)
 8000884:	1898      	adds	r0, r3, r2
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	3370      	adds	r3, #112	@ 0x70
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <main+0x2b0>)
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	492d      	ldr	r1, [pc, #180]	@ (800094c <main+0x2a8>)
 8000896:	f7ff fd0e 	bl	80002b6 <CyberGear_Init>
					debug_2 = 290;
 800089a:	4b3b      	ldr	r3, [pc, #236]	@ (8000988 <main+0x2e4>)
 800089c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80008a0:	801a      	strh	r2, [r3, #0]
					CyberGear_ResetMotor(&my_cyber[i]);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	22b0      	movs	r2, #176	@ 0xb0
 80008a6:	fb02 f303 	mul.w	r3, r2, r3
 80008aa:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <main+0x2ac>)
 80008ac:	4413      	add	r3, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdfe 	bl	80004b0 <CyberGear_ResetMotor>
					debug_2 = 292;
 80008b4:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <main+0x2e4>)
 80008b6:	f44f 7292 	mov.w	r2, #292	@ 0x124
 80008ba:	801a      	strh	r2, [r3, #0]
					CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	22b0      	movs	r2, #176	@ 0xb0
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <main+0x2ac>)
 80008c6:	4413      	add	r3, r2
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fd2e 	bl	800032c <CyberGear_SetMode>
					debug_2 = 294;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <main+0x2e4>)
 80008d2:	f44f 7293 	mov.w	r2, #294	@ 0x126
 80008d6:	801a      	strh	r2, [r3, #0]
					CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	22b0      	movs	r2, #176	@ 0xb0
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <main+0x2ac>)
 80008e2:	4413      	add	r3, r2
 80008e4:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 80008e8:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80008ec:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fcfe 	bl	80002f2 <CyberGear_SetConfig>
					debug_2 = 296;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <main+0x2e4>)
 80008f8:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80008fc:	801a      	strh	r2, [r3, #0]
					CyberGear_EnableMotor(&my_cyber[i]);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	22b0      	movs	r2, #176	@ 0xb0
 8000902:	fb02 f303 	mul.w	r3, r2, r3
 8000906:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <main+0x2ac>)
 8000908:	4413      	add	r3, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fdb1 	bl	8000472 <CyberGear_EnableMotor>
					debug_2 = 298;
 8000910:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <main+0x2e4>)
 8000912:	f44f 7295 	mov.w	r2, #298	@ 0x12a
 8000916:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b03      	cmp	r3, #3
 8000922:	dda6      	ble.n	8000872 <main+0x1ce>
				}
			}
			break;
 8000924:	e00c      	b.n	8000940 <main+0x29c>
		case 28:
			motor_speed[3] = command_content;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <main+0x2d4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a14      	ldr	r2, [pc, #80]	@ (800097c <main+0x2d8>)
 800092c:	60d3      	str	r3, [r2, #12]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[3], (float) motor_speed[3]);
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <main+0x2d8>)
 8000930:	edd3 7a03 	vldr	s15, [r3, #12]
 8000934:	eeb0 0a67 	vmov.f32	s0, s15
 8000938:	4814      	ldr	r0, [pc, #80]	@ (800098c <main+0x2e8>)
 800093a:	f7ff fd79 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 800093e:	bf00      	nop
		}

		HAL_Delay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fc3b 	bl	80011bc <HAL_Delay>
	while (1) {
 8000946:	e712      	b.n	800076e <main+0xca>
 8000948:	2000002c 	.word	0x2000002c
 800094c:	20000474 	.word	0x20000474
 8000950:	200001b4 	.word	0x200001b4
 8000954:	080011bd 	.word	0x080011bd
 8000958:	08005850 	.word	0x08005850
 800095c:	200000a0 	.word	0x200000a0
 8000960:	48000400 	.word	0x48000400
 8000964:	2000050c 	.word	0x2000050c
 8000968:	200001b0 	.word	0x200001b0
 800096c:	200004ec 	.word	0x200004ec
 8000970:	20000500 	.word	0x20000500
 8000974:	20000502 	.word	0x20000502
 8000978:	20000504 	.word	0x20000504
 800097c:	200004dc 	.word	0x200004dc
 8000980:	20000264 	.word	0x20000264
 8000984:	20000314 	.word	0x20000314
 8000988:	20000000 	.word	0x20000000
 800098c:	200003c4 	.word	0x200003c4

08000990 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	@ 0x58
 8000994:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000996:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800099a:	2228      	movs	r2, #40	@ 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 ff0f 	bl	80057c2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d4:	2300      	movs	r3, #0
 80009d6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80009d8:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80009dc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fc20 	bl	8002228 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x62>
		Error_Handler();
 80009ee:	f000 f98f 	bl	8000d10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fc48 	bl	80032a4 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x8e>
		Error_Handler();
 8000a1a:	f000 f979 	bl	8000d10 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a22:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fe70 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xaa>
		Error_Handler();
 8000a36:	f000 f96b 	bl	8000d10 <Error_Handler>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3758      	adds	r7, #88	@ 0x58
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <MX_CAN_Init+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a62:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a66:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a6e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_CAN_Init+0x64>)
 8000a96:	f000 fbb5 	bl	8001204 <HAL_CAN_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_CAN_Init+0x60>
		Error_Handler();
 8000aa0:	f000 f936 	bl	8000d10 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000002c 	.word	0x2000002c
 8000aac:	40006400 	.word	0x40006400

08000ab0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	@ 0x58
 8000ab4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ab6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	222c      	movs	r2, #44	@ 0x2c
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fe70 	bl	80057c2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ae2:	4b39      	ldr	r3, [pc, #228]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000ae4:	4a39      	ldr	r2, [pc, #228]	@ (8000bcc <MX_TIM1_Init+0x11c>)
 8000ae6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000ae8:	4b37      	ldr	r3, [pc, #220]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b36      	ldr	r3, [pc, #216]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000af4:	4b34      	ldr	r3, [pc, #208]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000af6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000afa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b32      	ldr	r3, [pc, #200]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b02:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000b0e:	482e      	ldr	r0, [pc, #184]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000b10:	f002 ff24 	bl	800395c <HAL_TIM_PWM_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000b1a:	f000 f8f9 	bl	8000d10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4825      	ldr	r0, [pc, #148]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000b32:	f003 fb9d 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b3c:	f000 f8e8 	bl	8000d10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b40:	2360      	movs	r3, #96	@ 0x60
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000b5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000b66:	f002 ff51 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000b70:	f000 f8ce 	bl	8000d10 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000baa:	f003 fbcf 	bl	800434c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000bb4:	f000 f8ac 	bl	8000d10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <MX_TIM1_Init+0x118>)
 8000bba:	f000 f937 	bl	8000e2c <HAL_TIM_MspPostInit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3758      	adds	r7, #88	@ 0x58
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000054 	.word	0x20000054
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000bd6:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bd8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000bdc:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <MX_USART2_UART_Init+0x5c>)
 8000bde:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_USART2_UART_Init+0x54>)
 8000c12:	f003 fc13 	bl	800443c <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART2_UART_Init+0x50>
		Error_Handler();
 8000c1c:	f000 f878 	bl	8000d10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	0007a120 	.word	0x0007a120

08000c30 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_DMA_Init+0x48>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <MX_DMA_Init+0x48>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_DMA_Init+0x48>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2010      	movs	r0, #16
 8000c54:	f000 fefb 	bl	8001a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 ff14 	bl	8001a86 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2011      	movs	r0, #17
 8000c64:	f000 fef3 	bl	8001a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 ff0c 	bl	8001a86 <HAL_NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a16      	ldr	r2, [pc, #88]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_GPIO_Init+0x8c>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	480b      	ldr	r0, [pc, #44]	@ (8000d0c <MX_GPIO_Init+0x90>)
 8000ce0:	f001 fa70 	bl	80021c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <MX_GPIO_Init+0x90>)
 8000cfc:	f001 f8f0 	bl	8001ee0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400

08000d10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <HAL_CAN_MspInit+0x80>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d129      	bne.n	8000dda <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_CAN_MspInit+0x84>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <HAL_CAN_MspInit+0x84>)
 8000d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_CAN_MspInit+0x84>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_CAN_MspInit+0x84>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <HAL_CAN_MspInit+0x84>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	6153      	str	r3, [r2, #20]
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_CAN_MspInit+0x84>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000db6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd6:	f001 f883 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40006400 	.word	0x40006400
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_TIM_PWM_MspInit+0x38>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10b      	bne.n	8000e16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <HAL_TIM_MspPostInit+0x68>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d11d      	bne.n	8000e8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_TIM_MspPostInit+0x6c>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <HAL_TIM_MspPostInit+0x6c>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_TIM_MspPostInit+0x6c>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f001 f82b 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a42      	ldr	r2, [pc, #264]	@ (8000fc4 <HAL_UART_MspInit+0x128>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d17d      	bne.n	8000fba <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebe:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <HAL_UART_MspInit+0x12c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a41      	ldr	r2, [pc, #260]	@ (8000fc8 <HAL_UART_MspInit+0x12c>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc8 <HAL_UART_MspInit+0x12c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc8 <HAL_UART_MspInit+0x12c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc8 <HAL_UART_MspInit+0x12c>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <HAL_UART_MspInit+0x12c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000eee:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f00:	2307      	movs	r3, #7
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0e:	f000 ffe7 	bl	8001ee0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000f12:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f14:	4a2e      	ldr	r2, [pc, #184]	@ (8000fd0 <HAL_UART_MspInit+0x134>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f30:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f42:	4822      	ldr	r0, [pc, #136]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f44:	f000 fdbd 	bl	8001ac2 <HAL_DMA_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000f4e:	f7ff fedf 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f56:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f58:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <HAL_UART_MspInit+0x130>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f60:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f84:	2220      	movs	r2, #32
 8000f86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f90:	f000 fd97 	bl	8001ac2 <HAL_DMA_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000f9a:	f7ff feb9 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000fa2:	675a      	str	r2, [r3, #116]	@ 0x74
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2026      	movs	r0, #38	@ 0x26
 8000fb0:	f000 fd4d 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fb4:	2026      	movs	r0, #38	@ 0x26
 8000fb6:	f000 fd66 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	20000128 	.word	0x20000128
 8000fd0:	40020080 	.word	0x40020080
 8000fd4:	2000016c 	.word	0x2000016c
 8000fd8:	4002006c 	.word	0x4002006c

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f8a3 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <DMA1_Channel6_IRQHandler+0x10>)
 8001042:	f000 fe5b 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000016c 	.word	0x2000016c

08001050 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <DMA1_Channel7_IRQHandler+0x10>)
 8001056:	f000 fe51 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000128 	.word	0x20000128

08001064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <USART2_IRQHandler+0x10>)
 800106a:	f003 faf5 	bl	8004658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000a0 	.word	0x200000a0

08001078 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a0:	f7ff ffea 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f004 fb83 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ce:	f7ff fae9 	bl	80006a4 <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010e0:	080058b4 	.word	0x080058b4
  ldr r2, =_sbss
 80010e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010e8:	20000530 	.word	0x20000530

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 fc99 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe06 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fcb5 	bl	8001aaa <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001158:	f000 fc79 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	@ (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000004 	.word	0x20000004
 8001174:	2000000c 	.word	0x2000000c
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	2000052c 	.word	0x2000052c

080011a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000052c 	.word	0x2000052c

080011bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c

08001204 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0ed      	b.n	80013f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fd9e 	bl	8000d64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001238:	f7ff ffb4 	bl	80011a4 <HAL_GetTick>
 800123c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123e:	e012      	b.n	8001266 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001240:	f7ff ffb0 	bl	80011a4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b0a      	cmp	r3, #10
 800124c:	d90b      	bls.n	8001266 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2205      	movs	r2, #5
 800125e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0c5      	b.n	80013f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0e5      	beq.n	8001240 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0202 	bic.w	r2, r2, #2
 8001282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff ff8e 	bl	80011a4 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128a:	e012      	b.n	80012b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128c:	f7ff ff8a 	bl	80011a4 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b0a      	cmp	r3, #10
 8001298:	d90b      	bls.n	80012b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e09f      	b.n	80013f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e5      	bne.n	800128c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7e1b      	ldrb	r3, [r3, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d108      	bne.n	80012da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e007      	b.n	80012ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5b      	ldrb	r3, [r3, #25]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d108      	bne.n	8001304 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e007      	b.n	8001314 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001312:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d108      	bne.n	800132e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0220 	orr.w	r2, r2, #32
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e007      	b.n	800133e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0220 	bic.w	r2, r2, #32
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7edb      	ldrb	r3, [r3, #27]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0210 	bic.w	r2, r2, #16
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e007      	b.n	8001368 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7f1b      	ldrb	r3, [r3, #28]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d108      	bne.n	8001382 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0208 	orr.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e007      	b.n	8001392 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0208 	bic.w	r2, r2, #8
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7f5b      	ldrb	r3, [r3, #29]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d108      	bne.n	80013ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0204 	orr.w	r2, r2, #4
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e007      	b.n	80013bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	ea42 0103 	orr.w	r1, r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b087      	sub	sp, #28
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001412:	7cfb      	ldrb	r3, [r7, #19]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d003      	beq.n	8001420 <HAL_CAN_ConfigFilter+0x26>
 8001418:	7cfb      	ldrb	r3, [r7, #19]
 800141a:	2b02      	cmp	r3, #2
 800141c:	f040 80aa 	bne.w	8001574 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2201      	movs	r2, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d123      	bne.n	80014a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800147c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3248      	adds	r2, #72	@ 0x48
 8001482:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001496:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001498:	6979      	ldr	r1, [r7, #20]
 800149a:	3348      	adds	r3, #72	@ 0x48
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d122      	bne.n	80014f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3248      	adds	r2, #72	@ 0x48
 80014d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e6:	6979      	ldr	r1, [r7, #20]
 80014e8:	3348      	adds	r3, #72	@ 0x48
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800150a:	e007      	b.n	800151c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001536:	e007      	b.n	8001548 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001566:	f023 0201 	bic.w	r2, r3, #1
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e006      	b.n	8001582 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
  }
}
 8001582:	4618      	mov	r0, r3
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d12e      	bne.n	8001600 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015ba:	f7ff fdf3 	bl	80011a4 <HAL_GetTick>
 80015be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c0:	e012      	b.n	80015e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c2:	f7ff fdef 	bl	80011a4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d90b      	bls.n	80015e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2205      	movs	r2, #5
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e012      	b.n	800160e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e5      	bne.n	80015c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e006      	b.n	800160e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001616:	b480      	push	{r7}
 8001618:	b089      	sub	sp, #36	@ 0x24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d003      	beq.n	8001642 <HAL_CAN_AddTxMessage+0x2c>
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b02      	cmp	r3, #2
 800163e:	f040 80ad 	bne.w	800179c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10a      	bne.n	8001662 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8095 	beq.w	800178c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	0e1b      	lsrs	r3, r3, #24
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800166c:	2201      	movs	r2, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	409a      	lsls	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	6809      	ldr	r1, [r1, #0]
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3318      	adds	r3, #24
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	440b      	add	r3, r1
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e00f      	b.n	80016ba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016aa:	68f9      	ldr	r1, [r7, #12]
 80016ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3318      	adds	r3, #24
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	440b      	add	r3, r1
 80016b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3318      	adds	r3, #24
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	3304      	adds	r3, #4
 80016cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	7d1b      	ldrb	r3, [r3, #20]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d111      	bne.n	80016fa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3318      	adds	r3, #24
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	3304      	adds	r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3318      	adds	r3, #24
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	440b      	add	r3, r1
 80016f6:	3304      	adds	r3, #4
 80016f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3307      	adds	r3, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	061a      	lsls	r2, r3, #24
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3306      	adds	r3, #6
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3305      	adds	r3, #5
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	4313      	orrs	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	3204      	adds	r2, #4
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	4610      	mov	r0, r2
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6811      	ldr	r1, [r2, #0]
 8001722:	ea43 0200 	orr.w	r2, r3, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	440b      	add	r3, r1
 800172c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001730:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3303      	adds	r3, #3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	061a      	lsls	r2, r3, #24
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3302      	adds	r3, #2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	4313      	orrs	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	4610      	mov	r0, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	6811      	ldr	r1, [r2, #0]
 8001758:	ea43 0200 	orr.w	r2, r3, r0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	440b      	add	r3, r1
 8001762:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001766:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3318      	adds	r3, #24
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3318      	adds	r3, #24
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	440b      	add	r3, r1
 8001786:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e00e      	b.n	80017aa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e006      	b.n	80017aa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d11d      	bne.n	8001812 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001830:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d002      	beq.n	800183e <HAL_CAN_ActivateNotification+0x1e>
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d109      	bne.n	8001852 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6959      	ldr	r1, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e006      	b.n	8001860 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	@ (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019cc:	f3bf 8f4f 	dsb	sy
}
 80019d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <__NVIC_SystemReset+0x24>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019da:	4904      	ldr	r1, [pc, #16]	@ (80019ec <__NVIC_SystemReset+0x24>)
 80019dc:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <__NVIC_SystemReset+0x28>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019e2:	f3bf 8f4f 	dsb	sy
}
 80019e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <__NVIC_SystemReset+0x20>
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	05fa0004 	.word	0x05fa0004

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a18:	f7ff ff78 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff13 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff28 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff78 	bl	8001960 <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff47 	bl	800190c <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff1b 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001aa6:	f7ff ff8f 	bl	80019c8 <__NVIC_SystemReset>

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff9e 	bl	80019f4 <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e037      	b.n	8001b48 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001af2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f9b8 	bl	8001ea0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}  
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_DMA_Start_IT+0x20>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e04a      	b.n	8001c06 <HAL_DMA_Start_IT+0xb6>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d13a      	bne.n	8001bf8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2202      	movs	r2, #2
 8001b86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f94b 	bl	8001e42 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 020e 	orr.w	r2, r2, #14
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e00f      	b.n	8001be6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 020a 	orr.w	r2, r2, #10
 8001bd4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0204 	bic.w	r2, r2, #4
 8001be4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e005      	b.n	8001c04 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
 8001c02:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2204      	movs	r2, #4
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e020      	b.n	8001c74 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 020e 	bic.w	r2, r2, #14
 8001c40:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d005      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e027      	b.n	8001cf2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020e 	bic.w	r2, r2, #14
 8001cb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    } 
  }
  return status;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	2204      	movs	r2, #4
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d024      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x72>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01f      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0204 	bic.w	r2, r2, #4
 8001d4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	2104      	movs	r1, #4
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d06a      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d6c:	e065      	b.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2202      	movs	r2, #2
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d02c      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xdc>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d027      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 020a 	bic.w	r2, r2, #10
 8001da4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db6:	2102      	movs	r1, #2
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d035      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001dd6:	e030      	b.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	2208      	movs	r2, #8
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d028      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d023      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 020e 	bic.w	r2, r2, #14
 8001e00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
    }
  }
}  
 8001e38:	e7ff      	b.n	8001e3a <HAL_DMA_IRQHandler+0x13e>
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d108      	bne.n	8001e82 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e80:	e007      	b.n	8001e92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	60da      	str	r2, [r3, #12]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <DMA_CalcBaseAndBitshift+0x34>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <DMA_CalcBaseAndBitshift+0x38>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	009a      	lsls	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a06      	ldr	r2, [pc, #24]	@ (8001edc <DMA_CalcBaseAndBitshift+0x3c>)
 8001ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	bffdfff8 	.word	0xbffdfff8
 8001ed8:	cccccccd 	.word	0xcccccccd
 8001edc:	40020000 	.word	0x40020000

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e14e      	b.n	800218e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8140 	beq.w	8002188 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <HAL_GPIO_Init+0x40>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d017      	beq.n	8001fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 809a 	beq.w	8002188 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_GPIO_Init+0x2cc>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a54      	ldr	r2, [pc, #336]	@ (80021ac <HAL_GPIO_Init+0x2cc>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <HAL_GPIO_Init+0x2cc>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206c:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_GPIO_Init+0x2d0>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002096:	d013      	beq.n	80020c0 <HAL_GPIO_Init+0x1e0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a46      	ldr	r2, [pc, #280]	@ (80021b4 <HAL_GPIO_Init+0x2d4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_GPIO_Init+0x1dc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a45      	ldr	r2, [pc, #276]	@ (80021b8 <HAL_GPIO_Init+0x2d8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_Init+0x1d8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a44      	ldr	r2, [pc, #272]	@ (80021bc <HAL_GPIO_Init+0x2dc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_GPIO_Init+0x1d4>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e006      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020b4:	2305      	movs	r3, #5
 80020b6:	e004      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e002      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020c0:	2300      	movs	r3, #0
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	f002 0203 	and.w	r2, r2, #3
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4093      	lsls	r3, r2
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d2:	4937      	ldr	r1, [pc, #220]	@ (80021b0 <HAL_GPIO_Init+0x2d0>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e0:	4b37      	ldr	r3, [pc, #220]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002104:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210a:	4b2d      	ldr	r3, [pc, #180]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800212e:	4a24      	ldr	r2, [pc, #144]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002134:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <HAL_GPIO_Init+0x2e0>)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f aea9 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000800 	.word	0x48000800
 80021bc:	48000c00 	.word	0x48000c00
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43d9      	mvns	r1, r3
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	400b      	ands	r3, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800222e:	af00      	add	r7, sp, #0
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002238:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	f001 b823 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 817d 	beq.w	800255e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002264:	4bbc      	ldr	r3, [pc, #752]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d00c      	beq.n	800228a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002270:	4bb9      	ldr	r3, [pc, #740]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d15c      	bne.n	8002336 <HAL_RCC_OscConfig+0x10e>
 800227c:	4bb6      	ldr	r3, [pc, #728]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d155      	bne.n	8002336 <HAL_RCC_OscConfig+0x10e>
 800228a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800228e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800229e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_OscConfig+0x94>
 80022b6:	4ba8      	ldr	r3, [pc, #672]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e015      	b.n	80022e8 <HAL_RCC_OscConfig+0xc0>
 80022bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80022e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80022f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022f4:	fa92 f2a2 	rbit	r2, r2
 80022f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80022fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002300:	fab2 f282 	clz	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f002 021f 	and.w	r2, r2, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f202 	lsl.w	r2, r1, r2
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 811f 	beq.w	800255c <HAL_RCC_OscConfig+0x334>
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8116 	bne.w	800255c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f000 bfaf 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x12e>
 8002348:	4b83      	ldr	r3, [pc, #524]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a82      	ldr	r2, [pc, #520]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e036      	b.n	80023c4 <HAL_RCC_OscConfig+0x19c>
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x158>
 8002366:	4b7c      	ldr	r3, [pc, #496]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7b      	ldr	r2, [pc, #492]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800236c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b79      	ldr	r3, [pc, #484]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a78      	ldr	r2, [pc, #480]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e021      	b.n	80023c4 <HAL_RCC_OscConfig+0x19c>
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x184>
 8002392:	4b71      	ldr	r3, [pc, #452]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a70      	ldr	r2, [pc, #448]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b6e      	ldr	r3, [pc, #440]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a6d      	ldr	r2, [pc, #436]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0x19c>
 80023ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a69      	ldr	r2, [pc, #420]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a66      	ldr	r2, [pc, #408]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c4:	4b64      	ldr	r3, [pc, #400]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f023 020f 	bic.w	r2, r3, #15
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	495f      	ldr	r1, [pc, #380]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d059      	beq.n	80024a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fed9 	bl	80011a4 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fed4 	bl	80011a4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	@ 0x64
 8002406:	d902      	bls.n	800240e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	f000 bf43 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
 800240e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002412:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002422:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_RCC_OscConfig+0x218>
 800243a:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e015      	b.n	800246c <HAL_RCC_OscConfig+0x244>
 8002440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002444:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002458:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800245c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002468:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002470:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002474:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002480:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ab      	beq.n	80023f8 <HAL_RCC_OscConfig+0x1d0>
 80024a0:	e05d      	b.n	800255e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe7f 	bl	80011a4 <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fe7a 	bl	80011a4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	@ 0x64
 80024ba:	d902      	bls.n	80024c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	f000 bee9 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
 80024c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2cc>
 80024ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e015      	b.n	8002520 <HAL_RCC_OscConfig+0x2f8>
 80024f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002508:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800250c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002510:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_RCC_OscConfig+0x330>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002524:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002528:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002534:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f002 021f 	and.w	r2, r2, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ab      	bne.n	80024ac <HAL_RCC_OscConfig+0x284>
 8002554:	e003      	b.n	800255e <HAL_RCC_OscConfig+0x336>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 817d 	beq.w	800286e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002574:	4ba6      	ldr	r3, [pc, #664]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002580:	4ba3      	ldr	r3, [pc, #652]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d172      	bne.n	8002672 <HAL_RCC_OscConfig+0x44a>
 800258c:	4ba0      	ldr	r3, [pc, #640]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d16c      	bne.n	8002672 <HAL_RCC_OscConfig+0x44a>
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80025aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3a0>
 80025c2:	4b93      	ldr	r3, [pc, #588]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c8>
 80025c8:	2302      	movs	r3, #2
 80025ca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80025da:	2302      	movs	r3, #2
 80025dc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80025e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80025ec:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	2202      	movs	r2, #2
 80025f2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80025f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002602:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f002 021f 	and.w	r2, r2, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCC_OscConfig+0x410>
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d002      	beq.n	8002638 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f000 be2e 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b75      	ldr	r3, [pc, #468]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	21f8      	movs	r1, #248	@ 0xf8
 800264e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002656:	fa91 f1a1 	rbit	r1, r1
 800265a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800265e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002662:	fab1 f181 	clz	r1, r1
 8002666:	b2c9      	uxtb	r1, r1
 8002668:	408b      	lsls	r3, r1
 800266a:	4969      	ldr	r1, [pc, #420]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002670:	e0fd      	b.n	800286e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8088 	beq.w	8002794 <HAL_RCC_OscConfig+0x56c>
 8002684:	2301      	movs	r3, #1
 8002686:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002696:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	2301      	movs	r3, #1
 80026ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fd78 	bl	80011a4 <HAL_GetTick>
 80026b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7fe fd73 	bl	80011a4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d902      	bls.n	80026d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	f000 bde2 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80026e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0x4d8>
 80026fa:	4b45      	ldr	r3, [pc, #276]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0x500>
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002718:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002724:	4b3a      	ldr	r3, [pc, #232]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2202      	movs	r2, #2
 800272a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800272e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800273a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f042 0220 	orr.w	r2, r2, #32
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0af      	beq.n	80026ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	21f8      	movs	r1, #248	@ 0xf8
 8002770:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002778:	fa91 f1a1 	rbit	r1, r1
 800277c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002780:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002784:	fab1 f181 	clz	r1, r1
 8002788:	b2c9      	uxtb	r1, r1
 800278a:	408b      	lsls	r3, r1
 800278c:	4920      	ldr	r1, [pc, #128]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
 8002792:	e06c      	b.n	800286e <HAL_RCC_OscConfig+0x646>
 8002794:	2301      	movs	r3, #1
 8002796:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80027a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	461a      	mov	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fcf0 	bl	80011a4 <HAL_GetTick>
 80027c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fceb 	bl	80011a4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d902      	bls.n	80027e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	f000 bd5a 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80027f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d104      	bne.n	8002814 <HAL_RCC_OscConfig+0x5ec>
 800280a:	4b01      	ldr	r3, [pc, #4]	@ (8002810 <HAL_RCC_OscConfig+0x5e8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e015      	b.n	800283c <HAL_RCC_OscConfig+0x614>
 8002810:	40021000 	.word	0x40021000
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800282c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002838:	4bc8      	ldr	r3, [pc, #800]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	2202      	movs	r2, #2
 800283e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002842:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800284e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ad      	bne.n	80027ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8110 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d079      	beq.n	8002988 <HAL_RCC_OscConfig+0x760>
 8002894:	2301      	movs	r3, #1
 8002896:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80028a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	4bab      	ldr	r3, [pc, #684]	@ (8002b60 <HAL_RCC_OscConfig+0x938>)
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	461a      	mov	r2, r3
 80028ba:	2301      	movs	r3, #1
 80028bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe fc71 	bl	80011a4 <HAL_GetTick>
 80028c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fc6c 	bl	80011a4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d902      	bls.n	80028de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	f000 bcdb 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
 80028de:	2302      	movs	r3, #2
 80028e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028f8:	2202      	movs	r2, #2
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800291c:	2202      	movs	r2, #2
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002936:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002938:	4b88      	ldr	r3, [pc, #544]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 800293a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002944:	2102      	movs	r1, #2
 8002946:	6019      	str	r1, [r3, #0]
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f1a3 	rbit	r1, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800295e:	6019      	str	r1, [r3, #0]
  return result;
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0a0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x6a0>
 8002986:	e08d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x87c>
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029aa:	601a      	str	r2, [r3, #0]
  return result;
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4b68      	ldr	r3, [pc, #416]	@ (8002b60 <HAL_RCC_OscConfig+0x938>)
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	461a      	mov	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fbeb 	bl	80011a4 <HAL_GetTick>
 80029ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fbe6 	bl	80011a4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f000 bc55 	b.w	8003294 <HAL_RCC_OscConfig+0x106c>
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a56:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a62:	2102      	movs	r1, #2
 8002a64:	6019      	str	r1, [r3, #0]
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f1a3 	rbit	r1, r3
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a7c:	6019      	str	r1, [r3, #0]
  return result;
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d197      	bne.n	80029d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 81a1 	beq.w	8002dfc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac0:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	61d3      	str	r3, [r2, #28]
 8002ad8:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002af2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_RCC_OscConfig+0x93c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <HAL_RCC_OscConfig+0x93c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <HAL_RCC_OscConfig+0x93c>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fb47 	bl	80011a4 <HAL_GetTick>
 8002b16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	e009      	b.n	8002b30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7fe fb42 	bl	80011a4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	@ 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e3b1      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <HAL_RCC_OscConfig+0x93c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ef      	beq.n	8002b1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10d      	bne.n	8002b68 <HAL_RCC_OscConfig+0x940>
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a02      	ldr	r2, [pc, #8]	@ (8002b5c <HAL_RCC_OscConfig+0x934>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	e03c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x9ac>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	10908120 	.word	0x10908120
 8002b64:	40007000 	.word	0x40007000
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x96a>
 8002b78:	4bc1      	ldr	r3, [pc, #772]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4ac0      	ldr	r2, [pc, #768]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4bbe      	ldr	r3, [pc, #760]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4abd      	ldr	r2, [pc, #756]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e020      	b.n	8002bd4 <HAL_RCC_OscConfig+0x9ac>
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x994>
 8002ba2:	4bb7      	ldr	r3, [pc, #732]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4ab6      	ldr	r2, [pc, #728]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6213      	str	r3, [r2, #32]
 8002bae:	4bb4      	ldr	r3, [pc, #720]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4ab3      	ldr	r2, [pc, #716]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x9ac>
 8002bbc:	4bb0      	ldr	r3, [pc, #704]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4aaf      	ldr	r2, [pc, #700]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	4bad      	ldr	r3, [pc, #692]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4aac      	ldr	r2, [pc, #688]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8081 	beq.w	8002ce8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fadd 	bl	80011a4 <HAL_GetTick>
 8002bea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fad8 	bl	80011a4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e345      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c34:	2202      	movs	r2, #2
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c4e:	601a      	str	r2, [r3, #0]
  return result;
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_OscConfig+0xa4c>
 8002c6e:	4b84      	ldr	r3, [pc, #528]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	e013      	b.n	8002c9c <HAL_RCC_OscConfig+0xa74>
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b79      	ldr	r3, [pc, #484]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	6011      	str	r1, [r2, #0]
 8002ca8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	fa92 f1a2 	rbit	r1, r2
 8002cb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cbe:	6011      	str	r1, [r2, #0]
  return result;
 8002cc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d084      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x9c8>
 8002ce6:	e07f      	b.n	8002de8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fa5c 	bl	80011a4 <HAL_GetTick>
 8002cec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fa57 	bl	80011a4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e2c4      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d50:	601a      	str	r2, [r3, #0]
  return result;
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0xb4e>
 8002d70:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	e013      	b.n	8002d9e <HAL_RCC_OscConfig+0xb76>
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d7e:	2202      	movs	r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d94:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4b39      	ldr	r3, [pc, #228]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002da2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002da6:	2102      	movs	r1, #2
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	fa92 f1a2 	rbit	r1, r2
 8002db8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dbc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002dc0:	6011      	str	r1, [r2, #0]
  return result;
 8002dc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dc6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f002 021f 	and.w	r2, r2, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d184      	bne.n	8002cf2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b23      	ldr	r3, [pc, #140]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4a22      	ldr	r2, [pc, #136]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8242 	beq.w	8003292 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <HAL_RCC_OscConfig+0xc58>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	f000 8213 	beq.w	8003242 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f040 8162 	bne.w	80030f2 <HAL_RCC_OscConfig+0xeca>
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e40:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e52:	601a      	str	r2, [r3, #0]
  return result;
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2300      	movs	r3, #0
 8002e72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe f996 	bl	80011a4 <HAL_GetTick>
 8002e78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCC_OscConfig+0xc70>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe f98e 	bl	80011a4 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1fd      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ebc:	601a      	str	r2, [r3, #0]
  return result;
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ec6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_OscConfig+0xcba>
 8002edc:	4bb0      	ldr	r3, [pc, #704]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	e027      	b.n	8002f32 <HAL_RCC_OscConfig+0xd0a>
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002eea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	4b9c      	ldr	r3, [pc, #624]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f36:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f3a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f3e:	6011      	str	r1, [r2, #0]
 8002f40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f44:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	fa92 f1a2 	rbit	r1, r2
 8002f4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f52:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f56:	6011      	str	r1, [r2, #0]
  return result;
 8002f58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	fab2 f282 	clz	r2, r2
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f042 0220 	orr.w	r2, r2, #32
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f002 021f 	and.w	r2, r2, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f202 	lsl.w	r2, r1, r2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d182      	bne.n	8002e84 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7e:	4b88      	ldr	r3, [pc, #544]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	497f      	ldr	r1, [pc, #508]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fca:	601a      	str	r2, [r3, #0]
  return result;
 8002fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fd4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fe0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2301      	movs	r3, #1
 8002fea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe f8da 	bl	80011a4 <HAL_GetTick>
 8002ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	e009      	b.n	800300a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe f8d5 	bl	80011a4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e144      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003012:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003038:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0xe2c>
 800304e:	4b54      	ldr	r3, [pc, #336]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e027      	b.n	80030a4 <HAL_RCC_OscConfig+0xe7c>
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800305c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003066:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	4b3f      	ldr	r3, [pc, #252]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030b0:	6011      	str	r1, [r2, #0]
 80030b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	fa92 f1a2 	rbit	r1, r2
 80030c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030c8:	6011      	str	r1, [r2, #0]
  return result;
 80030ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	fab2 f282 	clz	r2, r2
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f042 0220 	orr.w	r2, r2, #32
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f002 021f 	and.w	r2, r2, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d082      	beq.n	8002ff6 <HAL_RCC_OscConfig+0xdce>
 80030f0:	e0cf      	b.n	8003292 <HAL_RCC_OscConfig+0x106a>
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80030fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003120:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800312c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	461a      	mov	r2, r3
 8003134:	2300      	movs	r3, #0
 8003136:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f834 	bl	80011a4 <HAL_GetTick>
 800313c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003140:	e009      	b.n	8003156 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe f82f 	bl	80011a4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e09e      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800315e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003168:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d104      	bne.n	80031a4 <HAL_RCC_OscConfig+0xf7c>
 800319a:	4b01      	ldr	r3, [pc, #4]	@ (80031a0 <HAL_RCC_OscConfig+0xf78>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e029      	b.n	80031f4 <HAL_RCC_OscConfig+0xfcc>
 80031a0:	40021000 	.word	0x40021000
 80031a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_RCC_OscConfig+0x1078>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80031fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003200:	6011      	str	r1, [r2, #0]
 8003202:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003206:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	fa92 f1a2 	rbit	r1, r2
 8003210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003214:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003218:	6011      	str	r1, [r2, #0]
  return result;
 800321a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800321e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	fab2 f282 	clz	r2, r2
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	f042 0220 	orr.w	r2, r2, #32
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	f002 021f 	and.w	r2, r2, #31
 8003234:	2101      	movs	r1, #1
 8003236:	fa01 f202 	lsl.w	r2, r1, r2
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d180      	bne.n	8003142 <HAL_RCC_OscConfig+0xf1a>
 8003240:	e027      	b.n	8003292 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e01e      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003256:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <HAL_RCC_OscConfig+0x1078>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800325e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003262:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	429a      	cmp	r2, r3
 8003274:	d10b      	bne.n	800328e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003276:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800327a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800328a:	429a      	cmp	r2, r3
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b09e      	sub	sp, #120	@ 0x78
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e162      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b90      	ldr	r3, [pc, #576]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d910      	bls.n	80032ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	498b      	ldr	r1, [pc, #556]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b89      	ldr	r3, [pc, #548]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e14a      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b82      	ldr	r3, [pc, #520]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	497f      	ldr	r1, [pc, #508]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80dc 	beq.w	80034d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d13c      	bne.n	800339a <HAL_RCC_ClockConfig+0xf6>
 8003320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003324:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800332e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_RCC_ClockConfig+0xa6>
 8003344:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	e00f      	b.n	800336a <HAL_RCC_ClockConfig+0xc6>
 800334a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800334e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	667b      	str	r3, [r7, #100]	@ 0x64
 8003358:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800335c:	663b      	str	r3, [r7, #96]	@ 0x60
 800335e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003366:	4b67      	ldr	r3, [pc, #412]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800336e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003372:	fa92 f2a2 	rbit	r2, r2
 8003376:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800337a:	fab2 f282 	clz	r2, r2
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f042 0220 	orr.w	r2, r2, #32
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	f002 021f 	and.w	r2, r2, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d17b      	bne.n	800348e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0f3      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d13c      	bne.n	800341c <HAL_RCC_ClockConfig+0x178>
 80033a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d102      	bne.n	80033cc <HAL_RCC_ClockConfig+0x128>
 80033c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	e00f      	b.n	80033ec <HAL_RCC_ClockConfig+0x148>
 80033cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033de:	643b      	str	r3, [r7, #64]	@ 0x40
 80033e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e8:	4b46      	ldr	r3, [pc, #280]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033f4:	fa92 f2a2 	rbit	r2, r2
 80033f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80033fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033fc:	fab2 f282 	clz	r2, r2
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	f042 0220 	orr.w	r2, r2, #32
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f002 021f 	and.w	r2, r2, #31
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f202 	lsl.w	r2, r1, r2
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d13a      	bne.n	800348e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b2      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
 800341c:	2302      	movs	r3, #2
 800341e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_RCC_ClockConfig+0x1a0>
 800343e:	4b31      	ldr	r3, [pc, #196]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	e00d      	b.n	8003460 <HAL_RCC_ClockConfig+0x1bc>
 8003444:	2302      	movs	r3, #2
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003450:	2302      	movs	r3, #2
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	4b29      	ldr	r3, [pc, #164]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	2202      	movs	r2, #2
 8003462:	61ba      	str	r2, [r7, #24]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	fa92 f2a2 	rbit	r2, r2
 800346a:	617a      	str	r2, [r7, #20]
  return result;
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	fab2 f282 	clz	r2, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f042 0220 	orr.w	r2, r2, #32
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	f002 021f 	and.w	r2, r2, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e079      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	491a      	ldr	r1, [pc, #104]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7fd fe80 	bl	80011a4 <HAL_GetTick>
 80034a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fd fe7c 	bl	80011a4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e061      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_RCC_ClockConfig+0x260>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d214      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	4906      	ldr	r1, [pc, #24]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e040      	b.n	8003582 <HAL_RCC_ClockConfig+0x2de>
 8003500:	40022000 	.word	0x40022000
 8003504:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_RCC_ClockConfig+0x2e8>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	491a      	ldr	r1, [pc, #104]	@ (800358c <HAL_RCC_ClockConfig+0x2e8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b16      	ldr	r3, [pc, #88]	@ (800358c <HAL_RCC_ClockConfig+0x2e8>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4912      	ldr	r1, [pc, #72]	@ (800358c <HAL_RCC_ClockConfig+0x2e8>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003546:	f000 f829 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800354a:	4601      	mov	r1, r0
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <HAL_RCC_ClockConfig+0x2e8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003554:	22f0      	movs	r2, #240	@ 0xf0
 8003556:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	fa92 f2a2 	rbit	r2, r2
 800355e:	60fa      	str	r2, [r7, #12]
  return result;
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	40d3      	lsrs	r3, r2
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <HAL_RCC_ClockConfig+0x2ec>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	fa21 f303 	lsr.w	r3, r1, r3
 8003572:	4a08      	ldr	r2, [pc, #32]	@ (8003594 <HAL_RCC_ClockConfig+0x2f0>)
 8003574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003576:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <HAL_RCC_ClockConfig+0x2f4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fdce 	bl	800111c <HAL_InitTick>
  
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3778      	adds	r7, #120	@ 0x78
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	08005874 	.word	0x08005874
 8003594:	20000004 	.word	0x20000004
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	b08b      	sub	sp, #44	@ 0x2c
 80035a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035b6:	4b29      	ldr	r3, [pc, #164]	@ (800365c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x30>
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x36>
 80035ca:	e03c      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035cc:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035ce:	623b      	str	r3, [r7, #32]
      break;
 80035d0:	e03c      	b.n	800364c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035d8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80035dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	fa92 f2a2 	rbit	r2, r2
 80035e4:	607a      	str	r2, [r7, #4]
  return result;
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	40d3      	lsrs	r3, r2
 80035f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035f6:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	220f      	movs	r2, #15
 8003600:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	fa92 f2a2 	rbit	r2, r2
 8003608:	60fa      	str	r2, [r7, #12]
  return result;
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	40d3      	lsrs	r3, r2
 8003614:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003624:	4a0e      	ldr	r2, [pc, #56]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	fbb2 f2f3 	udiv	r2, r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
 8003634:	e004      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a0c      	ldr	r2, [pc, #48]	@ (800366c <HAL_RCC_GetSysClockFreq+0xd0>)
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	623b      	str	r3, [r7, #32]
      break;
 8003644:	e002      	b.n	800364c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003648:	623b      	str	r3, [r7, #32]
      break;
 800364a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364c:	6a3b      	ldr	r3, [r7, #32]
}
 800364e:	4618      	mov	r0, r3
 8003650:	372c      	adds	r7, #44	@ 0x2c
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	007a1200 	.word	0x007a1200
 8003664:	0800588c 	.word	0x0800588c
 8003668:	0800589c 	.word	0x0800589c
 800366c:	003d0900 	.word	0x003d0900

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800368e:	f7ff ffef 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003692:	4601      	mov	r1, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800369c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	fa92 f2a2 	rbit	r2, r2
 80036a8:	603a      	str	r2, [r7, #0]
  return result;
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	fab2 f282 	clz	r2, r2
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	40d3      	lsrs	r3, r2
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	08005884 	.word	0x08005884

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036d2:	f7ff ffcd 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80036e0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80036e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	603a      	str	r2, [r7, #0]
  return result;
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	40d3      	lsrs	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	@ (800370c <HAL_RCC_GetPCLK2Freq+0x40>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	08005884 	.word	0x08005884

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b092      	sub	sp, #72	@ 0x48
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80cd 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4b86      	ldr	r3, [pc, #536]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10e      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b83      	ldr	r3, [pc, #524]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a82      	ldr	r2, [pc, #520]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
 800374c:	4b80      	ldr	r3, [pc, #512]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	4b7d      	ldr	r3, [pc, #500]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376a:	4b7a      	ldr	r3, [pc, #488]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a79      	ldr	r2, [pc, #484]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003774:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7fd fd15 	bl	80011a4 <HAL_GetTick>
 800377a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fd fd11 	bl	80011a4 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	@ 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0db      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b70      	ldr	r3, [pc, #448]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800379c:	4b6c      	ldr	r3, [pc, #432]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d07d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d076      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ba:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	461a      	mov	r2, r3
 80037e4:	2301      	movs	r3, #1
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	4b55      	ldr	r3, [pc, #340]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800380c:	4a50      	ldr	r2, [pc, #320]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800380e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003810:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d045      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd fcc2 	bl	80011a4 <HAL_GetTick>
 8003820:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	e00a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fd fcbe 	bl	80011a4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e086      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800383a:	2302      	movs	r3, #2
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
 8003846:	2302      	movs	r3, #2
 8003848:	623b      	str	r3, [r7, #32]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	61fb      	str	r3, [r7, #28]
  return result;
 8003852:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d102      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003868:	4b39      	ldr	r3, [pc, #228]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	e007      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800386e:	2302      	movs	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	4b35      	ldr	r3, [pc, #212]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	2202      	movs	r2, #2
 8003880:	613a      	str	r2, [r7, #16]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	fa92 f2a2 	rbit	r2, r2
 8003888:	60fa      	str	r2, [r7, #12]
  return result;
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	fab2 f282 	clz	r2, r2
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	f002 021f 	and.w	r2, r2, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f202 	lsl.w	r2, r1, r2
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0bd      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038a8:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4926      	ldr	r1, [pc, #152]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b23      	ldr	r3, [pc, #140]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a22      	ldr	r2, [pc, #136]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038da:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	491a      	ldr	r1, [pc, #104]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f8:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	f023 0210 	bic.w	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4912      	ldr	r1, [pc, #72]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003906:	4313      	orrs	r3, r2
 8003908:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003916:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	490b      	ldr	r1, [pc, #44]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003924:	4313      	orrs	r3, r2
 8003926:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4903      	ldr	r1, [pc, #12]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003942:	4313      	orrs	r3, r2
 8003944:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3748      	adds	r7, #72	@ 0x48
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	10908100 	.word	0x10908100

0800395c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e049      	b.n	8003a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fa32 	bl	8000dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 f94a 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0ff      	b.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b14      	cmp	r3, #20
 8003a36:	f200 80f0 	bhi.w	8003c1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	08003c1b 	.word	0x08003c1b
 8003a48:	08003c1b 	.word	0x08003c1b
 8003a4c:	08003c1b 	.word	0x08003c1b
 8003a50:	08003ad5 	.word	0x08003ad5
 8003a54:	08003c1b 	.word	0x08003c1b
 8003a58:	08003c1b 	.word	0x08003c1b
 8003a5c:	08003c1b 	.word	0x08003c1b
 8003a60:	08003b17 	.word	0x08003b17
 8003a64:	08003c1b 	.word	0x08003c1b
 8003a68:	08003c1b 	.word	0x08003c1b
 8003a6c:	08003c1b 	.word	0x08003c1b
 8003a70:	08003b57 	.word	0x08003b57
 8003a74:	08003c1b 	.word	0x08003c1b
 8003a78:	08003c1b 	.word	0x08003c1b
 8003a7c:	08003c1b 	.word	0x08003c1b
 8003a80:	08003b99 	.word	0x08003b99
 8003a84:	08003c1b 	.word	0x08003c1b
 8003a88:	08003c1b 	.word	0x08003c1b
 8003a8c:	08003c1b 	.word	0x08003c1b
 8003a90:	08003bd9 	.word	0x08003bd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f942 	bl	8003d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0208 	orr.w	r2, r2, #8
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	619a      	str	r2, [r3, #24]
      break;
 8003ad2:	e0a5      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f9a8 	bl	8003e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	021a      	lsls	r2, r3, #8
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	619a      	str	r2, [r3, #24]
      break;
 8003b14:	e084      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fa07 	bl	8003f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0208 	orr.w	r2, r2, #8
 8003b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0204 	bic.w	r2, r2, #4
 8003b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	61da      	str	r2, [r3, #28]
      break;
 8003b54:	e064      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa65 	bl	800402c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	021a      	lsls	r2, r3, #8
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	61da      	str	r2, [r3, #28]
      break;
 8003b96:	e043      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faa8 	bl	80040f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bd6:	e023      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fae6 	bl	80041b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c18:	e002      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop

08003c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a32      	ldr	r2, [pc, #200]	@ (8003d10 <TIM_Base_SetConfig+0xdc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0x28>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0x28>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a2f      	ldr	r2, [pc, #188]	@ (8003d14 <TIM_Base_SetConfig+0xe0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a27      	ldr	r2, [pc, #156]	@ (8003d10 <TIM_Base_SetConfig+0xdc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <TIM_Base_SetConfig+0x6a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7c:	d00f      	beq.n	8003c9e <TIM_Base_SetConfig+0x6a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a24      	ldr	r2, [pc, #144]	@ (8003d14 <TIM_Base_SetConfig+0xe0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0x6a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a23      	ldr	r2, [pc, #140]	@ (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0x6a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <TIM_Base_SetConfig+0xe8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0x6a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a21      	ldr	r2, [pc, #132]	@ (8003d20 <TIM_Base_SetConfig+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003d10 <TIM_Base_SetConfig+0xdc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d1c <TIM_Base_SetConfig+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0c      	ldr	r2, [pc, #48]	@ (8003d20 <TIM_Base_SetConfig+0xec>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d103      	bne.n	8003cfc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	615a      	str	r2, [r3, #20]
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0302 	bic.w	r3, r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	@ (8003e20 <TIM_OC1_SetConfig+0xfc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <TIM_OC1_SetConfig+0x78>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <TIM_OC1_SetConfig+0x100>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_OC1_SetConfig+0x78>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	@ (8003e28 <TIM_OC1_SetConfig+0x104>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC1_SetConfig+0x78>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a25      	ldr	r2, [pc, #148]	@ (8003e2c <TIM_OC1_SetConfig+0x108>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10c      	bne.n	8003db6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <TIM_OC1_SetConfig+0xfc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_OC1_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <TIM_OC1_SetConfig+0x100>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_OC1_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a17      	ldr	r2, [pc, #92]	@ (8003e28 <TIM_OC1_SetConfig+0x104>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC1_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a16      	ldr	r2, [pc, #88]	@ (8003e2c <TIM_OC1_SetConfig+0x108>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800

08003e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0210 	bic.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0320 	bic.w	r3, r3, #32
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <TIM_OC2_SetConfig+0xf0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <TIM_OC2_SetConfig+0xf0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xa0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <TIM_OC2_SetConfig+0xf4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xa0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <TIM_OC2_SetConfig+0xf8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xa0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <TIM_OC2_SetConfig+0xfc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d113      	bne.n	8003ef8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ed6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ede:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800

08003f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a23      	ldr	r2, [pc, #140]	@ (800401c <TIM_OC3_SetConfig+0xec>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10d      	bne.n	8003fae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800401c <TIM_OC3_SetConfig+0xec>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <TIM_OC3_SetConfig+0x9e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <TIM_OC3_SetConfig+0xf0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <TIM_OC3_SetConfig+0x9e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <TIM_OC3_SetConfig+0xf4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <TIM_OC3_SetConfig+0x9e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <TIM_OC3_SetConfig+0xf8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d113      	bne.n	8003ff6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800

0800402c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800407a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	031b      	lsls	r3, r3, #12
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a16      	ldr	r2, [pc, #88]	@ (80040e4 <TIM_OC4_SetConfig+0xb8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <TIM_OC4_SetConfig+0x7c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <TIM_OC4_SetConfig+0xbc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <TIM_OC4_SetConfig+0x7c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a14      	ldr	r2, [pc, #80]	@ (80040ec <TIM_OC4_SetConfig+0xc0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC4_SetConfig+0x7c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <TIM_OC4_SetConfig+0xc4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800

080040f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <TIM_OC5_SetConfig+0xac>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_OC5_SetConfig+0x72>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <TIM_OC5_SetConfig+0xb0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_OC5_SetConfig+0x72>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <TIM_OC5_SetConfig+0xb4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC5_SetConfig+0x72>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <TIM_OC5_SetConfig+0xb8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d109      	bne.n	800417a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800

080041b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <TIM_OC6_SetConfig+0xb0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00b      	beq.n	8004224 <TIM_OC6_SetConfig+0x74>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <TIM_OC6_SetConfig+0xb4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_OC6_SetConfig+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <TIM_OC6_SetConfig+0xb8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC6_SetConfig+0x74>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a13      	ldr	r2, [pc, #76]	@ (800426c <TIM_OC6_SetConfig+0xbc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d109      	bne.n	8004238 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800422a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004284:	2302      	movs	r3, #2
 8004286:	e054      	b.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a17      	ldr	r2, [pc, #92]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a13      	ldr	r2, [pc, #76]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800430c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4313      	orrs	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40014000 	.word	0x40014000

0800434c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004364:	2302      	movs	r3, #2
 8004366:	e060      	b.n	800442a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a14      	ldr	r2, [pc, #80]	@ (8004438 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d115      	bne.n	8004418 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	051b      	lsls	r3, r3, #20
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00

0800443c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e040      	b.n	80044d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fd1c 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	@ 0x24
 8004468:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fbfc 	bl	8004c78 <UART_SetConfig>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e022      	b.n	80044d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fd26 	bl	8004ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fdad 	bl	8005028 <UART_CheckIdleState>
 80044ce:	4603      	mov	r3, r0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d165      	bne.n	80045ba <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_UART_Transmit_DMA+0x22>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e05e      	b.n	80045bc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	@ 0x21
 8004520:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	2b00      	cmp	r3, #0
 8004528:	d027      	beq.n	800457a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	4a25      	ldr	r2, [pc, #148]	@ (80045c4 <HAL_UART_Transmit_DMA+0xec>)
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	4a24      	ldr	r2, [pc, #144]	@ (80045c8 <HAL_UART_Transmit_DMA+0xf0>)
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	4a23      	ldr	r2, [pc, #140]	@ (80045cc <HAL_UART_Transmit_DMA+0xf4>)
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	2200      	movs	r2, #0
 8004548:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004552:	4619      	mov	r1, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3328      	adds	r3, #40	@ 0x28
 800455a:	461a      	mov	r2, r3
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	f7fd faf7 	bl	8001b50 <HAL_DMA_Start_IT>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2210      	movs	r2, #16
 800456c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e020      	b.n	80045bc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2240      	movs	r2, #64	@ 0x40
 8004580:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	613b      	str	r3, [r7, #16]
   return(result);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3308      	adds	r3, #8
 80045a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a2:	623a      	str	r2, [r7, #32]
 80045a4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	69f9      	ldr	r1, [r7, #28]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	@ 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	0800549d 	.word	0x0800549d
 80045c8:	08005531 	.word	0x08005531
 80045cc:	080056b1 	.word	0x080056b1

080045d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	@ 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d132      	bne.n	800464e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_UART_Receive_DMA+0x24>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e02b      	b.n	8004650 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d018      	beq.n	800463e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	613b      	str	r3, [r7, #16]
   return(result);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	69f9      	ldr	r1, [r7, #28]
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	61bb      	str	r3, [r7, #24]
   return(result);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	461a      	mov	r2, r3
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fdff 	bl	8005248 <UART_Start_Receive_DMA>
 800464a:	4603      	mov	r3, r0
 800464c:	e000      	b.n	8004650 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	@ 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b0ba      	sub	sp, #232	@ 0xe8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800467e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004682:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004686:	4013      	ands	r3, r2
 8004688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800468c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d115      	bne.n	80046c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00f      	beq.n	80046c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 82ab 	beq.w	8004c0c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
      }
      return;
 80046be:	e2a5      	b.n	8004c0c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8117 	beq.w	80048f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046da:	4b85      	ldr	r3, [pc, #532]	@ (80048f0 <HAL_UART_IRQHandler+0x298>)
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 810a 	beq.w	80048f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d011      	beq.n	8004714 <HAL_UART_IRQHandler+0xbc>
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d011      	beq.n	8004744 <HAL_UART_IRQHandler+0xec>
 8004720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2202      	movs	r2, #2
 8004732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473a:	f043 0204 	orr.w	r2, r3, #4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <HAL_UART_IRQHandler+0x11c>
 8004750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2204      	movs	r2, #4
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476a:	f043 0202 	orr.w	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d017      	beq.n	80047b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800478c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004790:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2208      	movs	r2, #8
 800479e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a6:	f043 0208 	orr.w	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <HAL_UART_IRQHandler+0x18a>
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8211 	beq.w	8004c10 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800481c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482a:	2b40      	cmp	r3, #64	@ 0x40
 800482c:	d005      	beq.n	800483a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800482e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004832:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004836:	2b00      	cmp	r3, #0
 8004838:	d04f      	beq.n	80048da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fdca 	bl	80053d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d141      	bne.n	80048d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3308      	adds	r3, #8
 8004854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3308      	adds	r3, #8
 8004876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800487a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800487e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1d9      	bne.n	800484e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a6:	4a13      	ldr	r2, [pc, #76]	@ (80048f4 <HAL_UART_IRQHandler+0x29c>)
 80048a8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd f9e6 	bl	8001c80 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00f      	b.n	80048ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9be 	bl	8004c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00b      	b.n	80048ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9ba 	bl	8004c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e007      	b.n	80048ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9b6 	bl	8004c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048e8:	e192      	b.n	8004c10 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ea:	bf00      	nop
    return;
 80048ec:	e190      	b.n	8004c10 <HAL_UART_IRQHandler+0x5b8>
 80048ee:	bf00      	nop
 80048f0:	04000120 	.word	0x04000120
 80048f4:	0800572f 	.word	0x0800572f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f040 814b 	bne.w	8004b98 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8144 	beq.w	8004b98 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 813d 	beq.w	8004b98 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2210      	movs	r2, #16
 8004924:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	f040 80b5 	bne.w	8004aa0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004942:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8164 	beq.w	8004c14 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004956:	429a      	cmp	r2, r3
 8004958:	f080 815c 	bcs.w	8004c14 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004962:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b20      	cmp	r3, #32
 800496e:	f000 8086 	beq.w	8004a7e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004986:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800498a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800498e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800499c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049a0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1da      	bne.n	8004972 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e1      	bne.n	80049bc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e3      	bne.n	80049f8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4e:	f023 0310 	bic.w	r3, r3, #16
 8004a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e4      	bne.n	8004a3e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd f8c8 	bl	8001c0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8e1 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a9e:	e0b9      	b.n	8004c14 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80ab 	beq.w	8004c18 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004ac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80a6 	beq.w	8004c18 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e4      	bne.n	8004acc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	623b      	str	r3, [r7, #32]
   return(result);
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b26:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e3      	bne.n	8004b02 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0310 	bic.w	r3, r3, #16
 8004b62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e4      	bne.n	8004b4e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f865 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b96:	e03f      	b.n	8004c18 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x56a>
 8004ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fdf7 	bl	80057ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bc0:	e02d      	b.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01c      	beq.n	8004c1c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
    }
    return;
 8004bea:	e017      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d012      	beq.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fda8 	bl	800575a <UART_EndTransmit_IT>
    return;
 8004c0a:	e008      	b.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c0c:	bf00      	nop
 8004c0e:	e006      	b.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c10:	bf00      	nop
 8004c12:	e004      	b.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c14:	bf00      	nop
 8004c16:	e002      	b.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c18:	bf00      	nop
 8004c1a:	e000      	b.n	8004c1e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c1c:	bf00      	nop
  }

}
 8004c1e:	37e8      	adds	r7, #232	@ 0xe8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b8a      	ldr	r3, [pc, #552]	@ (8004ecc <UART_SetConfig+0x254>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6979      	ldr	r1, [r7, #20]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a78      	ldr	r2, [pc, #480]	@ (8004ed0 <UART_SetConfig+0x258>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d120      	bne.n	8004d36 <UART_SetConfig+0xbe>
 8004cf4:	4b77      	ldr	r3, [pc, #476]	@ (8004ed4 <UART_SetConfig+0x25c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d817      	bhi.n	8004d30 <UART_SetConfig+0xb8>
 8004d00:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <UART_SetConfig+0x90>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d2b 	.word	0x08004d2b
 8004d14:	08004d1f 	.word	0x08004d1f
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e01d      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e01a      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d24:	2304      	movs	r3, #4
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e017      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e014      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d30:	2310      	movs	r3, #16
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e011      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a67      	ldr	r2, [pc, #412]	@ (8004ed8 <UART_SetConfig+0x260>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d102      	bne.n	8004d46 <UART_SetConfig+0xce>
 8004d40:	2300      	movs	r3, #0
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e009      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a64      	ldr	r2, [pc, #400]	@ (8004edc <UART_SetConfig+0x264>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d102      	bne.n	8004d56 <UART_SetConfig+0xde>
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e001      	b.n	8004d5a <UART_SetConfig+0xe2>
 8004d56:	2310      	movs	r3, #16
 8004d58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d62:	d15a      	bne.n	8004e1a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004d64:	7ffb      	ldrb	r3, [r7, #31]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d827      	bhi.n	8004dba <UART_SetConfig+0x142>
 8004d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d70 <UART_SetConfig+0xf8>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004dbb 	.word	0x08004dbb
 8004d80:	08004dab 	.word	0x08004dab
 8004d84:	08004dbb 	.word	0x08004dbb
 8004d88:	08004dbb 	.word	0x08004dbb
 8004d8c:	08004dbb 	.word	0x08004dbb
 8004d90:	08004db3 	.word	0x08004db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d94:	f7fe fc78 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004d98:	61b8      	str	r0, [r7, #24]
        break;
 8004d9a:	e013      	b.n	8004dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d9c:	f7fe fc96 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8004da0:	61b8      	str	r0, [r7, #24]
        break;
 8004da2:	e00f      	b.n	8004dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da4:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee0 <UART_SetConfig+0x268>)
 8004da6:	61bb      	str	r3, [r7, #24]
        break;
 8004da8:	e00c      	b.n	8004dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004daa:	f7fe fbf7 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004dae:	61b8      	str	r0, [r7, #24]
        break;
 8004db0:	e008      	b.n	8004dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db6:	61bb      	str	r3, [r7, #24]
        break;
 8004db8:	e004      	b.n	8004dc4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8004dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d074      	beq.n	8004eb4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	005a      	lsls	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d916      	bls.n	8004e14 <UART_SetConfig+0x19c>
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dec:	d212      	bcs.n	8004e14 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f023 030f 	bic.w	r3, r3, #15
 8004df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	89fa      	ldrh	r2, [r7, #14]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e04f      	b.n	8004eb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77bb      	strb	r3, [r7, #30]
 8004e18:	e04c      	b.n	8004eb4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e1a:	7ffb      	ldrb	r3, [r7, #31]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d828      	bhi.n	8004e72 <UART_SetConfig+0x1fa>
 8004e20:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <UART_SetConfig+0x1b0>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	08004e73 	.word	0x08004e73
 8004e38:	08004e63 	.word	0x08004e63
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004e73 	.word	0x08004e73
 8004e44:	08004e73 	.word	0x08004e73
 8004e48:	08004e6b 	.word	0x08004e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fe fc1c 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004e50:	61b8      	str	r0, [r7, #24]
        break;
 8004e52:	e013      	b.n	8004e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fe fc3a 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8004e58:	61b8      	str	r0, [r7, #24]
        break;
 8004e5a:	e00f      	b.n	8004e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ee0 <UART_SetConfig+0x268>)
 8004e5e:	61bb      	str	r3, [r7, #24]
        break;
 8004e60:	e00c      	b.n	8004e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e62:	f7fe fb9b 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004e66:	61b8      	str	r0, [r7, #24]
        break;
 8004e68:	e008      	b.n	8004e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e6e:	61bb      	str	r3, [r7, #24]
        break;
 8004e70:	e004      	b.n	8004e7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	77bb      	strb	r3, [r7, #30]
        break;
 8004e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085a      	lsrs	r2, r3, #1
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d909      	bls.n	8004eb0 <UART_SetConfig+0x238>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea2:	d205      	bcs.n	8004eb0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e001      	b.n	8004eb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	efff69f3 	.word	0xefff69f3
 8004ed0:	40013800 	.word	0x40013800
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40004400 	.word	0x40004400
 8004edc:	40004800 	.word	0x40004800
 8004ee0:	007a1200 	.word	0x007a1200

08004ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe2:	d10a      	bne.n	8004ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b098      	sub	sp, #96	@ 0x60
 800502c:	af02      	add	r7, sp, #8
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005038:	f7fc f8b4 	bl	80011a4 <HAL_GetTick>
 800503c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b08      	cmp	r3, #8
 800504a:	d12e      	bne.n	80050aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800504c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005054:	2200      	movs	r2, #0
 8005056:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f88c 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d021      	beq.n	80050aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507a:	653b      	str	r3, [r7, #80]	@ 0x50
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005084:	647b      	str	r3, [r7, #68]	@ 0x44
 8005086:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800508a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e6      	bne.n	8005066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e062      	b.n	8005170 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d149      	bne.n	800514c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f856 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03c      	beq.n	800514c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	623b      	str	r3, [r7, #32]
   return(result);
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60fb      	str	r3, [r7, #12]
   return(result);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005124:	61fa      	str	r2, [r7, #28]
 8005126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	69b9      	ldr	r1, [r7, #24]
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	617b      	str	r3, [r7, #20]
   return(result);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e011      	b.n	8005170 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3758      	adds	r7, #88	@ 0x58
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005188:	e049      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005190:	d045      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fc f807 	bl	80011a4 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e048      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d031      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d110      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2208      	movs	r2, #8
 80051ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f8ff 	bl	80053d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2208      	movs	r2, #8
 80051da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e029      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f8:	d111      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f8e5 	bl	80053d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e00f      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	bf0c      	ite	eq
 800522e:	2301      	moveq	r3, #1
 8005230:	2300      	movne	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	429a      	cmp	r2, r3
 800523a:	d0a6      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b096      	sub	sp, #88	@ 0x58
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2222      	movs	r2, #34	@ 0x22
 8005270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005278:	2b00      	cmp	r3, #0
 800527a:	d028      	beq.n	80052ce <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005280:	4a3e      	ldr	r2, [pc, #248]	@ (800537c <UART_Start_Receive_DMA+0x134>)
 8005282:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005288:	4a3d      	ldr	r2, [pc, #244]	@ (8005380 <UART_Start_Receive_DMA+0x138>)
 800528a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005290:	4a3c      	ldr	r2, [pc, #240]	@ (8005384 <UART_Start_Receive_DMA+0x13c>)
 8005292:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005298:	2200      	movs	r2, #0
 800529a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3324      	adds	r3, #36	@ 0x24
 80052a6:	4619      	mov	r1, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	461a      	mov	r2, r3
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	f7fc fc4e 	bl	8001b50 <HAL_DMA_Start_IT>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2210      	movs	r2, #16
 80052be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e051      	b.n	8005372 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d018      	beq.n	8005308 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005328:	637a      	str	r2, [r7, #52]	@ 0x34
 800532a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800532e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800535c:	623a      	str	r2, [r7, #32]
 800535e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	61bb      	str	r3, [r7, #24]
   return(result);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3758      	adds	r7, #88	@ 0x58
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	0800554d 	.word	0x0800554d
 8005380:	08005673 	.word	0x08005673
 8005384:	080056b1 	.word	0x080056b1

08005388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	@ 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	60bb      	str	r3, [r7, #8]
   return(result);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	613b      	str	r3, [r7, #16]
   return(result);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80053c8:	bf00      	nop
 80053ca:	3724      	adds	r7, #36	@ 0x24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b095      	sub	sp, #84	@ 0x54
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80053fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e6      	bne.n	80053dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	61fb      	str	r3, [r7, #28]
   return(result);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005446:	2b01      	cmp	r3, #1
 8005448:	d118      	bne.n	800547c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	60bb      	str	r3, [r7, #8]
   return(result);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f023 0310 	bic.w	r3, r3, #16
 800545e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6979      	ldr	r1, [r7, #20]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	613b      	str	r3, [r7, #16]
   return(result);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e6      	bne.n	800544a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005490:	bf00      	nop
 8005492:	3754      	adds	r7, #84	@ 0x54
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b090      	sub	sp, #64	@ 0x40
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d037      	beq.n	8005522 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80054b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	623b      	str	r3, [r7, #32]
   return(result);
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054da:	633a      	str	r2, [r7, #48]	@ 0x30
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
 8005504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	617b      	str	r3, [r7, #20]
   return(result);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005520:	e002      	b.n	8005528 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005522:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005524:	f7fb f89e 	bl	8000664 <HAL_UART_TxCpltCallback>
}
 8005528:	bf00      	nop
 800552a:	3740      	adds	r7, #64	@ 0x40
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff fb70 	bl	8004c24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b09c      	sub	sp, #112	@ 0x70
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b20      	cmp	r3, #32
 8005560:	d071      	beq.n	8005646 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005564:	2200      	movs	r2, #0
 8005566:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800557e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800558a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800558e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80055b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80055be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	623b      	str	r3, [r7, #32]
   return(result);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e5      	bne.n	80055d0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800560e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d118      	bne.n	8005646 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60fb      	str	r3, [r7, #12]
   return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800562a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	617b      	str	r3, [r7, #20]
   return(result);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005648:	2200      	movs	r2, #0
 800564a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800564e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005650:	2b01      	cmp	r3, #1
 8005652:	d107      	bne.n	8005664 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005656:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800565a:	4619      	mov	r1, r3
 800565c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800565e:	f7ff faff 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005662:	e002      	b.n	800566a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005664:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005666:	f7fb f80d 	bl	8000684 <HAL_UART_RxCpltCallback>
}
 800566a:	bf00      	nop
 800566c:	3770      	adds	r7, #112	@ 0x70
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568a:	2b01      	cmp	r3, #1
 800568c:	d109      	bne.n	80056a2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	4619      	mov	r1, r3
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff fae0 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056a0:	e002      	b.n	80056a8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff fac8 	bl	8004c38 <HAL_UART_RxHalfCpltCallback>
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b80      	cmp	r3, #128	@ 0x80
 80056d8:	d109      	bne.n	80056ee <UART_DMAError+0x3e>
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b21      	cmp	r3, #33	@ 0x21
 80056de:	d106      	bne.n	80056ee <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80056e8:	6978      	ldr	r0, [r7, #20]
 80056ea:	f7ff fe4d 	bl	8005388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f8:	2b40      	cmp	r3, #64	@ 0x40
 80056fa:	d109      	bne.n	8005710 <UART_DMAError+0x60>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b22      	cmp	r3, #34	@ 0x22
 8005700:	d106      	bne.n	8005710 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7ff fe62 	bl	80053d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005716:	f043 0210 	orr.w	r2, r3, #16
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005720:	6978      	ldr	r0, [r7, #20]
 8005722:	f7ff fa93 	bl	8004c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005726:	bf00      	nop
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fa7d 	bl	8004c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b088      	sub	sp, #32
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	613b      	str	r3, [r7, #16]
   return(result);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e6      	bne.n	8005762 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fa ff5f 	bl	8000664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a6:	bf00      	nop
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <memset>:
 80057c2:	4402      	add	r2, r0
 80057c4:	4603      	mov	r3, r0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d100      	bne.n	80057cc <memset+0xa>
 80057ca:	4770      	bx	lr
 80057cc:	f803 1b01 	strb.w	r1, [r3], #1
 80057d0:	e7f9      	b.n	80057c6 <memset+0x4>
	...

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	@ (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005818 <__libc_init_array+0x44>)
 80057e8:	f000 f826 	bl	8005838 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	080058ac 	.word	0x080058ac
 8005810:	080058ac 	.word	0x080058ac
 8005814:	080058ac 	.word	0x080058ac
 8005818:	080058b0 	.word	0x080058b0

0800581c <memcpy>:
 800581c:	440a      	add	r2, r1
 800581e:	4291      	cmp	r1, r2
 8005820:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005824:	d100      	bne.n	8005828 <memcpy+0xc>
 8005826:	4770      	bx	lr
 8005828:	b510      	push	{r4, lr}
 800582a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005832:	4291      	cmp	r1, r2
 8005834:	d1f9      	bne.n	800582a <memcpy+0xe>
 8005836:	bd10      	pop	{r4, pc}

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
