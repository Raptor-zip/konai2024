
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052bc  080052bc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080052bc  080052bc  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052bc  080052bc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052bc  080052bc  000062bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c0  080052c0  000062c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  080052d0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080052d0  00007284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011885  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d6  00000000  00000000  000188c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b75  00000000  00000000  0001bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002154  00000000  00000000  0001c7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118fe  00000000  00000000  0001e909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a766c  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000d78b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000db688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005248 	.word	0x08005248

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005248 	.word	0x08005248

080001c8 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2200      	movs	r2, #0
 80001e0:	639a      	str	r2, [r3, #56]	@ 0x38
	ecan->filter.FilterIdLow = 0;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2200      	movs	r2, #0
 80001e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2200      	movs	r2, #0
 80001ec:	641a      	str	r2, [r3, #64]	@ 0x40
	ecan->filter.FilterMaskIdLow = 0;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	2200      	movs	r2, #0
 80001f2:	645a      	str	r2, [r3, #68]	@ 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	649a      	str	r2, [r3, #72]	@ 0x48

	if (can_nuumber == 1)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d103      	bne.n	8000208 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000206:	e002      	b.n	800020e <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	220e      	movs	r2, #14
 800020c:	64da      	str	r2, [r3, #76]	@ 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2200      	movs	r2, #0
 8000212:	651a      	str	r2, [r3, #80]	@ 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2201      	movs	r2, #1
 8000218:	655a      	str	r2, [r3, #84]	@ 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2201      	movs	r2, #1
 800021e:	659a      	str	r2, [r3, #88]	@ 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	220e      	movs	r2, #14
 8000224:	65da      	str	r2, [r3, #92]	@ 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3338      	adds	r3, #56	@ 0x38
 800022e:	4619      	mov	r1, r3
 8000230:	4610      	mov	r0, r2
 8000232:	f000 fdea 	bl	8000e0a <HAL_CAN_ConfigFilter>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <Easy_CAN6_Start+0x78>
		Error_Handler();
 800023c:	f000 fa70 	bl	8000720 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f000 feed 	bl	8001026 <HAL_CAN_ActivateNotification>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 8000252:	f000 fa65 	bl	8000720 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fe9f 	bl	8000f9e <HAL_CAN_Start>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 8000266:	f001 f820 	bl	80012aa <HAL_NVIC_SystemReset>

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <HAL_UART_TxCpltCallback>:
  CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
  CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  huart2.gState = HAL_UART_STATE_READY;
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <HAL_UART_TxCpltCallback+0x1c>)
 800027e:	2220      	movs	r2, #32
 8000280:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	2000009c 	.word	0x2000009c

08000294 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  flagRcved = TRUE; /* 受信完�?フラグ設�? */
 800029c:	4b04      	ldr	r3, [pc, #16]	@ (80002b0 <HAL_UART_RxCpltCallback+0x1c>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000214 	.word	0x20000214

080002b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fc21 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f86f 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f9e3 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 80002c6:	f000 f9bb 	bl	8000640 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002ca:	f000 f989 	bl	80005e0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002ce:	f000 f8c1 	bl	8000454 <MX_CAN_Init>
  MX_TIM1_Init();
 80002d2:	f000 f8f5 	bl	80004c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Easy_CAN6_Start(&ecan, &hcan, 2);
 80002d6:	2202      	movs	r2, #2
 80002d8:	4928      	ldr	r1, [pc, #160]	@ (800037c <main+0xc8>)
 80002da:	4829      	ldr	r0, [pc, #164]	@ (8000380 <main+0xcc>)
 80002dc:	f7ff ff74 	bl	80001c8 <Easy_CAN6_Start>
//  }
//  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Type any key.\r\n", 14);
//  while (huart2.gState != HAL_UART_STATE_READY)
//  {
//  }
  HAL_UART_Transmit_DMA(&huart2,
 80002e0:	2221      	movs	r2, #33	@ 0x21
 80002e2:	4928      	ldr	r1, [pc, #160]	@ (8000384 <main+0xd0>)
 80002e4:	4828      	ldr	r0, [pc, #160]	@ (8000388 <main+0xd4>)
 80002e6:	f003 fd3f 	bl	8003d68 <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 80002ea:	2108      	movs	r1, #8
 80002ec:	4827      	ldr	r0, [pc, #156]	@ (800038c <main+0xd8>)
 80002ee:	f001 fb85 	bl	80019fc <HAL_GPIO_TogglePin>

    do
    {
      /* 受信割り込み開�? */
      HAL_UART_Receive_IT(&huart2, rcvBuffer, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	4926      	ldr	r1, [pc, #152]	@ (8000390 <main+0xdc>)
 80002f6:	4824      	ldr	r0, [pc, #144]	@ (8000388 <main+0xd4>)
 80002f8:	f003 fcf2 	bl	8003ce0 <HAL_UART_Receive_IT>

      /* 受信割り込み終�?�?ち */
      while (flagRcved == FALSE)
 80002fc:	bf00      	nop
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <main+0xe0>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0fb      	beq.n	80002fe <main+0x4a>
      {
        ;
      }

      sndBuffer[rcvLength] = rcvBuffer[0];
 8000306:	4b24      	ldr	r3, [pc, #144]	@ (8000398 <main+0xe4>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	4b20      	ldr	r3, [pc, #128]	@ (8000390 <main+0xdc>)
 800030e:	7819      	ldrb	r1, [r3, #0]
 8000310:	4b22      	ldr	r3, [pc, #136]	@ (800039c <main+0xe8>)
 8000312:	5499      	strb	r1, [r3, r2]
      rcvLength++;
 8000314:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <main+0xe4>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	b29a      	uxth	r2, r3
 800031c:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <main+0xe4>)
 800031e:	801a      	strh	r2, [r3, #0]
      flagRcved = FALSE;
 8000320:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <main+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
    } while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 8000326:	4b1a      	ldr	r3, [pc, #104]	@ (8000390 <main+0xdc>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b0d      	cmp	r3, #13
 800032c:	d003      	beq.n	8000336 <main+0x82>
 800032e:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <main+0xe4>)
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	2b63      	cmp	r3, #99	@ 0x63
 8000334:	d9dd      	bls.n	80002f2 <main+0x3e>

        // 受信したデータから\rを削除する
    for (int i = 0; i < rcvLength; i++) {
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e012      	b.n	8000362 <main+0xae>
        if (sndBuffer[i] == CHAR_CR) {
 800033c:	4a17      	ldr	r2, [pc, #92]	@ (800039c <main+0xe8>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b0d      	cmp	r3, #13
 8000346:	d109      	bne.n	800035c <main+0xa8>
            sndBuffer[i] = '\0'; // \rをヌル文字で置き換える
 8000348:	4a14      	ldr	r2, [pc, #80]	@ (800039c <main+0xe8>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
            rcvLength = i; // 新しい長さを設定
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	b29a      	uxth	r2, r3
 8000356:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <main+0xe4>)
 8000358:	801a      	strh	r2, [r3, #0]
            break;
 800035a:	e008      	b.n	800036e <main+0xba>
    for (int i = 0; i < rcvLength; i++) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <main+0xe4>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	461a      	mov	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4293      	cmp	r3, r2
 800036c:	dbe6      	blt.n	800033c <main+0x88>
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

    rcvLength = 0;
 800036e:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <main+0xe4>)
 8000370:	2200      	movs	r2, #0
 8000372:	801a      	strh	r2, [r3, #0]
    //		char send_str[byte_number];
    //		sprintf(send_str, "%d\n", _temp); // _tempを文字�???��?��に変換して改行コードを追??��?��?
    //
    //		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) send_str, strlen(send_str));
    //
    HAL_Delay(1);
 8000374:	2001      	movs	r0, #1
 8000376:	f000 fc29 	bl	8000bcc <HAL_Delay>
    HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 800037a:	e7b6      	b.n	80002ea <main+0x36>
 800037c:	20000028 	.word	0x20000028
 8000380:	200001ac 	.word	0x200001ac
 8000384:	08005260 	.word	0x08005260
 8000388:	2000009c 	.word	0x2000009c
 800038c:	48000400 	.word	0x48000400
 8000390:	20000218 	.word	0x20000218
 8000394:	20000214 	.word	0x20000214
 8000398:	20000216 	.word	0x20000216
 800039c:	2000021c 	.word	0x2000021c

080003a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b096      	sub	sp, #88	@ 0x58
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003aa:	2228      	movs	r2, #40	@ 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f004 ff1d 	bl	80051ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]
 80003d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d4:	2302      	movs	r3, #2
 80003d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003dc:	2310      	movs	r3, #16
 80003de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2302      	movs	r3, #2
 80003e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e4:	2300      	movs	r3, #0
 80003e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80003e8:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80003ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fb1c 	bl	8001a30 <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003fe:	f000 f98f 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000402:	230f      	movs	r3, #15
 8000404:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000406:	2302      	movs	r3, #2
 8000408:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000418:	f107 031c 	add.w	r3, r7, #28
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fb44 	bl	8002aac <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800042a:	f000 f979 	bl	8000720 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800042e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000432:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fd6c 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000446:	f000 f96b 	bl	8000720 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3758      	adds	r7, #88	@ 0x58
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000458:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <MX_CAN_Init+0x64>)
 800045a:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <MX_CAN_Init+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800045e:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <MX_CAN_Init+0x64>)
 8000460:	2202      	movs	r2, #2
 8000462:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <MX_CAN_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <MX_CAN_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_CAN_Init+0x64>)
 8000472:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000476:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000478:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_CAN_Init+0x64>)
 800047a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800047e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <MX_CAN_Init+0x64>)
 8000482:	2200      	movs	r2, #0
 8000484:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <MX_CAN_Init+0x64>)
 8000488:	2200      	movs	r2, #0
 800048a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <MX_CAN_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000492:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <MX_CAN_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000498:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <MX_CAN_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <MX_CAN_Init+0x64>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004a4:	4804      	ldr	r0, [pc, #16]	@ (80004b8 <MX_CAN_Init+0x64>)
 80004a6:	f000 fbb5 	bl	8000c14 <HAL_CAN_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004b0:	f000 f936 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40006400 	.word	0x40006400

080004c0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	@ 0x58
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	222c      	movs	r2, #44	@ 0x2c
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f004 fe7e 	bl	80051ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f2:	4b39      	ldr	r3, [pc, #228]	@ (80005d8 <MX_TIM1_Init+0x118>)
 80004f4:	4a39      	ldr	r2, [pc, #228]	@ (80005dc <MX_TIM1_Init+0x11c>)
 80004f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004f8:	4b37      	ldr	r3, [pc, #220]	@ (80005d8 <MX_TIM1_Init+0x118>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b36      	ldr	r3, [pc, #216]	@ (80005d8 <MX_TIM1_Init+0x118>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000504:	4b34      	ldr	r3, [pc, #208]	@ (80005d8 <MX_TIM1_Init+0x118>)
 8000506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800050a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050c:	4b32      	ldr	r3, [pc, #200]	@ (80005d8 <MX_TIM1_Init+0x118>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000512:	4b31      	ldr	r3, [pc, #196]	@ (80005d8 <MX_TIM1_Init+0x118>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b2f      	ldr	r3, [pc, #188]	@ (80005d8 <MX_TIM1_Init+0x118>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800051e:	482e      	ldr	r0, [pc, #184]	@ (80005d8 <MX_TIM1_Init+0x118>)
 8000520:	f002 fe20 	bl	8003164 <HAL_TIM_PWM_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f000 f8f9 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800053a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800053e:	4619      	mov	r1, r3
 8000540:	4825      	ldr	r0, [pc, #148]	@ (80005d8 <MX_TIM1_Init+0x118>)
 8000542:	f003 fa99 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800054c:	f000 f8e8 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000550:	2360      	movs	r3, #96	@ 0x60
 8000552:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000558:	2300      	movs	r3, #0
 800055a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	4818      	ldr	r0, [pc, #96]	@ (80005d8 <MX_TIM1_Init+0x118>)
 8000576:	f002 fe4d 	bl	8003214 <HAL_TIM_PWM_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000580:	f000 f8ce 	bl	8000720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800059c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <MX_TIM1_Init+0x118>)
 80005ba:	f003 facb 	bl	8003b54 <HAL_TIMEx_ConfigBreakDeadTime>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80005c4:	f000 f8ac 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_TIM1_Init+0x118>)
 80005ca:	f000 f937 	bl	800083c <HAL_TIM_MspPostInit>
}
 80005ce:	bf00      	nop
 80005d0:	3758      	adds	r7, #88	@ 0x58
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000050 	.word	0x20000050
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 80005e6:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 80005ec:	4a13      	ldr	r2, [pc, #76]	@ (800063c <MX_USART2_UART_Init+0x5c>)
 80005ee:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f0:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 8000604:	220c      	movs	r2, #12
 8000606:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <MX_USART2_UART_Init+0x54>)
 8000622:	f003 fb0f 	bl	8003c44 <HAL_UART_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 800062c:	f000 f878 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000009c 	.word	0x2000009c
 8000638:	40004400 	.word	0x40004400
 800063c:	0007a120 	.word	0x0007a120

08000640 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_DMA_Init+0x48>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <MX_DMA_Init+0x48>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <MX_DMA_Init+0x48>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	2010      	movs	r0, #16
 8000664:	f000 fdf7 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000668:	2010      	movs	r0, #16
 800066a:	f000 fe10 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2011      	movs	r0, #17
 8000674:	f000 fdef 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000678:	2011      	movs	r0, #17
 800067a:	f000 fe08 	bl	800128e <HAL_NVIC_EnableIRQ>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a16      	ldr	r2, [pc, #88]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_GPIO_Init+0x8c>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2108      	movs	r1, #8
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0x90>)
 80006f0:	f001 f96c 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILDIN_LED_Pin */
  GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 80006f4:	2308      	movs	r3, #8
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_GPIO_Init+0x90>)
 800070c:	f000 ffec 	bl	80016e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	48000400 	.word	0x48000400

08000720 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <HAL_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <HAL_MspInit+0x44>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a18      	ldr	r2, [pc, #96]	@ (80007f4 <HAL_CAN_MspInit+0x80>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d129      	bne.n	80007ea <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <HAL_CAN_MspInit+0x84>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <HAL_CAN_MspInit+0x84>)
 800079c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <HAL_CAN_MspInit+0x84>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_CAN_MspInit+0x84>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <HAL_CAN_MspInit+0x84>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_CAN_MspInit+0x84>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80007d8:	2309      	movs	r3, #9
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 ff7f 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40006400 	.word	0x40006400
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_TIM_PWM_MspInit+0x38>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10b      	bne.n	8000826 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_TIM_PWM_MspInit+0x3c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <HAL_TIM_PWM_MspInit+0x3c>)
 8000814:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <HAL_TIM_PWM_MspInit+0x3c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40012c00 	.word	0x40012c00
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <HAL_TIM_MspPostInit+0x68>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d11d      	bne.n	800089a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_TIM_MspPostInit+0x6c>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a11      	ldr	r2, [pc, #68]	@ (80008a8 <HAL_TIM_MspPostInit+0x6c>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_TIM_MspPostInit+0x6c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000876:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800087a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000888:	2306      	movs	r3, #6
 800088a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f000 ff27 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40012c00 	.word	0x40012c00
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a42      	ldr	r2, [pc, #264]	@ (80009d4 <HAL_UART_MspInit+0x128>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d17d      	bne.n	80009ca <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <HAL_UART_MspInit+0x12c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a41      	ldr	r2, [pc, #260]	@ (80009d8 <HAL_UART_MspInit+0x12c>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <HAL_UART_MspInit+0x12c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b3c      	ldr	r3, [pc, #240]	@ (80009d8 <HAL_UART_MspInit+0x12c>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a3b      	ldr	r2, [pc, #236]	@ (80009d8 <HAL_UART_MspInit+0x12c>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <HAL_UART_MspInit+0x12c>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80008fe:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000910:	2307      	movs	r3, #7
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f000 fee3 	bl	80016e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000924:	4a2e      	ldr	r2, [pc, #184]	@ (80009e0 <HAL_UART_MspInit+0x134>)
 8000926:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <HAL_UART_MspInit+0x130>)
 800092a:	2210      	movs	r2, #16
 800092c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <HAL_UART_MspInit+0x130>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <HAL_UART_MspInit+0x130>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000952:	4822      	ldr	r0, [pc, #136]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000954:	f000 fcb9 	bl	80012ca <HAL_DMA_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800095e:	f7ff fedf 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <HAL_UART_MspInit+0x130>)
 8000966:	671a      	str	r2, [r3, #112]	@ 0x70
 8000968:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <HAL_UART_MspInit+0x130>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 8000970:	4a1d      	ldr	r2, [pc, #116]	@ (80009e8 <HAL_UART_MspInit+0x13c>)
 8000972:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 8000994:	2220      	movs	r2, #32
 8000996:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 80009a0:	f000 fc93 	bl	80012ca <HAL_DMA_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80009aa:	f7ff feb9 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 80009b2:	675a      	str	r2, [r3, #116]	@ 0x74
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <HAL_UART_MspInit+0x138>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2026      	movs	r0, #38	@ 0x26
 80009c0:	f000 fc49 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c4:	2026      	movs	r0, #38	@ 0x26
 80009c6:	f000 fc62 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	20000124 	.word	0x20000124
 80009e0:	40020080 	.word	0x40020080
 80009e4:	20000168 	.word	0x20000168
 80009e8:	4002006c 	.word	0x4002006c

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f8a3 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <DMA1_Channel6_IRQHandler+0x10>)
 8000a52:	f000 fd57 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000168 	.word	0x20000168

08000a60 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <DMA1_Channel7_IRQHandler+0x10>)
 8000a66:	f000 fd4d 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000124 	.word	0x20000124

08000a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <USART2_IRQHandler+0x10>)
 8000a7a:	f003 f9f1 	bl	8003e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000009c 	.word	0x2000009c

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopForever+0x2>
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopForever+0x6>)
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LoopForever+0xa>)
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <LoopForever+0xe>)
 8000aba:	2300      	movs	r3, #0
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:
 8000abe:	58d4      	ldr	r4, [r2, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:
 8000ac4:	18c4      	adds	r4, r0, r3
 8000ac6:	428c      	cmp	r4, r1
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <LoopForever+0x12>)
 8000acc:	4c0a      	ldr	r4, [pc, #40]	@ (8000af8 <LoopForever+0x16>)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>
 8000ada:	f004 fb91 	bl	8005200 <__libc_init_array>
 8000ade:	f7ff fbe9 	bl	80002b4 <main>

08000ae2 <LoopForever>:
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
 8000ae4:	20003000 	.word	0x20003000
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	2000000c 	.word	0x2000000c
 8000af0:	080052c4 	.word	0x080052c4
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	20000284 	.word	0x20000284

08000afc <ADC1_2_IRQHandler>:
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 fb95 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe06 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fbb1 	bl	80012b2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b68:	f000 fb75 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000280 	.word	0x20000280

08000bb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000280 	.word	0x20000280

08000bcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0ed      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fd9e 	bl	8000774 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c48:	f7ff ffb4 	bl	8000bb4 <HAL_GetTick>
 8000c4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c4e:	e012      	b.n	8000c76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c50:	f7ff ffb0 	bl	8000bb4 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d90b      	bls.n	8000c76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e0c5      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0e5      	beq.n	8000c50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0202 	bic.w	r2, r2, #2
 8000c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c94:	f7ff ff8e 	bl	8000bb4 <HAL_GetTick>
 8000c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9a:	e012      	b.n	8000cc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c9c:	f7ff ff8a 	bl	8000bb4 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d90b      	bls.n	8000cc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e09f      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1e5      	bne.n	8000c9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7e1b      	ldrb	r3, [r3, #24]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7e5b      	ldrb	r3, [r3, #25]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e9b      	ldrb	r3, [r3, #26]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d108      	bne.n	8000d3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0220 	orr.w	r2, r2, #32
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0220 	bic.w	r2, r2, #32
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7edb      	ldrb	r3, [r3, #27]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d108      	bne.n	8000d68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0210 	bic.w	r2, r2, #16
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0210 	orr.w	r2, r2, #16
 8000d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7f1b      	ldrb	r3, [r3, #28]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d108      	bne.n	8000d92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0208 	orr.w	r2, r2, #8
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0208 	bic.w	r2, r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7f5b      	ldrb	r3, [r3, #29]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0204 	orr.w	r2, r2, #4
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e007      	b.n	8000dcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0204 	bic.w	r2, r2, #4
 8000dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	ea42 0103 	orr.w	r1, r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b087      	sub	sp, #28
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e22:	7cfb      	ldrb	r3, [r7, #19]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d003      	beq.n	8000e30 <HAL_CAN_ConfigFilter+0x26>
 8000e28:	7cfb      	ldrb	r3, [r7, #19]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	f040 80aa 	bne.w	8000f84 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2201      	movs	r2, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d123      	bne.n	8000eb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	401a      	ands	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3248      	adds	r2, #72	@ 0x48
 8000e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ea6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ea8:	6979      	ldr	r1, [r7, #20]
 8000eaa:	3348      	adds	r3, #72	@ 0x48
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d122      	bne.n	8000f00 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3248      	adds	r2, #72	@ 0x48
 8000ee0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef6:	6979      	ldr	r1, [r7, #20]
 8000ef8:	3348      	adds	r3, #72	@ 0x48
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d107      	bne.n	8000f70 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f76:	f023 0201 	bic.w	r2, r3, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e006      	b.n	8000f92 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
  }
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d12e      	bne.n	8001010 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fca:	f7ff fdf3 	bl	8000bb4 <HAL_GetTick>
 8000fce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fd0:	e012      	b.n	8000ff8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd2:	f7ff fdef 	bl	8000bb4 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d90b      	bls.n	8000ff8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e012      	b.n	800101e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1e5      	bne.n	8000fd2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e006      	b.n	800101e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001014:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
  }
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001036:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d002      	beq.n	8001044 <HAL_CAN_ActivateNotification+0x1e>
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d109      	bne.n	8001058 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6959      	ldr	r1, [r3, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	e006      	b.n	8001066 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011d4:	f3bf 8f4f 	dsb	sy
}
 80011d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <__NVIC_SystemReset+0x24>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011e2:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <__NVIC_SystemReset+0x24>)
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__NVIC_SystemReset+0x28>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
}
 80011ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <__NVIC_SystemReset+0x20>
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	05fa0004 	.word	0x05fa0004

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001220:	f7ff ff78 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff13 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff28 	bl	80010bc <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff78 	bl	8001168 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff47 	bl	8001114 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff1b 	bl	80010d8 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80012ae:	f7ff ff8f 	bl	80011d0 <__NVIC_SystemReset>

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff9e 	bl	80011fc <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e037      	b.n	8001350 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f9b8 	bl	80016a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}  
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_DMA_Start_IT+0x20>
 8001374:	2302      	movs	r3, #2
 8001376:	e04a      	b.n	800140e <HAL_DMA_Start_IT+0xb6>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001386:	2b01      	cmp	r3, #1
 8001388:	d13a      	bne.n	8001400 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2202      	movs	r2, #2
 800138e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f94b 	bl	800164a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 020e 	orr.w	r2, r2, #14
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e00f      	b.n	80013ee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 020a 	orr.w	r2, r2, #10
 80013dc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0204 	bic.w	r2, r2, #4
 80013ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e005      	b.n	800140c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001408:	2302      	movs	r3, #2
 800140a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800140c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001424:	2b02      	cmp	r3, #2
 8001426:	d008      	beq.n	800143a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2204      	movs	r2, #4
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e020      	b.n	800147c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 020e 	bic.w	r2, r2, #14
 8001448:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800149a:	2b02      	cmp	r3, #2
 800149c:	d005      	beq.n	80014aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2204      	movs	r2, #4
 80014a2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e027      	b.n	80014fa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020e 	bic.w	r2, r2, #14
 80014b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
    } 
  }
  return status;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	2204      	movs	r2, #4
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d024      	beq.n	8001576 <HAL_DMA_IRQHandler+0x72>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01f      	beq.n	8001576 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800155c:	2104      	movs	r1, #4
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d06a      	beq.n	8001642 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001574:	e065      	b.n	8001642 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	2202      	movs	r2, #2
 800157c:	409a      	lsls	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d02c      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xdc>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d027      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10b      	bne.n	80015b6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 020a 	bic.w	r2, r2, #10
 80015ac:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015be:	2102      	movs	r1, #2
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d035      	beq.n	8001642 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015de:	e030      	b.n	8001642 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	2208      	movs	r2, #8
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d028      	beq.n	8001642 <HAL_DMA_IRQHandler+0x13e>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d023      	beq.n	8001642 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020e 	bic.w	r2, r2, #14
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
    }
  }
}  
 8001640:	e7ff      	b.n	8001642 <HAL_DMA_IRQHandler+0x13e>
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f202 	lsl.w	r2, r1, r2
 8001666:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b10      	cmp	r3, #16
 8001676:	d108      	bne.n	800168a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001688:	e007      	b.n	800169a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	60da      	str	r2, [r3, #12]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <DMA_CalcBaseAndBitshift+0x34>)
 80016b8:	4413      	add	r3, r2
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <DMA_CalcBaseAndBitshift+0x38>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	009a      	lsls	r2, r3, #2
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <DMA_CalcBaseAndBitshift+0x3c>)
 80016cc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	bffdfff8 	.word	0xbffdfff8
 80016e0:	cccccccd 	.word	0xcccccccd
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e14e      	b.n	8001996 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8140 	beq.w	8001990 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d005      	beq.n	8001728 <HAL_GPIO_Init+0x40>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0201 	and.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b03      	cmp	r3, #3
 8001794:	d017      	beq.n	80017c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d123      	bne.n	800181a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	6939      	ldr	r1, [r7, #16]
 8001816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0203 	and.w	r2, r3, #3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 809a 	beq.w	8001990 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185c:	4b55      	ldr	r3, [pc, #340]	@ (80019b4 <HAL_GPIO_Init+0x2cc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a54      	ldr	r2, [pc, #336]	@ (80019b4 <HAL_GPIO_Init+0x2cc>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b52      	ldr	r3, [pc, #328]	@ (80019b4 <HAL_GPIO_Init+0x2cc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001874:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800189e:	d013      	beq.n	80018c8 <HAL_GPIO_Init+0x1e0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a46      	ldr	r2, [pc, #280]	@ (80019bc <HAL_GPIO_Init+0x2d4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_GPIO_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a45      	ldr	r2, [pc, #276]	@ (80019c0 <HAL_GPIO_Init+0x2d8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x1d8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a44      	ldr	r2, [pc, #272]	@ (80019c4 <HAL_GPIO_Init+0x2dc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_GPIO_Init+0x1d4>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e006      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018bc:	2305      	movs	r3, #5
 80018be:	e004      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c8:	2300      	movs	r3, #0
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018da:	4937      	ldr	r1, [pc, #220]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e8:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800190c:	4a2e      	ldr	r2, [pc, #184]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001936:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193c:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001960:	4a19      	ldr	r2, [pc, #100]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <HAL_GPIO_Init+0x2e0>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f aea9 	bne.w	80016f8 <HAL_GPIO_Init+0x10>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000c00 	.word	0x48000c00
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43d9      	mvns	r1, r3
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f001 b823 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 817d 	beq.w	8001d66 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a6c:	4bbc      	ldr	r3, [pc, #752]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d00c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a78:	4bb9      	ldr	r3, [pc, #740]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d15c      	bne.n	8001b3e <HAL_RCC_OscConfig+0x10e>
 8001a84:	4bb6      	ldr	r3, [pc, #728]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a90:	d155      	bne.n	8001b3e <HAL_RCC_OscConfig+0x10e>
 8001a92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a96:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aa6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	095b      	lsrs	r3, r3, #5
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x94>
 8001abe:	4ba8      	ldr	r3, [pc, #672]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e015      	b.n	8001af0 <HAL_RCC_OscConfig+0xc0>
 8001ac4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ac8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001adc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ae0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001aec:	4b9c      	ldr	r3, [pc, #624]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001af4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001af8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001afc:	fa92 f2a2 	rbit	r2, r2
 8001b00:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b04:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b08:	fab2 f282 	clz	r2, r2
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f042 0220 	orr.w	r2, r2, #32
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f002 021f 	and.w	r2, r2, #31
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 811f 	beq.w	8001d64 <HAL_RCC_OscConfig+0x334>
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 8116 	bne.w	8001d64 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f000 bfaf 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12e>
 8001b50:	4b83      	ldr	r3, [pc, #524]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a82      	ldr	r2, [pc, #520]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e036      	b.n	8001bcc <HAL_RCC_OscConfig+0x19c>
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x158>
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7b      	ldr	r2, [pc, #492]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b79      	ldr	r3, [pc, #484]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a78      	ldr	r2, [pc, #480]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e021      	b.n	8001bcc <HAL_RCC_OscConfig+0x19c>
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x184>
 8001b9a:	4b71      	ldr	r3, [pc, #452]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a70      	ldr	r2, [pc, #448]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6d      	ldr	r2, [pc, #436]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0x19c>
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a69      	ldr	r2, [pc, #420]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b67      	ldr	r3, [pc, #412]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a66      	ldr	r2, [pc, #408]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bcc:	4b64      	ldr	r3, [pc, #400]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	f023 020f 	bic.w	r2, r3, #15
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	495f      	ldr	r1, [pc, #380]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d059      	beq.n	8001caa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe ffdd 	bl	8000bb4 <HAL_GetTick>
 8001bfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7fe ffd8 	bl	8000bb4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b64      	cmp	r3, #100	@ 0x64
 8001c0e:	d902      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f000 bf43 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
 8001c16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c1a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_OscConfig+0x218>
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e015      	b.n	8001c74 <HAL_RCC_OscConfig+0x244>
 8001c48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c60:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c70:	4b3b      	ldr	r3, [pc, #236]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c78:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ab      	beq.n	8001c00 <HAL_RCC_OscConfig+0x1d0>
 8001ca8:	e05d      	b.n	8001d66 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe ff83 	bl	8000bb4 <HAL_GetTick>
 8001cae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ff7e 	bl	8000bb4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d902      	bls.n	8001cca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f000 bee9 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
 8001cca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001cde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2cc>
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x2f8>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d00:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d14:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d2c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d30:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d3c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1ab      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x284>
 8001d5c:	e003      	b.n	8001d66 <HAL_RCC_OscConfig+0x336>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 817d 	beq.w	8002076 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d7c:	4ba6      	ldr	r3, [pc, #664]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d88:	4ba3      	ldr	r3, [pc, #652]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d172      	bne.n	8001e7a <HAL_RCC_OscConfig+0x44a>
 8001d94:	4ba0      	ldr	r3, [pc, #640]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d16c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x44a>
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001db2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3a0>
 8001dca:	4b93      	ldr	r3, [pc, #588]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e013      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c8>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001de8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001df4:	4b88      	ldr	r3, [pc, #544]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001dfe:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e02:	fa92 f2a2 	rbit	r2, r2
 8001e06:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e0a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCC_OscConfig+0x410>
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f000 be2e 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b75      	ldr	r3, [pc, #468]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	21f8      	movs	r1, #248	@ 0xf8
 8001e56:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e5e:	fa91 f1a1 	rbit	r1, r1
 8001e62:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e66:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e6a:	fab1 f181 	clz	r1, r1
 8001e6e:	b2c9      	uxtb	r1, r1
 8001e70:	408b      	lsls	r3, r1
 8001e72:	4969      	ldr	r1, [pc, #420]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e78:	e0fd      	b.n	8002076 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8088 	beq.w	8001f9c <HAL_RCC_OscConfig+0x56c>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001eac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fe7c 	bl	8000bb4 <HAL_GetTick>
 8001ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fe77 	bl	8000bb4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f000 bde2 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001eea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4d8>
 8001f02:	4b45      	ldr	r3, [pc, #276]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e013      	b.n	8001f30 <HAL_RCC_OscConfig+0x500>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f20:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	2202      	movs	r2, #2
 8001f32:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f36:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f3a:	fa92 f2a2 	rbit	r2, r2
 8001f3e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f42:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0af      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	21f8      	movs	r1, #248	@ 0xf8
 8001f78:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f80:	fa91 f1a1 	rbit	r1, r1
 8001f84:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f88:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f8c:	fab1 f181 	clz	r1, r1
 8001f90:	b2c9      	uxtb	r1, r1
 8001f92:	408b      	lsls	r3, r1
 8001f94:	4920      	ldr	r1, [pc, #128]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
 8001f9a:	e06c      	b.n	8002076 <HAL_RCC_OscConfig+0x646>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fbc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fdf4 	bl	8000bb4 <HAL_GetTick>
 8001fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fdef 	bl	8000bb4 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d902      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f000 bd5a 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d104      	bne.n	800201c <HAL_RCC_OscConfig+0x5ec>
 8002012:	4b01      	ldr	r3, [pc, #4]	@ (8002018 <HAL_RCC_OscConfig+0x5e8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e015      	b.n	8002044 <HAL_RCC_OscConfig+0x614>
 8002018:	40021000 	.word	0x40021000
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002034:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002040:	4bc8      	ldr	r3, [pc, #800]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	2202      	movs	r2, #2
 8002046:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800204a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002056:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800205a:	fab2 f282 	clz	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f042 0220 	orr.w	r2, r2, #32
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f002 021f 	and.w	r2, r2, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ad      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8110 	beq.w	80022ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d079      	beq.n	8002190 <HAL_RCC_OscConfig+0x760>
 800209c:	2301      	movs	r3, #1
 800209e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80020ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	4bab      	ldr	r3, [pc, #684]	@ (8002368 <HAL_RCC_OscConfig+0x938>)
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	461a      	mov	r2, r3
 80020c2:	2301      	movs	r3, #1
 80020c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe fd75 	bl	8000bb4 <HAL_GetTick>
 80020ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd70 	bl	8000bb4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d902      	bls.n	80020e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f000 bcdb 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800213e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002140:	4b88      	ldr	r3, [pc, #544]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 8002142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800214c:	2102      	movs	r1, #2
 800214e:	6019      	str	r1, [r3, #0]
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f1a3 	rbit	r1, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002166:	6019      	str	r1, [r3, #0]
  return result;
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0a0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x6a0>
 800218e:	e08d      	b.n	80022ac <HAL_RCC_OscConfig+0x87c>
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b68      	ldr	r3, [pc, #416]	@ (8002368 <HAL_RCC_OscConfig+0x938>)
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	461a      	mov	r2, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fcef 	bl	8000bb4 <HAL_GetTick>
 80021d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7fe fcea 	bl	8000bb4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d902      	bls.n	80021f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f000 bc55 	b.w	8002a9c <HAL_RCC_OscConfig+0x106c>
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002242:	2202      	movs	r2, #2
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800225c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 8002260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800226a:	2102      	movs	r1, #2
 800226c:	6019      	str	r1, [r3, #0]
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f1a3 	rbit	r1, r3
 800227c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002280:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002284:	6019      	str	r1, [r3, #0]
  return result;
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d197      	bne.n	80021dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 81a1 	beq.w	8002604 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c8:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d116      	bne.n	8002302 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4a22      	ldr	r2, [pc, #136]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022de:	61d3      	str	r3, [r2, #28]
 80022e0:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <HAL_RCC_OscConfig+0x93c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11a      	bne.n	8002344 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_RCC_OscConfig+0x93c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a16      	ldr	r2, [pc, #88]	@ (800236c <HAL_RCC_OscConfig+0x93c>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002318:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7fe fc4b 	bl	8000bb4 <HAL_GetTick>
 800231e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	e009      	b.n	8002338 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002324:	f7fe fc46 	bl	8000bb4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b64      	cmp	r3, #100	@ 0x64
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e3b1      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <HAL_RCC_OscConfig+0x93c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ef      	beq.n	8002324 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10d      	bne.n	8002370 <HAL_RCC_OscConfig+0x940>
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a02      	ldr	r2, [pc, #8]	@ (8002364 <HAL_RCC_OscConfig+0x934>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e03c      	b.n	80023dc <HAL_RCC_OscConfig+0x9ac>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	10908120 	.word	0x10908120
 800236c:	40007000 	.word	0x40007000
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x96a>
 8002380:	4bc1      	ldr	r3, [pc, #772]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4ac0      	ldr	r2, [pc, #768]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	4bbe      	ldr	r3, [pc, #760]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4abd      	ldr	r2, [pc, #756]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 8002392:	f023 0304 	bic.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e020      	b.n	80023dc <HAL_RCC_OscConfig+0x9ac>
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x994>
 80023aa:	4bb7      	ldr	r3, [pc, #732]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4ab6      	ldr	r2, [pc, #728]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4bb4      	ldr	r3, [pc, #720]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4ab3      	ldr	r2, [pc, #716]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x9ac>
 80023c4:	4bb0      	ldr	r3, [pc, #704]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4aaf      	ldr	r2, [pc, #700]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	4bad      	ldr	r3, [pc, #692]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4aac      	ldr	r2, [pc, #688]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8081 	beq.w	80024f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fbe1 	bl	8000bb4 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fbdc 	bl	8000bb4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e345      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800243c:	2202      	movs	r2, #2
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002456:	601a      	str	r2, [r3, #0]
  return result;
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002460:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0xa4c>
 8002476:	4b84      	ldr	r3, [pc, #528]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0xa74>
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002484:	2202      	movs	r2, #2
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	4b79      	ldr	r3, [pc, #484]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024ac:	2102      	movs	r1, #2
 80024ae:	6011      	str	r1, [r2, #0]
 80024b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	fa92 f1a2 	rbit	r1, r2
 80024be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024c2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024c6:	6011      	str	r1, [r2, #0]
  return result;
 80024c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024cc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	fab2 f282 	clz	r2, r2
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f002 021f 	and.w	r2, r2, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d084      	beq.n	80023f8 <HAL_RCC_OscConfig+0x9c8>
 80024ee:	e07f      	b.n	80025f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7fe fb60 	bl	8000bb4 <HAL_GetTick>
 80024f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fb5b 	bl	8000bb4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e2c4      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
 8002512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002516:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800253e:	2202      	movs	r2, #2
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002554:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002558:	601a      	str	r2, [r3, #0]
  return result;
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002562:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0xb4e>
 8002578:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	e013      	b.n	80025a6 <HAL_RCC_OscConfig+0xb76>
 800257e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002582:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002586:	2202      	movs	r2, #2
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025aa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025ae:	2102      	movs	r1, #2
 80025b0:	6011      	str	r1, [r2, #0]
 80025b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fa92 f1a2 	rbit	r1, r2
 80025c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025c8:	6011      	str	r1, [r2, #0]
  return result;
 80025ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ce:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d184      	bne.n	80024fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002602:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8242 	beq.w	8002a9a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002616:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <HAL_RCC_OscConfig+0xc58>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	f000 8213 	beq.w	8002a4a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b02      	cmp	r3, #2
 8002632:	f040 8162 	bne.w	80028fa <HAL_RCC_OscConfig+0xeca>
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800263e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	fa93 f2a3 	rbit	r2, r3
 8002652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002656:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800265a:	601a      	str	r2, [r3, #0]
  return result;
 800265c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002660:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002664:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002670:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	461a      	mov	r2, r3
 8002678:	2300      	movs	r3, #0
 800267a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fa9a 	bl	8000bb4 <HAL_GetTick>
 8002680:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e00c      	b.n	80026a0 <HAL_RCC_OscConfig+0xc70>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fa92 	bl	8000bb4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1fd      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026c4:	601a      	str	r2, [r3, #0]
  return result;
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0xcba>
 80026e4:	4bb0      	ldr	r3, [pc, #704]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	e027      	b.n	800273a <HAL_RCC_OscConfig+0xd0a>
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4b9c      	ldr	r3, [pc, #624]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800273e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002742:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002746:	6011      	str	r1, [r2, #0]
 8002748:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800274c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	fa92 f1a2 	rbit	r1, r2
 8002756:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800275a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800275e:	6011      	str	r1, [r2, #0]
  return result;
 8002760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002764:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f042 0220 	orr.w	r2, r2, #32
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f002 021f 	and.w	r2, r2, #31
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f202 	lsl.w	r2, r1, r2
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d182      	bne.n	800268c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002786:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	430b      	orrs	r3, r1
 80027a8:	497f      	ldr	r1, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027d2:	601a      	str	r2, [r3, #0]
  return result;
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	2301      	movs	r3, #1
 80027f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe f9de 	bl	8000bb4 <HAL_GetTick>
 80027f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe f9d9 	bl	8000bb4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e144      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800281a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800281e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fa93 f2a3 	rbit	r2, r3
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002836:	601a      	str	r2, [r3, #0]
  return result;
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002840:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_RCC_OscConfig+0xe2c>
 8002856:	4b54      	ldr	r3, [pc, #336]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	e027      	b.n	80028ac <HAL_RCC_OscConfig+0xe7c>
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002864:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800288a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028b8:	6011      	str	r1, [r2, #0]
 80028ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028be:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	fa92 f1a2 	rbit	r1, r2
 80028c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028cc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028d0:	6011      	str	r1, [r2, #0]
  return result;
 80028d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f042 0220 	orr.w	r2, r2, #32
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f002 021f 	and.w	r2, r2, #31
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f202 	lsl.w	r2, r1, r2
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d082      	beq.n	80027fe <HAL_RCC_OscConfig+0xdce>
 80028f8:	e0cf      	b.n	8002a9a <HAL_RCC_OscConfig+0x106a>
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002902:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800291e:	601a      	str	r2, [r3, #0]
  return result;
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002928:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002934:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe f938 	bl	8000bb4 <HAL_GetTick>
 8002944:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e009      	b.n	800295e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe f933 	bl	8000bb4 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e09e      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002966:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002982:	601a      	str	r2, [r3, #0]
  return result;
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800298c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d104      	bne.n	80029ac <HAL_RCC_OscConfig+0xf7c>
 80029a2:	4b01      	ldr	r3, [pc, #4]	@ (80029a8 <HAL_RCC_OscConfig+0xf78>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e029      	b.n	80029fc <HAL_RCC_OscConfig+0xfcc>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029be:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029cc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_RCC_OscConfig+0x1078>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a00:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a04:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a08:	6011      	str	r1, [r2, #0]
 8002a0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a0e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	fa92 f1a2 	rbit	r1, r2
 8002a18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a1c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a20:	6011      	str	r1, [r2, #0]
  return result;
 8002a22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a26:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d180      	bne.n	800294a <HAL_RCC_OscConfig+0xf1a>
 8002a48:	e027      	b.n	8002a9a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e01e      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_RCC_OscConfig+0x1078>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a6a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b09e      	sub	sp, #120	@ 0x78
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e162      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b90      	ldr	r3, [pc, #576]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d910      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 0207 	bic.w	r2, r3, #7
 8002ada:	498b      	ldr	r1, [pc, #556]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b89      	ldr	r3, [pc, #548]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e14a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	497f      	ldr	r1, [pc, #508]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80dc 	beq.w	8002cd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13c      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xf6>
 8002b28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b2c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xa6>
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e00f      	b.n	8002b72 <HAL_RCC_ClockConfig+0xc6>
 8002b52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b6e:	4b67      	ldr	r3, [pc, #412]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b76:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b7a:	fa92 f2a2 	rbit	r2, r2
 8002b7e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f042 0220 	orr.w	r2, r2, #32
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f002 021f 	and.w	r2, r2, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d17b      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0f3      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d13c      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x178>
 8002baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x128>
 8002bce:	4b4f      	ldr	r3, [pc, #316]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	e00f      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
 8002bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf0:	4b46      	ldr	r3, [pc, #280]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bf8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002bfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f042 0220 	orr.w	r2, r2, #32
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f002 021f 	and.w	r2, r2, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13a      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b2      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
 8002c46:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e00d      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1bc>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	2302      	movs	r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	2202      	movs	r2, #2
 8002c6a:	61ba      	str	r2, [r7, #24]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	fa92 f2a2 	rbit	r2, r2
 8002c72:	617a      	str	r2, [r7, #20]
  return result;
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0220 	orr.w	r2, r2, #32
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e079      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	491a      	ldr	r1, [pc, #104]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fd ff84 	bl	8000bb4 <HAL_GetTick>
 8002cac:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7fd ff80 	bl	8000bb4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e061      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d214      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4906      	ldr	r1, [pc, #24]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e040      	b.n	8002d8a <HAL_RCC_ClockConfig+0x2de>
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <HAL_RCC_ClockConfig+0x2e8>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	491a      	ldr	r1, [pc, #104]	@ (8002d94 <HAL_RCC_ClockConfig+0x2e8>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3a:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4912      	ldr	r1, [pc, #72]	@ (8002d94 <HAL_RCC_ClockConfig+0x2e8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d4e:	f000 f829 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d52:	4601      	mov	r1, r0
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_RCC_ClockConfig+0x2e8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5c:	22f0      	movs	r2, #240	@ 0xf0
 8002d5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	fa92 f2a2 	rbit	r2, r2
 8002d66:	60fa      	str	r2, [r7, #12]
  return result;
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	fab2 f282 	clz	r2, r2
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	40d3      	lsrs	r3, r2
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <HAL_RCC_ClockConfig+0x2ec>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
 8002d76:	fa21 f303 	lsr.w	r3, r1, r3
 8002d7a:	4a08      	ldr	r2, [pc, #32]	@ (8002d9c <HAL_RCC_ClockConfig+0x2f0>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_RCC_ClockConfig+0x2f4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fed2 	bl	8000b2c <HAL_InitTick>
  
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3778      	adds	r7, #120	@ 0x78
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08005284 	.word	0x08005284
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b08b      	sub	sp, #44	@ 0x2c
 8002da8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dbe:	4b29      	ldr	r3, [pc, #164]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x36>
 8002dd2:	e03c      	b.n	8002e4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd4:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dd6:	623b      	str	r3, [r7, #32]
      break;
 8002dd8:	e03c      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002de0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002de4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	607a      	str	r2, [r7, #4]
  return result;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dfe:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	220f      	movs	r2, #15
 8002e08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	fa92 f2a2 	rbit	r2, r2
 8002e10:	60fa      	str	r2, [r7, #12]
  return result;
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	40d3      	lsrs	r3, r2
 8002e1c:	4a14      	ldr	r2, [pc, #80]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e1e:	5cd3      	ldrb	r3, [r2, r3]
 8002e20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3c:	e004      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4a0c      	ldr	r2, [pc, #48]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	623b      	str	r3, [r7, #32]
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e50:	623b      	str	r3, [r7, #32]
      break;
 8002e52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e54:	6a3b      	ldr	r3, [r7, #32]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	372c      	adds	r7, #44	@ 0x2c
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	007a1200 	.word	0x007a1200
 8002e6c:	0800529c 	.word	0x0800529c
 8002e70:	080052ac 	.word	0x080052ac
 8002e74:	003d0900 	.word	0x003d0900

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e96:	f7ff ffef 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ea4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ea8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	fa92 f2a2 	rbit	r2, r2
 8002eb0:	603a      	str	r2, [r7, #0]
  return result;
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	fab2 f282 	clz	r2, r2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	40d3      	lsrs	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	@ (8002ed0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ebe:	5cd3      	ldrb	r3, [r2, r3]
 8002ec0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08005294 	.word	0x08005294

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eda:	f7ff ffcd 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ede:	4601      	mov	r1, r0
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ee8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002eec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	fa92 f2a2 	rbit	r2, r2
 8002ef4:	603a      	str	r2, [r7, #0]
  return result;
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	40d3      	lsrs	r3, r2
 8002f00:	4a04      	ldr	r2, [pc, #16]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08005294 	.word	0x08005294

08002f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b092      	sub	sp, #72	@ 0x48
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80cd 	beq.w	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3c:	4b86      	ldr	r3, [pc, #536]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10e      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b83      	ldr	r3, [pc, #524]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a82      	ldr	r2, [pc, #520]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	61d3      	str	r3, [r2, #28]
 8002f54:	4b80      	ldr	r3, [pc, #512]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b7d      	ldr	r3, [pc, #500]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b7a      	ldr	r3, [pc, #488]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a79      	ldr	r2, [pc, #484]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fd fe19 	bl	8000bb4 <HAL_GetTick>
 8002f82:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fd fe15 	bl	8000bb4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	@ 0x64
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0db      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b70      	ldr	r3, [pc, #448]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d07d      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d076      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc2:	4b65      	ldr	r3, [pc, #404]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	2301      	movs	r3, #1
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	4b55      	ldr	r3, [pc, #340]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	461a      	mov	r2, r3
 8003010:	2300      	movs	r3, #0
 8003012:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003014:	4a50      	ldr	r2, [pc, #320]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003018:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800301a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d045      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd fdc6 	bl	8000bb4 <HAL_GetTick>
 8003028:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fd fdc2 	bl	8000bb4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e086      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003042:	2302      	movs	r3, #2
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
 800304e:	2302      	movs	r3, #2
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	61fb      	str	r3, [r7, #28]
  return result;
 800305a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d102      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	e007      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003076:	2302      	movs	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	2202      	movs	r2, #2
 8003088:	613a      	str	r2, [r7, #16]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	fa92 f2a2 	rbit	r2, r2
 8003090:	60fa      	str	r2, [r7, #12]
  return result;
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	fab2 f282 	clz	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f002 021f 	and.w	r2, r2, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0bd      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030b0:	4b29      	ldr	r3, [pc, #164]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4926      	ldr	r1, [pc, #152]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	491a      	ldr	r1, [pc, #104]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	f023 0210 	bic.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4912      	ldr	r1, [pc, #72]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800310e:	4313      	orrs	r3, r2
 8003110:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	490b      	ldr	r1, [pc, #44]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800312c:	4313      	orrs	r3, r2
 800312e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	4903      	ldr	r1, [pc, #12]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314a:	4313      	orrs	r3, r2
 800314c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3748      	adds	r7, #72	@ 0x48
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
 8003160:	10908100 	.word	0x10908100

08003164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e049      	b.n	800320a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fb36 	bl	80007fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 f94a 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e0ff      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b14      	cmp	r3, #20
 800323e:	f200 80f0 	bhi.w	8003422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800329d 	.word	0x0800329d
 800324c:	08003423 	.word	0x08003423
 8003250:	08003423 	.word	0x08003423
 8003254:	08003423 	.word	0x08003423
 8003258:	080032dd 	.word	0x080032dd
 800325c:	08003423 	.word	0x08003423
 8003260:	08003423 	.word	0x08003423
 8003264:	08003423 	.word	0x08003423
 8003268:	0800331f 	.word	0x0800331f
 800326c:	08003423 	.word	0x08003423
 8003270:	08003423 	.word	0x08003423
 8003274:	08003423 	.word	0x08003423
 8003278:	0800335f 	.word	0x0800335f
 800327c:	08003423 	.word	0x08003423
 8003280:	08003423 	.word	0x08003423
 8003284:	08003423 	.word	0x08003423
 8003288:	080033a1 	.word	0x080033a1
 800328c:	08003423 	.word	0x08003423
 8003290:	08003423 	.word	0x08003423
 8003294:	08003423 	.word	0x08003423
 8003298:	080033e1 	.word	0x080033e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f942 	bl	800352c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6999      	ldr	r1, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	619a      	str	r2, [r3, #24]
      break;
 80032da:	e0a5      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f9a8 	bl	8003638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      break;
 800331c:	e084      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fa07 	bl	8003738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0208 	orr.w	r2, r2, #8
 8003338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0204 	bic.w	r2, r2, #4
 8003348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	61da      	str	r2, [r3, #28]
      break;
 800335c:	e064      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa65 	bl	8003834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69d9      	ldr	r1, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	61da      	str	r2, [r3, #28]
      break;
 800339e:	e043      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 faa8 	bl	80038fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033de:	e023      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fae6 	bl	80039b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003420:	e002      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
      break;
 8003426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop

0800343c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <TIM_Base_SetConfig+0xdc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x28>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x28>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2f      	ldr	r2, [pc, #188]	@ (800351c <TIM_Base_SetConfig+0xe0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a27      	ldr	r2, [pc, #156]	@ (8003518 <TIM_Base_SetConfig+0xdc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <TIM_Base_SetConfig+0x6a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0x6a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a24      	ldr	r2, [pc, #144]	@ (800351c <TIM_Base_SetConfig+0xe0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0x6a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a23      	ldr	r2, [pc, #140]	@ (8003520 <TIM_Base_SetConfig+0xe4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0x6a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a22      	ldr	r2, [pc, #136]	@ (8003524 <TIM_Base_SetConfig+0xe8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0x6a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a21      	ldr	r2, [pc, #132]	@ (8003528 <TIM_Base_SetConfig+0xec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0e      	ldr	r2, [pc, #56]	@ (8003518 <TIM_Base_SetConfig+0xdc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00b      	beq.n	80034fc <TIM_Base_SetConfig+0xc0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003520 <TIM_Base_SetConfig+0xe4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <TIM_Base_SetConfig+0xc0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003524 <TIM_Base_SetConfig+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_Base_SetConfig+0xc0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <TIM_Base_SetConfig+0xec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d103      	bne.n	8003504 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	615a      	str	r2, [r3, #20]
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800

0800352c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0302 	bic.w	r3, r3, #2
 8003578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a28      	ldr	r2, [pc, #160]	@ (8003628 <TIM_OC1_SetConfig+0xfc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_OC1_SetConfig+0x78>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a27      	ldr	r2, [pc, #156]	@ (800362c <TIM_OC1_SetConfig+0x100>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_OC1_SetConfig+0x78>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <TIM_OC1_SetConfig+0x104>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_OC1_SetConfig+0x78>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a25      	ldr	r2, [pc, #148]	@ (8003634 <TIM_OC1_SetConfig+0x108>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10c      	bne.n	80035be <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0308 	bic.w	r3, r3, #8
 80035aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a19      	ldr	r2, [pc, #100]	@ (8003628 <TIM_OC1_SetConfig+0xfc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_OC1_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a18      	ldr	r2, [pc, #96]	@ (800362c <TIM_OC1_SetConfig+0x100>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_OC1_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a17      	ldr	r2, [pc, #92]	@ (8003630 <TIM_OC1_SetConfig+0x104>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC1_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a16      	ldr	r2, [pc, #88]	@ (8003634 <TIM_OC1_SetConfig+0x108>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d111      	bne.n	8003602 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40014000 	.word	0x40014000
 8003630:	40014400 	.word	0x40014400
 8003634:	40014800 	.word	0x40014800

08003638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0320 	bic.w	r3, r3, #32
 8003686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a24      	ldr	r2, [pc, #144]	@ (8003728 <TIM_OC2_SetConfig+0xf0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10d      	bne.n	80036b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <TIM_OC2_SetConfig+0xf0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00b      	beq.n	80036d8 <TIM_OC2_SetConfig+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <TIM_OC2_SetConfig+0xf4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <TIM_OC2_SetConfig+0xa0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a19      	ldr	r2, [pc, #100]	@ (8003730 <TIM_OC2_SetConfig+0xf8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC2_SetConfig+0xa0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <TIM_OC2_SetConfig+0xfc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d113      	bne.n	8003700 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800

08003738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a23      	ldr	r2, [pc, #140]	@ (8003824 <TIM_OC3_SetConfig+0xec>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10d      	bne.n	80037b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003824 <TIM_OC3_SetConfig+0xec>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_OC3_SetConfig+0x9e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <TIM_OC3_SetConfig+0xf0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_OC3_SetConfig+0x9e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a18      	ldr	r2, [pc, #96]	@ (800382c <TIM_OC3_SetConfig+0xf4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_OC3_SetConfig+0x9e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <TIM_OC3_SetConfig+0xf8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800

08003834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <TIM_OC4_SetConfig+0xb8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_OC4_SetConfig+0x7c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <TIM_OC4_SetConfig+0xbc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_OC4_SetConfig+0x7c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a14      	ldr	r2, [pc, #80]	@ (80038f4 <TIM_OC4_SetConfig+0xc0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC4_SetConfig+0x7c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <TIM_OC4_SetConfig+0xc4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d109      	bne.n	80038c4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800

080038fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003940:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a15      	ldr	r2, [pc, #84]	@ (80039a8 <TIM_OC5_SetConfig+0xac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_OC5_SetConfig+0x72>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a14      	ldr	r2, [pc, #80]	@ (80039ac <TIM_OC5_SetConfig+0xb0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_OC5_SetConfig+0x72>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <TIM_OC5_SetConfig+0xb4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_OC5_SetConfig+0x72>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <TIM_OC5_SetConfig+0xb8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d109      	bne.n	8003982 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	051b      	lsls	r3, r3, #20
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	@ (8003a68 <TIM_OC6_SetConfig+0xb0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00b      	beq.n	8003a2c <TIM_OC6_SetConfig+0x74>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <TIM_OC6_SetConfig+0xb4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_OC6_SetConfig+0x74>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a14      	ldr	r2, [pc, #80]	@ (8003a70 <TIM_OC6_SetConfig+0xb8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC6_SetConfig+0x74>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <TIM_OC6_SetConfig+0xbc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d109      	bne.n	8003a40 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800

08003a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e054      	b.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ac0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af8:	d009      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a13      	ldr	r2, [pc, #76]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10c      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40014000 	.word	0x40014000

08003b54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e060      	b.n	8003c32 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a14      	ldr	r2, [pc, #80]	@ (8003c40 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d115      	bne.n	8003c20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	051b      	lsls	r3, r3, #20
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40012c00 	.word	0x40012c00

08003c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e040      	b.n	8003cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc fe20 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fbf2 	bl	800446c <UART_SetConfig>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fd1c 	bl	80046d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fda3 	bl	800481c <UART_CheckIdleState>
 8003cd6:	4603      	mov	r3, r0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	@ 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d132      	bne.n	8003d5e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Receive_IT+0x24>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e02b      	b.n	8003d60 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d018      	beq.n	8003d4e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	69f9      	ldr	r1, [r7, #28]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e6      	bne.n	8003d1c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fe71 	bl	8004a3c <UART_Start_Receive_IT>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	e000      	b.n	8003d60 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	@ 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	@ 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d165      	bne.n	8003e4a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit_DMA+0x22>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e05e      	b.n	8003e4c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2221      	movs	r2, #33	@ 0x21
 8003db0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d027      	beq.n	8003e0a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a25      	ldr	r2, [pc, #148]	@ (8003e54 <HAL_UART_Transmit_DMA+0xec>)
 8003dc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	4a24      	ldr	r2, [pc, #144]	@ (8003e58 <HAL_UART_Transmit_DMA+0xf0>)
 8003dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	4a23      	ldr	r2, [pc, #140]	@ (8003e5c <HAL_UART_Transmit_DMA+0xf4>)
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	4619      	mov	r1, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3328      	adds	r3, #40	@ 0x28
 8003dea:	461a      	mov	r2, r3
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	f7fd fab3 	bl	8001358 <HAL_DMA_Start_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e020      	b.n	8003e4c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	613b      	str	r3, [r7, #16]
   return(result);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e32:	623a      	str	r2, [r7, #32]
 8003e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e5      	bne.n	8003e12 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	@ 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	08004cdd 	.word	0x08004cdd
 8003e58:	08004d71 	.word	0x08004d71
 8003e5c:	08004d8d 	.word	0x08004d8d

08003e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b0ba      	sub	sp, #232	@ 0xe8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003e8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003e8e:	4013      	ands	r3, r2
 8003e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d115      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 82ab 	beq.w	8004414 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
      }
      return;
 8003ec6:	e2a5      	b.n	8004414 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8117 	beq.w	8004100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ee2:	4b85      	ldr	r3, [pc, #532]	@ (80040f8 <HAL_UART_IRQHandler+0x298>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 810a 	beq.w	8004100 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d011      	beq.n	8003f1c <HAL_UART_IRQHandler+0xbc>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d011      	beq.n	8003f4c <HAL_UART_IRQHandler+0xec>
 8003f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <HAL_UART_IRQHandler+0x11c>
 8003f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f72:	f043 0202 	orr.w	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d017      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fae:	f043 0208 	orr.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <HAL_UART_IRQHandler+0x18a>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00c      	beq.n	8003fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8211 	beq.w	8004418 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004032:	2b40      	cmp	r3, #64	@ 0x40
 8004034:	d005      	beq.n	8004042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04f      	beq.n	80040e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fde6 	bl	8004c14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d141      	bne.n	80040da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800406c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800408e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1d9      	bne.n	8004056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ae:	4a13      	ldr	r2, [pc, #76]	@ (80040fc <HAL_UART_IRQHandler+0x29c>)
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd f9e6 	bl	8001488 <HAL_DMA_Abort_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040cc:	4610      	mov	r0, r2
 80040ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e00f      	b.n	80040f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9b4 	bl	8004440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00b      	b.n	80040f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9b0 	bl	8004440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e007      	b.n	80040f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9ac 	bl	8004440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80040f0:	e192      	b.n	8004418 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f2:	bf00      	nop
    return;
 80040f4:	e190      	b.n	8004418 <HAL_UART_IRQHandler+0x5b8>
 80040f6:	bf00      	nop
 80040f8:	04000120 	.word	0x04000120
 80040fc:	08004e0b 	.word	0x08004e0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 814b 	bne.w	80043a0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8144 	beq.w	80043a0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 813d 	beq.w	80043a0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2210      	movs	r2, #16
 800412c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	f040 80b5 	bne.w	80042a8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800414a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8164 	beq.w	800441c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800415a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800415e:	429a      	cmp	r2, r3
 8004160:	f080 815c 	bcs.w	800441c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b20      	cmp	r3, #32
 8004176:	f000 8086 	beq.w	8004286 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800418e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004196:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041a8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1da      	bne.n	800417a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3308      	adds	r3, #8
 80041ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e1      	bne.n	80041c4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004224:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004226:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800422a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004256:	f023 0310 	bic.w	r3, r3, #16
 800425a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004268:	65bb      	str	r3, [r7, #88]	@ 0x58
 800426a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800426e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e4      	bne.n	8004246 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd f8c8 	bl	8001416 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8d7 	bl	8004454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a6:	e0b9      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80ab 	beq.w	8004420 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80042ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a6 	beq.w	8004420 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e4      	bne.n	80042d4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	623b      	str	r3, [r7, #32]
   return(result);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800432e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	60fb      	str	r3, [r7, #12]
   return(result);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	617b      	str	r3, [r7, #20]
   return(result);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e4      	bne.n	8004356 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f85b 	bl	8004454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800439e:	e03f      	b.n	8004420 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00e      	beq.n	80043ca <HAL_UART_IRQHandler+0x56a>
 80043ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80043c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 ff09 	bl	80051da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043c8:	e02d      	b.n	8004426 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01c      	beq.n	8004424 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
    }
    return;
 80043f2:	e017      	b.n	8004424 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_UART_IRQHandler+0x5c6>
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fd12 	bl	8004e36 <UART_EndTransmit_IT>
    return;
 8004412:	e008      	b.n	8004426 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004414:	bf00      	nop
 8004416:	e006      	b.n	8004426 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004418:	bf00      	nop
 800441a:	e004      	b.n	8004426 <HAL_UART_IRQHandler+0x5c6>
      return;
 800441c:	bf00      	nop
 800441e:	e002      	b.n	8004426 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004420:	bf00      	nop
 8004422:	e000      	b.n	8004426 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004424:	bf00      	nop
  }

}
 8004426:	37e8      	adds	r7, #232	@ 0xe8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b8a      	ldr	r3, [pc, #552]	@ (80046c0 <UART_SetConfig+0x254>)
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a78      	ldr	r2, [pc, #480]	@ (80046c4 <UART_SetConfig+0x258>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d120      	bne.n	800452a <UART_SetConfig+0xbe>
 80044e8:	4b77      	ldr	r3, [pc, #476]	@ (80046c8 <UART_SetConfig+0x25c>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d817      	bhi.n	8004524 <UART_SetConfig+0xb8>
 80044f4:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <UART_SetConfig+0x90>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004519 	.word	0x08004519
 8004504:	0800451f 	.word	0x0800451f
 8004508:	08004513 	.word	0x08004513
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e01d      	b.n	800454e <UART_SetConfig+0xe2>
 8004512:	2302      	movs	r3, #2
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e01a      	b.n	800454e <UART_SetConfig+0xe2>
 8004518:	2304      	movs	r3, #4
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e017      	b.n	800454e <UART_SetConfig+0xe2>
 800451e:	2308      	movs	r3, #8
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e014      	b.n	800454e <UART_SetConfig+0xe2>
 8004524:	2310      	movs	r3, #16
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e011      	b.n	800454e <UART_SetConfig+0xe2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a67      	ldr	r2, [pc, #412]	@ (80046cc <UART_SetConfig+0x260>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d102      	bne.n	800453a <UART_SetConfig+0xce>
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e009      	b.n	800454e <UART_SetConfig+0xe2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a64      	ldr	r2, [pc, #400]	@ (80046d0 <UART_SetConfig+0x264>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d102      	bne.n	800454a <UART_SetConfig+0xde>
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e001      	b.n	800454e <UART_SetConfig+0xe2>
 800454a:	2310      	movs	r3, #16
 800454c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004556:	d15a      	bne.n	800460e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d827      	bhi.n	80045ae <UART_SetConfig+0x142>
 800455e:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <UART_SetConfig+0xf8>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fc82 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 800458c:	61b8      	str	r0, [r7, #24]
        break;
 800458e:	e013      	b.n	80045b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe fca0 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8004594:	61b8      	str	r0, [r7, #24]
        break;
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b4e      	ldr	r3, [pc, #312]	@ (80046d4 <UART_SetConfig+0x268>)
 800459a:	61bb      	str	r3, [r7, #24]
        break;
 800459c:	e00c      	b.n	80045b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe fc01 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 80045a2:	61b8      	str	r0, [r7, #24]
        break;
 80045a4:	e008      	b.n	80045b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045aa:	61bb      	str	r3, [r7, #24]
        break;
 80045ac:	e004      	b.n	80045b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	77bb      	strb	r3, [r7, #30]
        break;
 80045b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d074      	beq.n	80046a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	005a      	lsls	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d916      	bls.n	8004608 <UART_SetConfig+0x19c>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e0:	d212      	bcs.n	8004608 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f023 030f 	bic.w	r3, r3, #15
 80045ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	89fb      	ldrh	r3, [r7, #14]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	89fa      	ldrh	r2, [r7, #14]
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	e04f      	b.n	80046a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77bb      	strb	r3, [r7, #30]
 800460c:	e04c      	b.n	80046a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460e:	7ffb      	ldrb	r3, [r7, #31]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d828      	bhi.n	8004666 <UART_SetConfig+0x1fa>
 8004614:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <UART_SetConfig+0x1b0>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fc26 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004644:	61b8      	str	r0, [r7, #24]
        break;
 8004646:	e013      	b.n	8004670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe fc44 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 800464c:	61b8      	str	r0, [r7, #24]
        break;
 800464e:	e00f      	b.n	8004670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <UART_SetConfig+0x268>)
 8004652:	61bb      	str	r3, [r7, #24]
        break;
 8004654:	e00c      	b.n	8004670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fba5 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 800465a:	61b8      	str	r0, [r7, #24]
        break;
 800465c:	e008      	b.n	8004670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004662:	61bb      	str	r3, [r7, #24]
        break;
 8004664:	e004      	b.n	8004670 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	77bb      	strb	r3, [r7, #30]
        break;
 800466e:	bf00      	nop
    }

    if (pclk != 0U)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	085a      	lsrs	r2, r3, #1
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d909      	bls.n	80046a4 <UART_SetConfig+0x238>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004696:	d205      	bcs.n	80046a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	e001      	b.n	80046a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	efff69f3 	.word	0xefff69f3
 80046c4:	40013800 	.word	0x40013800
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40004400 	.word	0x40004400
 80046d0:	40004800 	.word	0x40004800
 80046d4:	007a1200 	.word	0x007a1200

080046d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01a      	beq.n	80047ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d6:	d10a      	bne.n	80047ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	605a      	str	r2, [r3, #4]
  }
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b098      	sub	sp, #96	@ 0x60
 8004820:	af02      	add	r7, sp, #8
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800482c:	f7fc f9c2 	bl	8000bb4 <HAL_GetTick>
 8004830:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d12e      	bne.n	800489e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004848:	2200      	movs	r2, #0
 800484a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f88c 	bl	800496c <UART_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d021      	beq.n	800489e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
 800487a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800487e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e062      	b.n	8004964 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d149      	bne.n	8004940 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f856 	bl	800496c <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03c      	beq.n	8004940 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	623b      	str	r3, [r7, #32]
   return(result);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	60fb      	str	r3, [r7, #12]
   return(result);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004918:	61fa      	str	r2, [r7, #28]
 800491a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	69b9      	ldr	r1, [r7, #24]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	617b      	str	r3, [r7, #20]
   return(result);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e011      	b.n	8004964 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3758      	adds	r7, #88	@ 0x58
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497c:	e049      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004984:	d045      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fc f915 	bl	8000bb4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <UART_WaitOnFlagUntilTimeout+0x30>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e048      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d031      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d110      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2208      	movs	r2, #8
 80049c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f925 	bl	8004c14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2208      	movs	r2, #8
 80049ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e029      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ec:	d111      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f90b 	bl	8004c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e00f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d0a6      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b097      	sub	sp, #92	@ 0x5c
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6e:	d10e      	bne.n	8004a8e <UART_Start_Receive_IT+0x52>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <UART_Start_Receive_IT+0x48>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a82:	e02d      	b.n	8004ae0 <UART_Start_Receive_IT+0xa4>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	22ff      	movs	r2, #255	@ 0xff
 8004a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a8c:	e028      	b.n	8004ae0 <UART_Start_Receive_IT+0xa4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <UART_Start_Receive_IT+0x76>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <UART_Start_Receive_IT+0x6c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	@ 0xff
 8004aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aa6:	e01b      	b.n	8004ae0 <UART_Start_Receive_IT+0xa4>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	227f      	movs	r2, #127	@ 0x7f
 8004aac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ab0:	e016      	b.n	8004ae0 <UART_Start_Receive_IT+0xa4>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aba:	d10d      	bne.n	8004ad8 <UART_Start_Receive_IT+0x9c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <UART_Start_Receive_IT+0x92>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	227f      	movs	r2, #127	@ 0x7f
 8004ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004acc:	e008      	b.n	8004ae0 <UART_Start_Receive_IT+0xa4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	223f      	movs	r2, #63	@ 0x3f
 8004ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ad6:	e003      	b.n	8004ae0 <UART_Start_Receive_IT+0xa4>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2222      	movs	r2, #34	@ 0x22
 8004aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b10:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2c:	d107      	bne.n	8004b3e <UART_Start_Receive_IT+0x102>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a21      	ldr	r2, [pc, #132]	@ (8004bc0 <UART_Start_Receive_IT+0x184>)
 8004b3a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004b3c:	e002      	b.n	8004b44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a20      	ldr	r2, [pc, #128]	@ (8004bc4 <UART_Start_Receive_IT+0x188>)
 8004b42:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d019      	beq.n	8004b80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e6      	bne.n	8004b4c <UART_Start_Receive_IT+0x110>
 8004b7e:	e018      	b.n	8004bb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f043 0320 	orr.w	r3, r3, #32
 8004b94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e6      	bne.n	8004b80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	375c      	adds	r7, #92	@ 0x5c
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	08005033 	.word	0x08005033
 8004bc4:	08004e8b 	.word	0x08004e8b

08004bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004c08:	bf00      	nop
 8004c0a:	3724      	adds	r7, #36	@ 0x24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b095      	sub	sp, #84	@ 0x54
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e6      	bne.n	8004c1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3308      	adds	r3, #8
 8004c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d118      	bne.n	8004cbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e6      	bne.n	8004c8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cd0:	bf00      	nop
 8004cd2:	3754      	adds	r7, #84	@ 0x54
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b090      	sub	sp, #64	@ 0x40
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d037      	beq.n	8004d62 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	623b      	str	r3, [r7, #32]
   return(result);
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e6      	bne.n	8004d2e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d60:	e002      	b.n	8004d68 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8004d62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d64:	f7fb fa86 	bl	8000274 <HAL_UART_TxCpltCallback>
}
 8004d68:	bf00      	nop
 8004d6a:	3740      	adds	r7, #64	@ 0x40
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff fb54 	bl	800442c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b80      	cmp	r3, #128	@ 0x80
 8004db4:	d109      	bne.n	8004dca <UART_DMAError+0x3e>
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b21      	cmp	r3, #33	@ 0x21
 8004dba:	d106      	bne.n	8004dca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7ff feff 	bl	8004bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d109      	bne.n	8004dec <UART_DMAError+0x60>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b22      	cmp	r3, #34	@ 0x22
 8004ddc:	d106      	bne.n	8004dec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7ff ff14 	bl	8004c14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df2:	f043 0210 	orr.w	r2, r3, #16
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f7ff fb1f 	bl	8004440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff fb09 	bl	8004440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e6      	bne.n	8004e3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fb f9f9 	bl	8000274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b09c      	sub	sp, #112	@ 0x70
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e98:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea2:	2b22      	cmp	r3, #34	@ 0x22
 8004ea4:	f040 80b9 	bne.w	800501a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004eae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004eb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004eb6:	b2d9      	uxtb	r1, r3
 8004eb8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f040 809c 	bne.w	800502a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e6      	bne.n	8004ef2 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f44:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f46:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	623b      	str	r3, [r7, #32]
   return(result);
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d12e      	bne.n	8005012 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d103      	bne.n	8005002 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2210      	movs	r2, #16
 8005000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fa22 	bl	8004454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005010:	e00b      	b.n	800502a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fb f93e 	bl	8000294 <HAL_UART_RxCpltCallback>
}
 8005018:	e007      	b.n	800502a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0208 	orr.w	r2, r2, #8
 8005028:	619a      	str	r2, [r3, #24]
}
 800502a:	bf00      	nop
 800502c:	3770      	adds	r7, #112	@ 0x70
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b09c      	sub	sp, #112	@ 0x70
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005040:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800504a:	2b22      	cmp	r3, #34	@ 0x22
 800504c:	f040 80b9 	bne.w	80051c2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005056:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005060:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005064:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005068:	4013      	ands	r3, r2
 800506a:	b29a      	uxth	r2, r3
 800506c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800506e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	f040 809c 	bne.w	80051d2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80050be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80050c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d018      	beq.n	8005154 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005142:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005158:	2b01      	cmp	r3, #1
 800515a:	d12e      	bne.n	80051ba <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f023 0310 	bic.w	r3, r3, #16
 8005176:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6979      	ldr	r1, [r7, #20]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	613b      	str	r3, [r7, #16]
   return(result);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d103      	bne.n	80051aa <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff f94e 	bl	8004454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051b8:	e00b      	b.n	80051d2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb f86a 	bl	8000294 <HAL_UART_RxCpltCallback>
}
 80051c0:	e007      	b.n	80051d2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0208 	orr.w	r2, r2, #8
 80051d0:	619a      	str	r2, [r3, #24]
}
 80051d2:	bf00      	nop
 80051d4:	3770      	adds	r7, #112	@ 0x70
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <memset>:
 80051ee:	4402      	add	r2, r0
 80051f0:	4603      	mov	r3, r0
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d100      	bne.n	80051f8 <memset+0xa>
 80051f6:	4770      	bx	lr
 80051f8:	f803 1b01 	strb.w	r1, [r3], #1
 80051fc:	e7f9      	b.n	80051f2 <memset+0x4>
	...

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	@ (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	@ (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	@ (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	@ (8005244 <__libc_init_array+0x44>)
 8005214:	f000 f818 	bl	8005248 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	080052bc 	.word	0x080052bc
 800523c:	080052bc 	.word	0x080052bc
 8005240:	080052bc 	.word	0x080052bc
 8005244:	080052c0 	.word	0x080052c0

08005248 <_init>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr

08005254 <_fini>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr
