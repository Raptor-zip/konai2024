
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005660  08005660  00006660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056dc  080056dc  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  080056dc  080056dc  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056dc  080056dc  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056dc  080056dc  000066dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080056e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  2000001c  08005700  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08005700  000073d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001190b  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d7  00000000  00000000  00018957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b75  00000000  00000000  0001bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002154  00000000  00000000  0001c84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011986  00000000  00000000  0001e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a766c  00000000  00000000  00030327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000d79d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000db7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005648 	.word	0x08005648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08005648 	.word	0x08005648

080001c8 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2200      	movs	r2, #0
 80001e0:	639a      	str	r2, [r3, #56]	@ 0x38
	ecan->filter.FilterIdLow = 0;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2200      	movs	r2, #0
 80001e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2200      	movs	r2, #0
 80001ec:	641a      	str	r2, [r3, #64]	@ 0x40
	ecan->filter.FilterMaskIdLow = 0;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	2200      	movs	r2, #0
 80001f2:	645a      	str	r2, [r3, #68]	@ 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	649a      	str	r2, [r3, #72]	@ 0x48

	if (can_nuumber == 1)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d103      	bne.n	8000208 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000206:	e002      	b.n	800020e <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	220e      	movs	r2, #14
 800020c:	64da      	str	r2, [r3, #76]	@ 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2200      	movs	r2, #0
 8000212:	651a      	str	r2, [r3, #80]	@ 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2201      	movs	r2, #1
 8000218:	655a      	str	r2, [r3, #84]	@ 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2201      	movs	r2, #1
 800021e:	659a      	str	r2, [r3, #88]	@ 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	220e      	movs	r2, #14
 8000224:	65da      	str	r2, [r3, #92]	@ 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3338      	adds	r3, #56	@ 0x38
 800022e:	4619      	mov	r1, r3
 8000230:	4610      	mov	r0, r2
 8000232:	f000 fe48 	bl	8000ec6 <HAL_CAN_ConfigFilter>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <Easy_CAN6_Start+0x78>
		Error_Handler();
 800023c:	f000 face 	bl	80007dc <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f000 ff4b 	bl	80010e2 <HAL_CAN_ActivateNotification>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 8000252:	f000 fac3 	bl	80007dc <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fefd 	bl	800105a <HAL_CAN_Start>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 8000266:	f001 f87e 	bl	8001366 <HAL_NVIC_SystemReset>

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <HAL_UART_TxCpltCallback>:
  CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
  CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  huart2.gState = HAL_UART_STATE_READY;
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <HAL_UART_TxCpltCallback+0x1c>)
 800027e:	2220      	movs	r2, #32
 8000280:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200000ac 	.word	0x200000ac

08000294 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  flagRcved = TRUE; /* 受信完�?フラグ設�? */
 800029c:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <HAL_UART_RxCpltCallback+0x20>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 80002a2:	2108      	movs	r1, #8
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <HAL_UART_RxCpltCallback+0x24>)
 80002a6:	f001 fc07 	bl	8001ab8 <HAL_GPIO_TogglePin>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000224 	.word	0x20000224
 80002b8:	48000400 	.word	0x48000400

080002bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002bc:	b5b0      	push	{r4, r5, r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fc7b 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f8c9 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 fa3d 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ce:	f000 fa15 	bl	80006fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002d2:	f000 f9e3 	bl	800069c <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002d6:	f000 f91b 	bl	8000510 <MX_CAN_Init>
  MX_TIM1_Init();
 80002da:	f000 f94f 	bl	800057c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Easy_CAN6_Start(&ecan, &hcan, 2);
 80002de:	2202      	movs	r2, #2
 80002e0:	4951      	ldr	r1, [pc, #324]	@ (8000428 <main+0x16c>)
 80002e2:	4852      	ldr	r0, [pc, #328]	@ (800042c <main+0x170>)
 80002e4:	f7ff ff70 	bl	80001c8 <Easy_CAN6_Start>
  //		CyberGear_ResetMotor(&my_cyber[i]);
  //		CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
  //		CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
  //		CyberGear_EnableMotor(&my_cyber[i]);
  //	}
  HAL_Delay(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ec:	f000 fccc 	bl	8000c88 <HAL_Delay>

  HAL_UART_Transmit(&huart2, txBuff, sizeof(txBuff), 0xFFFF);
 80002f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002f4:	220e      	movs	r2, #14
 80002f6:	494e      	ldr	r1, [pc, #312]	@ (8000430 <main+0x174>)
 80002f8:	484e      	ldr	r0, [pc, #312]	@ (8000434 <main+0x178>)
 80002fa:	f003 fd4f 	bl	8003d9c <HAL_UART_Transmit>
  HAL_Delay(1000);
 80002fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000302:	f000 fcc1 	bl	8000c88 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, txBuff, sizeof(txBuff));
 8000306:	220e      	movs	r2, #14
 8000308:	4949      	ldr	r1, [pc, #292]	@ (8000430 <main+0x174>)
 800030a:	484a      	ldr	r0, [pc, #296]	@ (8000434 <main+0x178>)
 800030c:	f003 fdd0 	bl	8003eb0 <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000314:	f000 fcb8 	bl	8000c88 <HAL_Delay>

  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Boot NUCLEO\r\n", 13);
 8000318:	220d      	movs	r2, #13
 800031a:	4947      	ldr	r1, [pc, #284]	@ (8000438 <main+0x17c>)
 800031c:	4845      	ldr	r0, [pc, #276]	@ (8000434 <main+0x178>)
 800031e:	f003 fe69 	bl	8003ff4 <HAL_UART_Transmit_DMA>
  while (huart2.gState != HAL_UART_STATE_READY)
 8000322:	bf00      	nop
 8000324:	4b43      	ldr	r3, [pc, #268]	@ (8000434 <main+0x178>)
 8000326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000328:	2b20      	cmp	r3, #32
 800032a:	d1fb      	bne.n	8000324 <main+0x68>
  {
  }
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Type any key.\r\n", 14);
 800032c:	220e      	movs	r2, #14
 800032e:	4943      	ldr	r1, [pc, #268]	@ (800043c <main+0x180>)
 8000330:	4840      	ldr	r0, [pc, #256]	@ (8000434 <main+0x178>)
 8000332:	f003 fe5f 	bl	8003ff4 <HAL_UART_Transmit_DMA>
  while (huart2.gState != HAL_UART_STATE_READY)
 8000336:	bf00      	nop
 8000338:	4b3e      	ldr	r3, [pc, #248]	@ (8000434 <main+0x178>)
 800033a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800033c:	2b20      	cmp	r3, #32
 800033e:	d1fb      	bne.n	8000338 <main+0x7c>
  {
  }
  HAL_UART_Transmit_DMA(&huart2,
 8000340:	2221      	movs	r2, #33	@ 0x21
 8000342:	493f      	ldr	r1, [pc, #252]	@ (8000440 <main+0x184>)
 8000344:	483b      	ldr	r0, [pc, #236]	@ (8000434 <main+0x178>)
 8000346:	f003 fe55 	bl	8003ff4 <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 800034a:	2108      	movs	r1, #8
 800034c:	483d      	ldr	r0, [pc, #244]	@ (8000444 <main+0x188>)
 800034e:	f001 fbb3 	bl	8001ab8 <HAL_GPIO_TogglePin>

    do
    {
      /* 受信割り込み開�? */
      HAL_UART_Receive_IT(&huart2, rcvBuffer, 1);
 8000352:	2201      	movs	r2, #1
 8000354:	493c      	ldr	r1, [pc, #240]	@ (8000448 <main+0x18c>)
 8000356:	4837      	ldr	r0, [pc, #220]	@ (8000434 <main+0x178>)
 8000358:	f003 fe08 	bl	8003f6c <HAL_UART_Receive_IT>

      /* 受信割り込み終�?�?ち */
      while (flagRcved == FALSE)
 800035c:	bf00      	nop
 800035e:	4b3b      	ldr	r3, [pc, #236]	@ (800044c <main+0x190>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0fb      	beq.n	800035e <main+0xa2>
      {
        ;
      }

      sndBuffer[rcvLength] = rcvBuffer[0];
 8000366:	4b3a      	ldr	r3, [pc, #232]	@ (8000450 <main+0x194>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	4b36      	ldr	r3, [pc, #216]	@ (8000448 <main+0x18c>)
 800036e:	7819      	ldrb	r1, [r3, #0]
 8000370:	4b38      	ldr	r3, [pc, #224]	@ (8000454 <main+0x198>)
 8000372:	5499      	strb	r1, [r3, r2]
      rcvLength++;
 8000374:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <main+0x194>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b34      	ldr	r3, [pc, #208]	@ (8000450 <main+0x194>)
 800037e:	801a      	strh	r2, [r3, #0]
      flagRcved = FALSE;
 8000380:	4b32      	ldr	r3, [pc, #200]	@ (800044c <main+0x190>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
    } while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 8000386:	4b30      	ldr	r3, [pc, #192]	@ (8000448 <main+0x18c>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b0d      	cmp	r3, #13
 800038c:	d003      	beq.n	8000396 <main+0xda>
 800038e:	4b30      	ldr	r3, [pc, #192]	@ (8000450 <main+0x194>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	2bc7      	cmp	r3, #199	@ 0xc7
 8000394:	d9dd      	bls.n	8000352 <main+0x96>

        // 受信したデータから\rを削除する
    for (int i = 0; i < rcvLength; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
 800039a:	e012      	b.n	80003c2 <main+0x106>
        if (sndBuffer[i] == CHAR_CR) {
 800039c:	4a2d      	ldr	r2, [pc, #180]	@ (8000454 <main+0x198>)
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b0d      	cmp	r3, #13
 80003a6:	d109      	bne.n	80003bc <main+0x100>
            sndBuffer[i] = '\0'; // \rをヌル文字で置き換える
 80003a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000454 <main+0x198>)
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	4413      	add	r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
            rcvLength = i; // 新しい長さを設定
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	4b26      	ldr	r3, [pc, #152]	@ (8000450 <main+0x194>)
 80003b8:	801a      	strh	r2, [r3, #0]
            break;
 80003ba:	e008      	b.n	80003ce <main+0x112>
    for (int i = 0; i < rcvLength; i++) {
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	3301      	adds	r3, #1
 80003c0:	61fb      	str	r3, [r7, #28]
 80003c2:	4b23      	ldr	r3, [pc, #140]	@ (8000450 <main+0x194>)
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	4293      	cmp	r3, r2
 80003cc:	dbe6      	blt.n	800039c <main+0xe0>
    // HAL_UART_Transmit_IT(&huart2, sndBuffer, rcvLength);
//    HAL_UART_Transmit(&huart2, sndBuffer, rcvLength, 1);

    // unsigned char buf[17];
    unsigned char buf[17];
    memcpy(buf, sndBuffer, sizeof(buf));
 80003ce:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <main+0x198>)
 80003d0:	1d3c      	adds	r4, r7, #4
 80003d2:	461d      	mov	r5, r3
 80003d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d8:	682b      	ldr	r3, [r5, #0]
 80003da:	7023      	strb	r3, [r4, #0]

    // 2バイトずつのint16配列を作成する
     for (int i = 0; i < sizeof(buf) / sizeof(buf[0]) / 2; i++) {
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
 80003e0:	e018      	b.n	8000414 <main+0x158>
       // データをバイト列から変数にアンパック
       data[i] = (buf[i * 2] << 8) | buf[i * 2 + 1];
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	3320      	adds	r3, #32
 80003e8:	443b      	add	r3, r7
 80003ea:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80003ee:	021b      	lsls	r3, r3, #8
 80003f0:	b21a      	sxth	r2, r3
 80003f2:	69bb      	ldr	r3, [r7, #24]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	3301      	adds	r3, #1
 80003f8:	3320      	adds	r3, #32
 80003fa:	443b      	add	r3, r7
 80003fc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000400:	b21b      	sxth	r3, r3
 8000402:	4313      	orrs	r3, r2
 8000404:	b219      	sxth	r1, r3
 8000406:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <main+0x19c>)
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
     for (int i = 0; i < sizeof(buf) / sizeof(buf[0]) / 2; i++) {
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	3301      	adds	r3, #1
 8000412:	61bb      	str	r3, [r7, #24]
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d9e3      	bls.n	80003e2 <main+0x126>
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

    rcvLength = 0;
 800041a:	4b0d      	ldr	r3, [pc, #52]	@ (8000450 <main+0x194>)
 800041c:	2200      	movs	r2, #0
 800041e:	801a      	strh	r2, [r3, #0]
    //		char send_str[byte_number];
    //		sprintf(send_str, "%d\n", _temp); // _tempを文字�???��?��に変換して改行コードを追??��?��?
    //
    //		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) send_str, strlen(send_str));
    //
    HAL_Delay(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fc31 	bl	8000c88 <HAL_Delay>
  {
 8000426:	e790      	b.n	800034a <main+0x8e>
 8000428:	20000038 	.word	0x20000038
 800042c:	200001bc 	.word	0x200001bc
 8000430:	20000000 	.word	0x20000000
 8000434:	200000ac 	.word	0x200000ac
 8000438:	08005660 	.word	0x08005660
 800043c:	08005670 	.word	0x08005670
 8000440:	08005680 	.word	0x08005680
 8000444:	48000400 	.word	0x48000400
 8000448:	20000228 	.word	0x20000228
 800044c:	20000224 	.word	0x20000224
 8000450:	20000226 	.word	0x20000226
 8000454:	200002f0 	.word	0x200002f0
 8000458:	200003b8 	.word	0x200003b8

0800045c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b096      	sub	sp, #88	@ 0x58
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	2228      	movs	r2, #40	@ 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f005 f8c0 	bl	80055f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	2302      	movs	r3, #2
 8000492:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2310      	movs	r3, #16
 800049a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049c:	2302      	movs	r3, #2
 800049e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a0:	2300      	movs	r3, #0
 80004a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80004a4:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80004a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fb1c 	bl	8001aec <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x62>
  {
    Error_Handler();
 80004ba:	f000 f98f 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80004be:	230f      	movs	r3, #15
 80004c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2302      	movs	r3, #2
 80004c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d4:	f107 031c 	add.w	r3, r7, #28
 80004d8:	2102      	movs	r1, #2
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fb44 	bl	8002b68 <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004e6:	f000 f979 	bl	80007dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80004ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fd6c 	bl	8002fd4 <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000502:	f000 f96b 	bl	80007dc <Error_Handler>
  }
}
 8000506:	bf00      	nop
 8000508:	3758      	adds	r7, #88	@ 0x58
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <MX_CAN_Init+0x64>)
 8000516:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <MX_CAN_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <MX_CAN_Init+0x64>)
 800051c:	2202      	movs	r2, #2
 800051e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <MX_CAN_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_CAN_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_CAN_Init+0x64>)
 800052e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000532:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_CAN_Init+0x64>)
 8000536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800053a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <MX_CAN_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_CAN_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <MX_CAN_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_CAN_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <MX_CAN_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_CAN_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <MX_CAN_Init+0x64>)
 8000562:	f000 fbb5 	bl	8000cd0 <HAL_CAN_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800056c:	f000 f936 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000038 	.word	0x20000038
 8000578:	40006400 	.word	0x40006400

0800057c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000582:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	222c      	movs	r2, #44	@ 0x2c
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 f821 	bl	80055f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ae:	4b39      	ldr	r3, [pc, #228]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005b0:	4a39      	ldr	r2, [pc, #228]	@ (8000698 <MX_TIM1_Init+0x11c>)
 80005b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005b4:	4b37      	ldr	r3, [pc, #220]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b36      	ldr	r3, [pc, #216]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005c0:	4b34      	ldr	r3, [pc, #208]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b32      	ldr	r3, [pc, #200]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ce:	4b31      	ldr	r3, [pc, #196]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005da:	482e      	ldr	r0, [pc, #184]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005dc:	f002 fe20 	bl	8003220 <HAL_TIM_PWM_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 f8f9 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ea:	2300      	movs	r3, #0
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005fa:	4619      	mov	r1, r3
 80005fc:	4825      	ldr	r0, [pc, #148]	@ (8000694 <MX_TIM1_Init+0x118>)
 80005fe:	f003 fa99 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 f8e8 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060c:	2360      	movs	r3, #96	@ 0x60
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000628:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800062c:	2200      	movs	r2, #0
 800062e:	4619      	mov	r1, r3
 8000630:	4818      	ldr	r0, [pc, #96]	@ (8000694 <MX_TIM1_Init+0x118>)
 8000632:	f002 fe4d 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800063c:	f000 f8ce 	bl	80007dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000658:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4807      	ldr	r0, [pc, #28]	@ (8000694 <MX_TIM1_Init+0x118>)
 8000676:	f003 facb 	bl	8003c10 <HAL_TIMEx_ConfigBreakDeadTime>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000680:	f000 f8ac 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <MX_TIM1_Init+0x118>)
 8000686:	f000 f937 	bl	80008f8 <HAL_TIM_MspPostInit>
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	@ 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000060 	.word	0x20000060
 8000698:	40012c00 	.word	0x40012c00

0800069c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006a8:	4a13      	ldr	r2, [pc, #76]	@ (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006aa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006c0:	220c      	movs	r2, #12
 80006c2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_USART2_UART_Init+0x54>)
 80006de:	f003 fb0f 	bl	8003d00 <HAL_UART_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80006e8:	f000 f878 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000ac 	.word	0x200000ac
 80006f4:	40004400 	.word	0x40004400
 80006f8:	0007a120 	.word	0x0007a120

080006fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_DMA_Init+0x48>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <MX_DMA_Init+0x48>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <MX_DMA_Init+0x48>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2010      	movs	r0, #16
 8000720:	f000 fdf7 	bl	8001312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000724:	2010      	movs	r0, #16
 8000726:	f000 fe10 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2011      	movs	r0, #17
 8000730:	f000 fdef 	bl	8001312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000734:	2011      	movs	r0, #17
 8000736:	f000 fe08 	bl	800134a <HAL_NVIC_EnableIRQ>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a1c      	ldr	r2, [pc, #112]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <MX_GPIO_Init+0x90>)
 80007ac:	f001 f96c 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILDIN_LED_Pin */
  GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 80007b0:	2308      	movs	r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_GPIO_Init+0x90>)
 80007c8:	f000 ffec 	bl	80017a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000400 	.word	0x48000400

080007dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x44>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_MspInit+0x44>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <HAL_MspInit+0x44>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_MspInit+0x44>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <HAL_CAN_MspInit+0x80>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d129      	bne.n	80008a6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_CAN_MspInit+0x84>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_CAN_MspInit+0x84>)
 8000858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_CAN_MspInit+0x84>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_CAN_MspInit+0x84>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <HAL_CAN_MspInit+0x84>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_CAN_MspInit+0x84>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000882:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000894:	2309      	movs	r3, #9
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f000 ff7f 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40006400 	.word	0x40006400
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_TIM_PWM_MspInit+0x38>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d10b      	bne.n	80008e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a09      	ldr	r2, [pc, #36]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <HAL_TIM_MspPostInit+0x68>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d11d      	bne.n	8000956 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_TIM_MspPostInit+0x6c>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <HAL_TIM_MspPostInit+0x6c>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_TIM_MspPostInit+0x6c>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000936:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000944:	2306      	movs	r3, #6
 8000946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f000 ff27 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40012c00 	.word	0x40012c00
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a42      	ldr	r2, [pc, #264]	@ (8000a90 <HAL_UART_MspInit+0x128>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d17d      	bne.n	8000a86 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	4b42      	ldr	r3, [pc, #264]	@ (8000a94 <HAL_UART_MspInit+0x12c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a41      	ldr	r2, [pc, #260]	@ (8000a94 <HAL_UART_MspInit+0x12c>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <HAL_UART_MspInit+0x12c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <HAL_UART_MspInit+0x12c>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a3b      	ldr	r2, [pc, #236]	@ (8000a94 <HAL_UART_MspInit+0x12c>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <HAL_UART_MspInit+0x12c>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009ba:	f248 0304 	movw	r3, #32772	@ 0x8004
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009cc:	2307      	movs	r3, #7
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009da:	f000 fee3 	bl	80017a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009de:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 80009e0:	4a2e      	ldr	r2, [pc, #184]	@ (8000a9c <HAL_UART_MspInit+0x134>)
 80009e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 80009e6:	2210      	movs	r2, #16
 80009e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009f0:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 80009f2:	2280      	movs	r2, #128	@ 0x80
 80009f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f6:	4b28      	ldr	r3, [pc, #160]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fc:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a02:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a08:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a0e:	4822      	ldr	r0, [pc, #136]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 8000a10:	f000 fcb9 	bl	8001386 <HAL_DMA_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000a1a:	f7ff fedf 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 8000a22:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a24:	4a1c      	ldr	r2, [pc, #112]	@ (8000a98 <HAL_UART_MspInit+0x130>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <HAL_UART_MspInit+0x13c>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a50:	2220      	movs	r2, #32
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a5a:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a5c:	f000 fc93 	bl	8001386 <HAL_DMA_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000a66:	f7ff feb9 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a6e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a70:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa0 <HAL_UART_MspInit+0x138>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2026      	movs	r0, #38	@ 0x26
 8000a7c:	f000 fc49 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a80:	2026      	movs	r0, #38	@ 0x26
 8000a82:	f000 fc62 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	20000134 	.word	0x20000134
 8000a9c:	40020080 	.word	0x40020080
 8000aa0:	20000178 	.word	0x20000178
 8000aa4:	4002006c 	.word	0x4002006c

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8a3 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <DMA1_Channel6_IRQHandler+0x10>)
 8000b0e:	f000 fd57 	bl	80015c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000178 	.word	0x20000178

08000b1c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <DMA1_Channel7_IRQHandler+0x10>)
 8000b22:	f000 fd4d 	bl	80015c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000134 	.word	0x20000134

08000b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <USART2_IRQHandler+0x10>)
 8000b36:	f003 fad9 	bl	80040ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000ac 	.word	0x200000ac

08000b44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopForever+0x2>
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopForever+0x6>)
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopForever+0xa>)
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopForever+0xe>)
 8000b76:	2300      	movs	r3, #0
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:
 8000b7a:	58d4      	ldr	r4, [r2, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:
 8000b80:	18c4      	adds	r4, r0, r3
 8000b82:	428c      	cmp	r4, r1
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopForever+0x12>)
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopForever+0x16>)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:
 8000b92:	42a2      	cmp	r2, r4
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>
 8000b96:	f004 fd33 	bl	8005600 <__libc_init_array>
 8000b9a:	f7ff fb8f 	bl	80002bc <main>

08000b9e <LoopForever>:
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
 8000ba0:	20003000 	.word	0x20003000
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	2000001c 	.word	0x2000001c
 8000bac:	080056e4 	.word	0x080056e4
 8000bb0:	2000001c 	.word	0x2000001c
 8000bb4:	200003d0 	.word	0x200003d0

08000bb8 <ADC1_2_IRQHandler>:
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 fb95 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe06 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fbb1 	bl	800136e <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c24:	f000 fb75 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	20000018 	.word	0x20000018
 8000c44:	20000014 	.word	0x20000014

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000018 	.word	0x20000018
 8000c6c:	200003cc 	.word	0x200003cc

08000c70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200003cc 	.word	0x200003cc

08000c88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000018 	.word	0x20000018

08000cd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0ed      	b.n	8000ebe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fd9e 	bl	8000830 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0201 	orr.w	r2, r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff ffb4 	bl	8000c70 <HAL_GetTick>
 8000d08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d0a:	e012      	b.n	8000d32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d0c:	f7ff ffb0 	bl	8000c70 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b0a      	cmp	r3, #10
 8000d18:	d90b      	bls.n	8000d32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2205      	movs	r2, #5
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e0c5      	b.n	8000ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0e5      	beq.n	8000d0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0202 	bic.w	r2, r2, #2
 8000d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d50:	f7ff ff8e 	bl	8000c70 <HAL_GetTick>
 8000d54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d56:	e012      	b.n	8000d7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d58:	f7ff ff8a 	bl	8000c70 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b0a      	cmp	r3, #10
 8000d64:	d90b      	bls.n	8000d7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2205      	movs	r2, #5
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e09f      	b.n	8000ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1e5      	bne.n	8000d58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7e1b      	ldrb	r3, [r3, #24]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d108      	bne.n	8000da6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7e5b      	ldrb	r3, [r3, #25]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d108      	bne.n	8000dd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7e9b      	ldrb	r3, [r3, #26]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0220 	orr.w	r2, r2, #32
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0220 	bic.w	r2, r2, #32
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7edb      	ldrb	r3, [r3, #27]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0210 	bic.w	r2, r2, #16
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e007      	b.n	8000e34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0210 	orr.w	r2, r2, #16
 8000e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7f1b      	ldrb	r3, [r3, #28]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d108      	bne.n	8000e4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0208 	orr.w	r2, r2, #8
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e007      	b.n	8000e5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0208 	bic.w	r2, r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7f5b      	ldrb	r3, [r3, #29]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d108      	bne.n	8000e78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0204 	orr.w	r2, r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0204 	bic.w	r2, r2, #4
 8000e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	ea42 0103 	orr.w	r1, r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b087      	sub	sp, #28
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000edc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ede:	7cfb      	ldrb	r3, [r7, #19]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d003      	beq.n	8000eec <HAL_CAN_ConfigFilter+0x26>
 8000ee4:	7cfb      	ldrb	r3, [r7, #19]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	f040 80aa 	bne.w	8001040 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	f003 031f 	and.w	r3, r3, #31
 8000f04:	2201      	movs	r2, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d123      	bne.n	8000f6e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3248      	adds	r2, #72	@ 0x48
 8000f4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f64:	6979      	ldr	r1, [r7, #20]
 8000f66:	3348      	adds	r3, #72	@ 0x48
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d122      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3248      	adds	r2, #72	@ 0x48
 8000f9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fb2:	6979      	ldr	r1, [r7, #20]
 8000fb4:	3348      	adds	r3, #72	@ 0x48
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d109      	bne.n	8000fd8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000fd6:	e007      	b.n	8000fe8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001002:	e007      	b.n	8001014 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d107      	bne.n	800102c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	431a      	orrs	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001032:	f023 0201 	bic.w	r2, r3, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e006      	b.n	800104e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001044:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d12e      	bne.n	80010cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001086:	f7ff fdf3 	bl	8000c70 <HAL_GetTick>
 800108a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800108c:	e012      	b.n	80010b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800108e:	f7ff fdef 	bl	8000c70 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d90b      	bls.n	80010b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2205      	movs	r2, #5
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e012      	b.n	80010da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1e5      	bne.n	800108e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e006      	b.n	80010da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
  }
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d002      	beq.n	8001100 <HAL_CAN_ActivateNotification+0x1e>
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d109      	bne.n	8001114 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6959      	ldr	r1, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	e006      	b.n	8001122 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
  }
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
}
 8001294:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <__NVIC_SystemReset+0x24>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800129e:	4904      	ldr	r1, [pc, #16]	@ (80012b0 <__NVIC_SystemReset+0x24>)
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <__NVIC_SystemReset+0x28>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012a6:	f3bf 8f4f 	dsb	sy
}
 80012aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <__NVIC_SystemReset+0x20>
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	05fa0004 	.word	0x05fa0004

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012dc:	f7ff ff78 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff13 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff28 	bl	8001178 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff78 	bl	8001224 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff47 	bl	80011d0 <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff1b 	bl	8001194 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800136a:	f7ff ff8f 	bl	800128c <__NVIC_SystemReset>

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff9e 	bl	80012b8 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e037      	b.n	800140c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f9b8 	bl	8001764 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}  
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Start_IT+0x20>
 8001430:	2302      	movs	r3, #2
 8001432:	e04a      	b.n	80014ca <HAL_DMA_Start_IT+0xb6>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001442:	2b01      	cmp	r3, #1
 8001444:	d13a      	bne.n	80014bc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2202      	movs	r2, #2
 800144a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f94b 	bl	8001706 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 020e 	orr.w	r2, r2, #14
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e00f      	b.n	80014aa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 020a 	orr.w	r2, r2, #10
 8001498:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e005      	b.n	80014c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80014c4:	2302      	movs	r3, #2
 80014c6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d008      	beq.n	80014f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2204      	movs	r2, #4
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e020      	b.n	8001538 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 020e 	bic.w	r2, r2, #14
 8001504:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001556:	2b02      	cmp	r3, #2
 8001558:	d005      	beq.n	8001566 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2204      	movs	r2, #4
 800155e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e027      	b.n	80015b6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 020e 	bic.w	r2, r2, #14
 8001574:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f202 	lsl.w	r2, r1, r2
 8001594:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	4798      	blx	r3
    } 
  }
  return status;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	2204      	movs	r2, #4
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d024      	beq.n	8001632 <HAL_DMA_IRQHandler+0x72>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01f      	beq.n	8001632 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d107      	bne.n	8001610 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001618:	2104      	movs	r1, #4
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06a      	beq.n	80016fe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001630:	e065      	b.n	80016fe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	2202      	movs	r2, #2
 8001638:	409a      	lsls	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d02c      	beq.n	800169c <HAL_DMA_IRQHandler+0xdc>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d027      	beq.n	800169c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10b      	bne.n	8001672 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 020a 	bic.w	r2, r2, #10
 8001668:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	d035      	beq.n	80016fe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800169a:	e030      	b.n	80016fe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	2208      	movs	r2, #8
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d028      	beq.n	80016fe <HAL_DMA_IRQHandler+0x13e>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d023      	beq.n	80016fe <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 020e 	bic.w	r2, r2, #14
 80016c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    }
  }
}  
 80016fc:	e7ff      	b.n	80016fe <HAL_DMA_IRQHandler+0x13e>
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b10      	cmp	r3, #16
 8001732:	d108      	bne.n	8001746 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001744:	e007      	b.n	8001756 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	60da      	str	r2, [r3, #12]
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <DMA_CalcBaseAndBitshift+0x34>)
 8001774:	4413      	add	r3, r2
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <DMA_CalcBaseAndBitshift+0x38>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a06      	ldr	r2, [pc, #24]	@ (80017a0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001788:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	bffdfff8 	.word	0xbffdfff8
 800179c:	cccccccd 	.word	0xcccccccd
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e14e      	b.n	8001a52 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8140 	beq.w	8001a4c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d005      	beq.n	80017e4 <HAL_GPIO_Init+0x40>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b03      	cmp	r3, #3
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d123      	bne.n	80018d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	6939      	ldr	r1, [r7, #16]
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 809a 	beq.w	8001a4c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <HAL_GPIO_Init+0x2cc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a54      	ldr	r2, [pc, #336]	@ (8001a70 <HAL_GPIO_Init+0x2cc>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b52      	ldr	r3, [pc, #328]	@ (8001a70 <HAL_GPIO_Init+0x2cc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001930:	4a50      	ldr	r2, [pc, #320]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800195a:	d013      	beq.n	8001984 <HAL_GPIO_Init+0x1e0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a46      	ldr	r2, [pc, #280]	@ (8001a78 <HAL_GPIO_Init+0x2d4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1dc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a45      	ldr	r2, [pc, #276]	@ (8001a7c <HAL_GPIO_Init+0x2d8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1d8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a44      	ldr	r2, [pc, #272]	@ (8001a80 <HAL_GPIO_Init+0x2dc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1d4>
 8001974:	2303      	movs	r3, #3
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 8001978:	2305      	movs	r3, #5
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 8001984:	2300      	movs	r3, #0
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001996:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a4:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019f2:	4a24      	ldr	r2, [pc, #144]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f8:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a46:	4a0f      	ldr	r2, [pc, #60]	@ (8001a84 <HAL_GPIO_Init+0x2e0>)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f aea9 	bne.w	80017b4 <HAL_GPIO_Init+0x10>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43d9      	mvns	r1, r3
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	400b      	ands	r3, r1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f001 b823 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 817d 	beq.w	8001e22 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b28:	4bbc      	ldr	r3, [pc, #752]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b34:	4bb9      	ldr	r3, [pc, #740]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d15c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x10e>
 8001b40:	4bb6      	ldr	r3, [pc, #728]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4c:	d155      	bne.n	8001bfa <HAL_RCC_OscConfig+0x10e>
 8001b4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_OscConfig+0x94>
 8001b7a:	4ba8      	ldr	r3, [pc, #672]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e015      	b.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001b80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b84:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b98:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bb0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001bb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bc0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 811f 	beq.w	8001e20 <HAL_RCC_OscConfig+0x334>
 8001be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 8116 	bne.w	8001e20 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f000 bfaf 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12e>
 8001c0c:	4b83      	ldr	r3, [pc, #524]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a82      	ldr	r2, [pc, #520]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x158>
 8001c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a78      	ldr	r2, [pc, #480]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e021      	b.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x184>
 8001c56:	4b71      	ldr	r3, [pc, #452]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a70      	ldr	r2, [pc, #448]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6e      	ldr	r3, [pc, #440]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6d      	ldr	r2, [pc, #436]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c70:	4b6a      	ldr	r3, [pc, #424]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a69      	ldr	r2, [pc, #420]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b67      	ldr	r3, [pc, #412]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a66      	ldr	r2, [pc, #408]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c88:	4b64      	ldr	r3, [pc, #400]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	f023 020f 	bic.w	r2, r3, #15
 8001c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	495f      	ldr	r1, [pc, #380]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d059      	beq.n	8001d66 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe ffdd 	bl	8000c70 <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7fe ffd8 	bl	8000c70 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	@ 0x64
 8001cca:	d902      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f000 bf43 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 8001cd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001ce6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x218>
 8001cfe:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e015      	b.n	8001d30 <HAL_RCC_OscConfig+0x244>
 8001d04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d08:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d1c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d20:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d34:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d38:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d44:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f002 021f 	and.w	r2, r2, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ab      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1d0>
 8001d64:	e05d      	b.n	8001e22 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe ff83 	bl	8000c70 <HAL_GetTick>
 8001d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d70:	f7fe ff7e 	bl	8000c70 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	@ 0x64
 8001d7e:	d902      	bls.n	8001d86 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f000 bee9 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 8001d86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d8a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2cc>
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x2f8>
 8001db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dbc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dd4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001dec:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001df0:	fa92 f2a2 	rbit	r2, r2
 8001df4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001df8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f002 021f 	and.w	r2, r2, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ab      	bne.n	8001d70 <HAL_RCC_OscConfig+0x284>
 8001e18:	e003      	b.n	8001e22 <HAL_RCC_OscConfig+0x336>
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 817d 	beq.w	8002132 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e38:	4ba6      	ldr	r3, [pc, #664]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e44:	4ba3      	ldr	r3, [pc, #652]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d172      	bne.n	8001f36 <HAL_RCC_OscConfig+0x44a>
 8001e50:	4ba0      	ldr	r3, [pc, #640]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d16c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x44a>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3a0>
 8001e86:	4b93      	ldr	r3, [pc, #588]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e013      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c8>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ea4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001eb0:	4b88      	ldr	r3, [pc, #544]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001eba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ec6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCC_OscConfig+0x410>
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f000 be2e 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b75      	ldr	r3, [pc, #468]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	21f8      	movs	r1, #248	@ 0xf8
 8001f12:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f1a:	fa91 f1a1 	rbit	r1, r1
 8001f1e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f22:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f26:	fab1 f181 	clz	r1, r1
 8001f2a:	b2c9      	uxtb	r1, r1
 8001f2c:	408b      	lsls	r3, r1
 8001f2e:	4969      	ldr	r1, [pc, #420]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f34:	e0fd      	b.n	8002132 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8088 	beq.w	8002058 <HAL_RCC_OscConfig+0x56c>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2301      	movs	r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe7c 	bl	8000c70 <HAL_GetTick>
 8001f78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fe77 	bl	8000c70 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f000 bde2 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001fa6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4d8>
 8001fbe:	4b45      	ldr	r3, [pc, #276]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x500>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ff2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ffe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0af      	beq.n	8001f7e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	21f8      	movs	r1, #248	@ 0xf8
 8002034:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800203c:	fa91 f1a1 	rbit	r1, r1
 8002040:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002044:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002048:	fab1 f181 	clz	r1, r1
 800204c:	b2c9      	uxtb	r1, r1
 800204e:	408b      	lsls	r3, r1
 8002050:	4920      	ldr	r1, [pc, #128]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
 8002056:	e06c      	b.n	8002132 <HAL_RCC_OscConfig+0x646>
 8002058:	2301      	movs	r3, #1
 800205a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800206a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002078:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	461a      	mov	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fdf4 	bl	8000c70 <HAL_GetTick>
 8002088:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe fdef 	bl	8000c70 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d902      	bls.n	80020a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	f000 bd5a 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80020b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d104      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5ec>
 80020ce:	4b01      	ldr	r3, [pc, #4]	@ (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e015      	b.n	8002100 <HAL_RCC_OscConfig+0x614>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020fc:	4bc8      	ldr	r3, [pc, #800]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	2202      	movs	r2, #2
 8002102:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002106:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002112:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f002 021f 	and.w	r2, r2, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ad      	bne.n	800208e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8110 	beq.w	8002368 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d079      	beq.n	800224c <HAL_RCC_OscConfig+0x760>
 8002158:	2301      	movs	r3, #1
 800215a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800216a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4bab      	ldr	r3, [pc, #684]	@ (8002424 <HAL_RCC_OscConfig+0x938>)
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	461a      	mov	r2, r3
 800217e:	2301      	movs	r3, #1
 8002180:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7fe fd75 	bl	8000c70 <HAL_GetTick>
 8002186:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fd70 	bl	8000c70 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d902      	bls.n	80021a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	f000 bcdb 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021e0:	2202      	movs	r2, #2
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fc:	4b88      	ldr	r3, [pc, #544]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 80021fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002204:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002208:	2102      	movs	r1, #2
 800220a:	6019      	str	r1, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f1a3 	rbit	r1, r3
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002222:	6019      	str	r1, [r3, #0]
  return result;
 8002224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002228:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0a0      	beq.n	800218c <HAL_RCC_OscConfig+0x6a0>
 800224a:	e08d      	b.n	8002368 <HAL_RCC_OscConfig+0x87c>
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800226e:	601a      	str	r2, [r3, #0]
  return result;
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002278:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4b68      	ldr	r3, [pc, #416]	@ (8002424 <HAL_RCC_OscConfig+0x938>)
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	461a      	mov	r2, r3
 800228a:	2300      	movs	r3, #0
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fcef 	bl	8000c70 <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe fcea 	bl	8000c70 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d902      	bls.n	80022ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	f000 bc55 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022da:	2202      	movs	r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022fe:	2202      	movs	r2, #2
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002318:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231a:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 800231c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002326:	2102      	movs	r1, #2
 8002328:	6019      	str	r1, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f1a3 	rbit	r1, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002340:	6019      	str	r1, [r3, #0]
  return result;
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d197      	bne.n	8002298 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 81a1 	beq.w	80026c0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002384:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a22      	ldr	r2, [pc, #136]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
 800239c:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11a      	bne.n	8002400 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fc4b 	bl	8000c70 <HAL_GetTick>
 80023da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	e009      	b.n	80023f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fc46 	bl	8000c70 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	@ 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e3b1      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10d      	bne.n	800242c <HAL_RCC_OscConfig+0x940>
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a02      	ldr	r2, [pc, #8]	@ (8002420 <HAL_RCC_OscConfig+0x934>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e03c      	b.n	8002498 <HAL_RCC_OscConfig+0x9ac>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	10908120 	.word	0x10908120
 8002428:	40007000 	.word	0x40007000
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x96a>
 800243c:	4bc1      	ldr	r3, [pc, #772]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4ac0      	ldr	r2, [pc, #768]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4bbe      	ldr	r3, [pc, #760]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4abd      	ldr	r2, [pc, #756]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e020      	b.n	8002498 <HAL_RCC_OscConfig+0x9ac>
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x994>
 8002466:	4bb7      	ldr	r3, [pc, #732]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4ab6      	ldr	r2, [pc, #728]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	4bb4      	ldr	r3, [pc, #720]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4ab3      	ldr	r2, [pc, #716]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x9ac>
 8002480:	4bb0      	ldr	r3, [pc, #704]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4aaf      	ldr	r2, [pc, #700]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4bad      	ldr	r3, [pc, #692]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4aac      	ldr	r2, [pc, #688]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8081 	beq.w	80025ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fbe1 	bl	8000c70 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fbdc 	bl	8000c70 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e345      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002512:	601a      	str	r2, [r3, #0]
  return result;
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800251c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0xa4c>
 8002532:	4b84      	ldr	r3, [pc, #528]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	e013      	b.n	8002560 <HAL_RCC_OscConfig+0xa74>
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002556:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002564:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002568:	2102      	movs	r1, #2
 800256a:	6011      	str	r1, [r2, #0]
 800256c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002570:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fa92 f1a2 	rbit	r1, r2
 800257a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800257e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002582:	6011      	str	r1, [r2, #0]
  return result;
 8002584:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002588:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d084      	beq.n	80024b4 <HAL_RCC_OscConfig+0x9c8>
 80025aa:	e07f      	b.n	80026ac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fb60 	bl	8000c70 <HAL_GetTick>
 80025b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fb5b 	bl	8000c70 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e2c4      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002614:	601a      	str	r2, [r3, #0]
  return result;
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800261e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d102      	bne.n	800263a <HAL_RCC_OscConfig+0xb4e>
 8002634:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	e013      	b.n	8002662 <HAL_RCC_OscConfig+0xb76>
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002666:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800266a:	2102      	movs	r1, #2
 800266c:	6011      	str	r1, [r2, #0]
 800266e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002672:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	fa92 f1a2 	rbit	r1, r2
 800267c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002680:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002684:	6011      	str	r1, [r2, #0]
  return result;
 8002686:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800268a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	fab2 f282 	clz	r2, r2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f002 021f 	and.w	r2, r2, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d184      	bne.n	80025b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a22      	ldr	r2, [pc, #136]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8242 	beq.w	8002b56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <HAL_RCC_OscConfig+0xc58>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	f000 8213 	beq.w	8002b06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	f040 8162 	bne.w	80029b6 <HAL_RCC_OscConfig+0xeca>
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002704:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	fa93 f2a3 	rbit	r2, r3
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002716:	601a      	str	r2, [r3, #0]
  return result;
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002720:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800272c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	2300      	movs	r3, #0
 8002736:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fa9a 	bl	8000c70 <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	e00c      	b.n	800275c <HAL_RCC_OscConfig+0xc70>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fa92 	bl	8000c70 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1fd      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800278a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0xcba>
 80027a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e027      	b.n	80027f6 <HAL_RCC_OscConfig+0xd0a>
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002802:	6011      	str	r1, [r2, #0]
 8002804:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002808:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fa92 f1a2 	rbit	r1, r2
 8002812:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002816:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800281a:	6011      	str	r1, [r2, #0]
  return result;
 800281c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002820:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d182      	bne.n	8002748 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002842:	4b88      	ldr	r3, [pc, #544]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	430b      	orrs	r3, r1
 8002864:	497f      	ldr	r1, [pc, #508]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002872:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002898:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	2301      	movs	r3, #1
 80028ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f9de 	bl	8000c70 <HAL_GetTick>
 80028b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b8:	e009      	b.n	80028ce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f9d9 	bl	8000c70 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e144      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028f2:	601a      	str	r2, [r3, #0]
  return result;
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0xe2c>
 8002912:	4b54      	ldr	r3, [pc, #336]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e027      	b.n	8002968 <HAL_RCC_OscConfig+0xe7c>
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002946:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4b3f      	ldr	r3, [pc, #252]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800296c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002970:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fa92 f1a2 	rbit	r1, r2
 8002984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002988:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800298c:	6011      	str	r1, [r2, #0]
  return result;
 800298e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002992:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d082      	beq.n	80028ba <HAL_RCC_OscConfig+0xdce>
 80029b4:	e0cf      	b.n	8002b56 <HAL_RCC_OscConfig+0x106a>
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fa93 f2a3 	rbit	r2, r3
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029da:	601a      	str	r2, [r3, #0]
  return result;
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	461a      	mov	r2, r3
 80029f8:	2300      	movs	r3, #0
 80029fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe f938 	bl	8000c70 <HAL_GetTick>
 8002a00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe f933 	bl	8000c70 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e09e      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a3e:	601a      	str	r2, [r3, #0]
  return result;
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d104      	bne.n	8002a68 <HAL_RCC_OscConfig+0xf7c>
 8002a5e:	4b01      	ldr	r3, [pc, #4]	@ (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e029      	b.n	8002ab8 <HAL_RCC_OscConfig+0xfcc>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fa93 f2a3 	rbit	r2, r3
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <HAL_RCC_OscConfig+0x1078>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002abc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ac0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ac4:	6011      	str	r1, [r2, #0]
 8002ac6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fa92 f1a2 	rbit	r1, r2
 8002ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ad8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002adc:	6011      	str	r1, [r2, #0]
  return result;
 8002ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d180      	bne.n	8002a06 <HAL_RCC_OscConfig+0xf1a>
 8002b04:	e027      	b.n	8002b56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01e      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_RCC_OscConfig+0x1078>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b09e      	sub	sp, #120	@ 0x78
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e162      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b90      	ldr	r3, [pc, #576]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	498b      	ldr	r1, [pc, #556]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b89      	ldr	r3, [pc, #548]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e14a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b82      	ldr	r3, [pc, #520]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	497f      	ldr	r1, [pc, #508]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80dc 	beq.w	8002d94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d13c      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xf6>
 8002be4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xa6>
 8002c08:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e00f      	b.n	8002c2e <HAL_RCC_ClockConfig+0xc6>
 8002c0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c2a:	4b67      	ldr	r3, [pc, #412]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0220 	orr.w	r2, r2, #32
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d17b      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0f3      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d13c      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x178>
 8002c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c6a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x128>
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
 8002c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cac:	4b46      	ldr	r3, [pc, #280]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cb4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d13a      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b2      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
 8002d02:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e00d      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1bc>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d14:	2302      	movs	r3, #2
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	4b29      	ldr	r3, [pc, #164]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	2202      	movs	r2, #2
 8002d26:	61ba      	str	r2, [r7, #24]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	617a      	str	r2, [r7, #20]
  return result;
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	fab2 f282 	clz	r2, r2
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e079      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	491a      	ldr	r1, [pc, #104]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fd ff84 	bl	8000c70 <HAL_GetTick>
 8002d68:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fd ff80 	bl	8000c70 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e061      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d214      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4906      	ldr	r1, [pc, #24]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e040      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	491a      	ldr	r1, [pc, #104]	@ (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4912      	ldr	r1, [pc, #72]	@ (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e0a:	f000 f829 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4601      	mov	r1, r0
 8002e10:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e18:	22f0      	movs	r2, #240	@ 0xf0
 8002e1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	fa92 f2a2 	rbit	r2, r2
 8002e22:	60fa      	str	r2, [r7, #12]
  return result;
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	fab2 f282 	clz	r2, r2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	40d3      	lsrs	r3, r2
 8002e2e:	4a09      	ldr	r2, [pc, #36]	@ (8002e54 <HAL_RCC_ClockConfig+0x2ec>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	fa21 f303 	lsr.w	r3, r1, r3
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_RCC_ClockConfig+0x2f0>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_RCC_ClockConfig+0x2f4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fed2 	bl	8000be8 <HAL_InitTick>
  
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3778      	adds	r7, #120	@ 0x78
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	080056a4 	.word	0x080056a4
 8002e58:	20000010 	.word	0x20000010
 8002e5c:	20000014 	.word	0x20000014

08002e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b08b      	sub	sp, #44	@ 0x2c
 8002e64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x30>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x36>
 8002e8e:	e03c      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e90:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e92:	623b      	str	r3, [r7, #32]
      break;
 8002e94:	e03c      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e9c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002ea0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	607a      	str	r2, [r7, #4]
  return result;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	40d3      	lsrs	r3, r2
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	40d3      	lsrs	r3, r2
 8002ed8:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	e004      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	623b      	str	r3, [r7, #32]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f0c:	623b      	str	r3, [r7, #32]
      break;
 8002f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	372c      	adds	r7, #44	@ 0x2c
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	007a1200 	.word	0x007a1200
 8002f28:	080056bc 	.word	0x080056bc
 8002f2c:	080056cc 	.word	0x080056cc
 8002f30:	003d0900 	.word	0x003d0900

08002f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000010 	.word	0x20000010

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f52:	f7ff ffef 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f56:	4601      	mov	r1, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f60:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	fa92 f2a2 	rbit	r2, r2
 8002f6c:	603a      	str	r2, [r7, #0]
  return result;
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	fab2 f282 	clz	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	40d3      	lsrs	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	080056b4 	.word	0x080056b4

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f96:	f7ff ffcd 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fa4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fa8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	603a      	str	r2, [r7, #0]
  return result;
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	080056b4 	.word	0x080056b4

08002fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b092      	sub	sp, #72	@ 0x48
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80cd 	beq.w	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff8:	4b86      	ldr	r3, [pc, #536]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10e      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b83      	ldr	r3, [pc, #524]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4a82      	ldr	r2, [pc, #520]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300e:	61d3      	str	r3, [r2, #28]
 8003010:	4b80      	ldr	r3, [pc, #512]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b7d      	ldr	r3, [pc, #500]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b7a      	ldr	r3, [pc, #488]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a79      	ldr	r2, [pc, #484]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003038:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fd fe19 	bl	8000c70 <HAL_GetTick>
 800303e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fd fe15 	bl	8000c70 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	@ 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0db      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b70      	ldr	r3, [pc, #448]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003060:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800306a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d07d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003078:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800307a:	429a      	cmp	r2, r3
 800307c:	d076      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800307e:	4b65      	ldr	r3, [pc, #404]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003088:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	4b5e      	ldr	r3, [pc, #376]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	2301      	movs	r3, #1
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b55      	ldr	r3, [pc, #340]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d0:	4a50      	ldr	r2, [pc, #320]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d045      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fdc6 	bl	8000c70 <HAL_GetTick>
 80030e4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fd fdc2 	bl	8000c70 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e086      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x238>
 80030fe:	2302      	movs	r3, #2
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
 800310a:	2302      	movs	r3, #2
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	61fb      	str	r3, [r7, #28]
  return result;
 8003116:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d102      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800312c:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	e007      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003132:	2302      	movs	r3, #2
 8003134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	4b35      	ldr	r3, [pc, #212]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	2202      	movs	r2, #2
 8003144:	613a      	str	r2, [r7, #16]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	fa92 f2a2 	rbit	r2, r2
 800314c:	60fa      	str	r2, [r7, #12]
  return result;
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f202 	lsl.w	r2, r1, r2
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0bd      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800316c:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4926      	ldr	r1, [pc, #152]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800317e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800318c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003190:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319e:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	491a      	ldr	r1, [pc, #104]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	f023 0210 	bic.w	r2, r3, #16
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4912      	ldr	r1, [pc, #72]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	490b      	ldr	r1, [pc, #44]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4903      	ldr	r1, [pc, #12]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3748      	adds	r7, #72	@ 0x48
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	10908100 	.word	0x10908100

08003220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e049      	b.n	80032c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fb36 	bl	80008b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f000 f94a 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0ff      	b.n	80034ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b14      	cmp	r3, #20
 80032fa:	f200 80f0 	bhi.w	80034de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003359 	.word	0x08003359
 8003308:	080034df 	.word	0x080034df
 800330c:	080034df 	.word	0x080034df
 8003310:	080034df 	.word	0x080034df
 8003314:	08003399 	.word	0x08003399
 8003318:	080034df 	.word	0x080034df
 800331c:	080034df 	.word	0x080034df
 8003320:	080034df 	.word	0x080034df
 8003324:	080033db 	.word	0x080033db
 8003328:	080034df 	.word	0x080034df
 800332c:	080034df 	.word	0x080034df
 8003330:	080034df 	.word	0x080034df
 8003334:	0800341b 	.word	0x0800341b
 8003338:	080034df 	.word	0x080034df
 800333c:	080034df 	.word	0x080034df
 8003340:	080034df 	.word	0x080034df
 8003344:	0800345d 	.word	0x0800345d
 8003348:	080034df 	.word	0x080034df
 800334c:	080034df 	.word	0x080034df
 8003350:	080034df 	.word	0x080034df
 8003354:	0800349d 	.word	0x0800349d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f942 	bl	80035e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
      break;
 8003396:	e0a5      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9a8 	bl	80036f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e084      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa07 	bl	80037f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0208 	orr.w	r2, r2, #8
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0204 	bic.w	r2, r2, #4
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e064      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa65 	bl	80038f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
      break;
 800345a:	e043      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 faa8 	bl	80039b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800349a:	e023      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fae6 	bl	8003a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034dc:	e002      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
      break;
 80034e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <TIM_Base_SetConfig+0xdc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0x28>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0x28>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a2f      	ldr	r2, [pc, #188]	@ (80035d8 <TIM_Base_SetConfig+0xe0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a27      	ldr	r2, [pc, #156]	@ (80035d4 <TIM_Base_SetConfig+0xdc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <TIM_Base_SetConfig+0x6a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003540:	d00f      	beq.n	8003562 <TIM_Base_SetConfig+0x6a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a24      	ldr	r2, [pc, #144]	@ (80035d8 <TIM_Base_SetConfig+0xe0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_Base_SetConfig+0x6a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <TIM_Base_SetConfig+0xe4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_Base_SetConfig+0x6a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a22      	ldr	r2, [pc, #136]	@ (80035e0 <TIM_Base_SetConfig+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_Base_SetConfig+0x6a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <TIM_Base_SetConfig+0xec>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <TIM_Base_SetConfig+0xdc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <TIM_Base_SetConfig+0xc0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <TIM_Base_SetConfig+0xe4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <TIM_Base_SetConfig+0xc0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0d      	ldr	r2, [pc, #52]	@ (80035e0 <TIM_Base_SetConfig+0xe8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_Base_SetConfig+0xc0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0c      	ldr	r2, [pc, #48]	@ (80035e4 <TIM_Base_SetConfig+0xec>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	615a      	str	r2, [r3, #20]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800

080035e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 0302 	bic.w	r3, r3, #2
 8003634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a28      	ldr	r2, [pc, #160]	@ (80036e4 <TIM_OC1_SetConfig+0xfc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_OC1_SetConfig+0x78>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a27      	ldr	r2, [pc, #156]	@ (80036e8 <TIM_OC1_SetConfig+0x100>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_OC1_SetConfig+0x78>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <TIM_OC1_SetConfig+0x104>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC1_SetConfig+0x78>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <TIM_OC1_SetConfig+0x108>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10c      	bne.n	800367a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0308 	bic.w	r3, r3, #8
 8003666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <TIM_OC1_SetConfig+0xfc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_OC1_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <TIM_OC1_SetConfig+0x100>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_OC1_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <TIM_OC1_SetConfig+0x104>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC1_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a16      	ldr	r2, [pc, #88]	@ (80036f0 <TIM_OC1_SetConfig+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d111      	bne.n	80036be <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800

080036f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800372e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0320 	bic.w	r3, r3, #32
 8003742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a24      	ldr	r2, [pc, #144]	@ (80037e4 <TIM_OC2_SetConfig+0xf0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10d      	bne.n	8003774 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800375e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <TIM_OC2_SetConfig+0xf0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_OC2_SetConfig+0xa0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <TIM_OC2_SetConfig+0xf4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_OC2_SetConfig+0xa0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a19      	ldr	r2, [pc, #100]	@ (80037ec <TIM_OC2_SetConfig+0xf8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC2_SetConfig+0xa0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a18      	ldr	r2, [pc, #96]	@ (80037f0 <TIM_OC2_SetConfig+0xfc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d113      	bne.n	80037bc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800379a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40014400 	.word	0x40014400
 80037f0:	40014800 	.word	0x40014800

080037f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a23      	ldr	r2, [pc, #140]	@ (80038e0 <TIM_OC3_SetConfig+0xec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10d      	bne.n	8003872 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800385c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003870:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <TIM_OC3_SetConfig+0xec>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_OC3_SetConfig+0x9e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <TIM_OC3_SetConfig+0xf0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_OC3_SetConfig+0x9e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a18      	ldr	r2, [pc, #96]	@ (80038e8 <TIM_OC3_SetConfig+0xf4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_OC3_SetConfig+0x9e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a17      	ldr	r2, [pc, #92]	@ (80038ec <TIM_OC3_SetConfig+0xf8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d113      	bne.n	80038ba <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	621a      	str	r2, [r3, #32]
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800

080038f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800393e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	031b      	lsls	r3, r3, #12
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a16      	ldr	r2, [pc, #88]	@ (80039a8 <TIM_OC4_SetConfig+0xb8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_OC4_SetConfig+0x7c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <TIM_OC4_SetConfig+0xbc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_OC4_SetConfig+0x7c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a14      	ldr	r2, [pc, #80]	@ (80039b0 <TIM_OC4_SetConfig+0xc0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_OC4_SetConfig+0x7c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <TIM_OC4_SetConfig+0xc4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d109      	bne.n	8003980 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a15      	ldr	r2, [pc, #84]	@ (8003a64 <TIM_OC5_SetConfig+0xac>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <TIM_OC5_SetConfig+0x72>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <TIM_OC5_SetConfig+0xb0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_OC5_SetConfig+0x72>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <TIM_OC5_SetConfig+0xb4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_OC5_SetConfig+0x72>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <TIM_OC5_SetConfig+0xb8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d109      	bne.n	8003a3e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	621a      	str	r2, [r3, #32]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	051b      	lsls	r3, r3, #20
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a16      	ldr	r2, [pc, #88]	@ (8003b24 <TIM_OC6_SetConfig+0xb0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_OC6_SetConfig+0x74>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a15      	ldr	r2, [pc, #84]	@ (8003b28 <TIM_OC6_SetConfig+0xb4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC6_SetConfig+0x74>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a14      	ldr	r2, [pc, #80]	@ (8003b2c <TIM_OC6_SetConfig+0xb8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC6_SetConfig+0x74>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <TIM_OC6_SetConfig+0xbc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d109      	bne.n	8003afc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	029b      	lsls	r3, r3, #10
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800

08003b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e054      	b.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a24      	ldr	r2, [pc, #144]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb4:	d009      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a13      	ldr	r2, [pc, #76]	@ (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a11      	ldr	r2, [pc, #68]	@ (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40014000 	.word	0x40014000

08003c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e060      	b.n	8003cee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a14      	ldr	r2, [pc, #80]	@ (8003cfc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d115      	bne.n	8003cdc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	051b      	lsls	r3, r3, #20
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e040      	b.n	8003d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fc fe20 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	@ 0x24
 8003d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fcda 	bl	80046f8 <UART_SetConfig>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e022      	b.n	8003d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fe04 	bl	8004964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fe8b 	bl	8004aa8 <UART_CheckIdleState>
 8003d92:	4603      	mov	r3, r0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	@ 0x28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d177      	bne.n	8003ea4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_UART_Transmit+0x24>
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e070      	b.n	8003ea6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2221      	movs	r2, #33	@ 0x21
 8003dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd2:	f7fc ff4d 	bl	8000c70 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x68>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e0c:	e02f      	b.n	8003e6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2180      	movs	r1, #128	@ 0x80
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 feed 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e03b      	b.n	8003ea6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e40:	b292      	uxth	r2, r2
 8003e42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3302      	adds	r3, #2
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	e007      	b.n	8003e5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1c9      	bne.n	8003e0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2140      	movs	r1, #64	@ 0x40
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 feb7 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e005      	b.n	8003ea6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b08b      	sub	sp, #44	@ 0x2c
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d147      	bne.n	8003f56 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_UART_Transmit_IT+0x22>
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e040      	b.n	8003f58 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2221      	movs	r2, #33	@ 0x21
 8003efe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f08:	d107      	bne.n	8003f1a <HAL_UART_Transmit_IT+0x6a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a13      	ldr	r2, [pc, #76]	@ (8003f64 <HAL_UART_Transmit_IT+0xb4>)
 8003f16:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003f18:	e002      	b.n	8003f20 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a12      	ldr	r2, [pc, #72]	@ (8003f68 <HAL_UART_Transmit_IT+0xb8>)
 8003f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	372c      	adds	r7, #44	@ 0x2c
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	08005179 	.word	0x08005179
 8003f68:	080050c3 	.word	0x080050c3

08003f6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	@ 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d132      	bne.n	8003fea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_UART_Receive_IT+0x24>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e02b      	b.n	8003fec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d018      	beq.n	8003fda <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	69f9      	ldr	r1, [r7, #28]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e6      	bne.n	8003fa8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fe71 	bl	8004cc8 <UART_Start_Receive_IT>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	e000      	b.n	8003fec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	@ 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	@ 0x28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004006:	2b20      	cmp	r3, #32
 8004008:	d165      	bne.n	80040d6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_UART_Transmit_DMA+0x22>
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e05e      	b.n	80040d8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2221      	movs	r2, #33	@ 0x21
 800403c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	2b00      	cmp	r3, #0
 8004044:	d027      	beq.n	8004096 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <HAL_UART_Transmit_DMA+0xec>)
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	4a24      	ldr	r2, [pc, #144]	@ (80040e4 <HAL_UART_Transmit_DMA+0xf0>)
 8004054:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	4a23      	ldr	r2, [pc, #140]	@ (80040e8 <HAL_UART_Transmit_DMA+0xf4>)
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	2200      	movs	r2, #0
 8004064:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	4619      	mov	r1, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3328      	adds	r3, #40	@ 0x28
 8004076:	461a      	mov	r2, r3
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	f7fd f9cb 	bl	8001414 <HAL_DMA_Start_IT>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2210      	movs	r2, #16
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e020      	b.n	80040d8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2240      	movs	r2, #64	@ 0x40
 800409c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	623a      	str	r2, [r7, #32]
 80040c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e5      	bne.n	800409e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3728      	adds	r7, #40	@ 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	08004f69 	.word	0x08004f69
 80040e4:	08004ffd 	.word	0x08004ffd
 80040e8:	08005019 	.word	0x08005019

080040ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b0ba      	sub	sp, #232	@ 0xe8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004116:	f640 030f 	movw	r3, #2063	@ 0x80f
 800411a:	4013      	ands	r3, r2
 800411c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d115      	bne.n	8004154 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00f      	beq.n	8004154 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 82ab 	beq.w	80046a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
      }
      return;
 8004152:	e2a5      	b.n	80046a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8117 	beq.w	800438c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800415e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800416a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800416e:	4b85      	ldr	r3, [pc, #532]	@ (8004384 <HAL_UART_IRQHandler+0x298>)
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 810a 	beq.w	800438c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <HAL_UART_IRQHandler+0xbc>
 8004184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_UART_IRQHandler+0xec>
 80041b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2202      	movs	r2, #2
 80041c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d011      	beq.n	8004208 <HAL_UART_IRQHandler+0x11c>
 80041e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2204      	movs	r2, #4
 80041f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041fe:	f043 0202 	orr.w	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004224:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2208      	movs	r2, #8
 8004232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423a:	f043 0208 	orr.w	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <HAL_UART_IRQHandler+0x18a>
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8211 	beq.w	80046a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b40      	cmp	r3, #64	@ 0x40
 80042c0:	d005      	beq.n	80042ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d04f      	beq.n	800436e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fde6 	bl	8004ea0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042de:	2b40      	cmp	r3, #64	@ 0x40
 80042e0:	d141      	bne.n	8004366 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800430e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800431a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1d9      	bne.n	80042e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004332:	2b00      	cmp	r3, #0
 8004334:	d013      	beq.n	800435e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433a:	4a13      	ldr	r2, [pc, #76]	@ (8004388 <HAL_UART_IRQHandler+0x29c>)
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd f8fe 	bl	8001544 <HAL_DMA_Abort_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d017      	beq.n	800437e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004358:	4610      	mov	r0, r2
 800435a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	e00f      	b.n	800437e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9b4 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	e00b      	b.n	800437e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9b0 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e007      	b.n	800437e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9ac 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800437c:	e192      	b.n	80046a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437e:	bf00      	nop
    return;
 8004380:	e190      	b.n	80046a4 <HAL_UART_IRQHandler+0x5b8>
 8004382:	bf00      	nop
 8004384:	04000120 	.word	0x04000120
 8004388:	08005097 	.word	0x08005097

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004390:	2b01      	cmp	r3, #1
 8004392:	f040 814b 	bne.w	800462c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8144 	beq.w	800462c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 813d 	beq.w	800462c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2210      	movs	r2, #16
 80043b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	f040 80b5 	bne.w	8004534 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8164 	beq.w	80046a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043ea:	429a      	cmp	r2, r3
 80043ec:	f080 815c 	bcs.w	80046a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b20      	cmp	r3, #32
 8004402:	f000 8086 	beq.w	8004512 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800441a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800441e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004422:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004430:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004434:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800443c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1da      	bne.n	8004406 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004474:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004478:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800447c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e1      	bne.n	8004450 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800449c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800449e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e3      	bne.n	800448c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e4      	bne.n	80044d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450c:	4618      	mov	r0, r3
 800450e:	f7fc ffe0 	bl	80014d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004524:	b29b      	uxth	r3, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	b29b      	uxth	r3, r3
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8d7 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004532:	e0b9      	b.n	80046a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004540:	b29b      	uxth	r3, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80ab 	beq.w	80046ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80a6 	beq.w	80046ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004582:	647b      	str	r3, [r7, #68]	@ 0x44
 8004584:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004588:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	623b      	str	r3, [r7, #32]
   return(result);
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0310 	bic.w	r3, r3, #16
 80045f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	69b9      	ldr	r1, [r7, #24]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	617b      	str	r3, [r7, #20]
   return(result);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e4      	bne.n	80045e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800461e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f85b 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800462a:	e03f      	b.n	80046ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <HAL_UART_IRQHandler+0x56a>
 8004638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800463c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800464c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 ffc4 	bl	80055dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004654:	e02d      	b.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01c      	beq.n	80046b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
    }
    return;
 800467e:	e017      	b.n	80046b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00c      	beq.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fdcd 	bl	8005238 <UART_EndTransmit_IT>
    return;
 800469e:	e008      	b.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80046a0:	bf00      	nop
 80046a2:	e006      	b.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80046a4:	bf00      	nop
 80046a6:	e004      	b.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80046a8:	bf00      	nop
 80046aa:	e002      	b.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80046b0:	bf00      	nop
  }

}
 80046b2:	37e8      	adds	r7, #232	@ 0xe8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8a      	ldr	r3, [pc, #552]	@ (800494c <UART_SetConfig+0x254>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	430b      	orrs	r3, r1
 800472e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a78      	ldr	r2, [pc, #480]	@ (8004950 <UART_SetConfig+0x258>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d120      	bne.n	80047b6 <UART_SetConfig+0xbe>
 8004774:	4b77      	ldr	r3, [pc, #476]	@ (8004954 <UART_SetConfig+0x25c>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d817      	bhi.n	80047b0 <UART_SetConfig+0xb8>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <UART_SetConfig+0x90>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	08004799 	.word	0x08004799
 800478c:	080047a5 	.word	0x080047a5
 8004790:	080047ab 	.word	0x080047ab
 8004794:	0800479f 	.word	0x0800479f
 8004798:	2300      	movs	r3, #0
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e01d      	b.n	80047da <UART_SetConfig+0xe2>
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e01a      	b.n	80047da <UART_SetConfig+0xe2>
 80047a4:	2304      	movs	r3, #4
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e017      	b.n	80047da <UART_SetConfig+0xe2>
 80047aa:	2308      	movs	r3, #8
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e014      	b.n	80047da <UART_SetConfig+0xe2>
 80047b0:	2310      	movs	r3, #16
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e011      	b.n	80047da <UART_SetConfig+0xe2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a67      	ldr	r2, [pc, #412]	@ (8004958 <UART_SetConfig+0x260>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d102      	bne.n	80047c6 <UART_SetConfig+0xce>
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0xe2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a64      	ldr	r2, [pc, #400]	@ (800495c <UART_SetConfig+0x264>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d102      	bne.n	80047d6 <UART_SetConfig+0xde>
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e001      	b.n	80047da <UART_SetConfig+0xe2>
 80047d6:	2310      	movs	r3, #16
 80047d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e2:	d15a      	bne.n	800489a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d827      	bhi.n	800483a <UART_SetConfig+0x142>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <UART_SetConfig+0xf8>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004815 	.word	0x08004815
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	08004825 	.word	0x08004825
 80047fc:	0800483b 	.word	0x0800483b
 8004800:	0800482b 	.word	0x0800482b
 8004804:	0800483b 	.word	0x0800483b
 8004808:	0800483b 	.word	0x0800483b
 800480c:	0800483b 	.word	0x0800483b
 8004810:	08004833 	.word	0x08004833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7fe fb9a 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8004818:	61b8      	str	r0, [r7, #24]
        break;
 800481a:	e013      	b.n	8004844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800481c:	f7fe fbb8 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8004820:	61b8      	str	r0, [r7, #24]
        break;
 8004822:	e00f      	b.n	8004844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b4e      	ldr	r3, [pc, #312]	@ (8004960 <UART_SetConfig+0x268>)
 8004826:	61bb      	str	r3, [r7, #24]
        break;
 8004828:	e00c      	b.n	8004844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe fb19 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 800482e:	61b8      	str	r0, [r7, #24]
        break;
 8004830:	e008      	b.n	8004844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004836:	61bb      	str	r3, [r7, #24]
        break;
 8004838:	e004      	b.n	8004844 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	77bb      	strb	r3, [r7, #30]
        break;
 8004842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d074      	beq.n	8004934 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	005a      	lsls	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d916      	bls.n	8004894 <UART_SetConfig+0x19c>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d212      	bcs.n	8004894 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	b29a      	uxth	r2, r3
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	4313      	orrs	r3, r2
 8004888:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	89fa      	ldrh	r2, [r7, #14]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e04f      	b.n	8004934 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	77bb      	strb	r3, [r7, #30]
 8004898:	e04c      	b.n	8004934 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489a:	7ffb      	ldrb	r3, [r7, #31]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d828      	bhi.n	80048f2 <UART_SetConfig+0x1fa>
 80048a0:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <UART_SetConfig+0x1b0>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048e3 	.word	0x080048e3
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048f3 	.word	0x080048f3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7fe fb3e 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80048d0:	61b8      	str	r0, [r7, #24]
        break;
 80048d2:	e013      	b.n	80048fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d4:	f7fe fb5c 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 80048d8:	61b8      	str	r0, [r7, #24]
        break;
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <UART_SetConfig+0x268>)
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e00c      	b.n	80048fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe fabd 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 80048e6:	61b8      	str	r0, [r7, #24]
        break;
 80048e8:	e008      	b.n	80048fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	77bb      	strb	r3, [r7, #30]
        break;
 80048fa:	bf00      	nop
    }

    if (pclk != 0U)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d018      	beq.n	8004934 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	085a      	lsrs	r2, r3, #1
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d909      	bls.n	8004930 <UART_SetConfig+0x238>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004922:	d205      	bcs.n	8004930 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e001      	b.n	8004934 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004940:	7fbb      	ldrb	r3, [r7, #30]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	efff69f3 	.word	0xefff69f3
 8004950:	40013800 	.word	0x40013800
 8004954:	40021000 	.word	0x40021000
 8004958:	40004400 	.word	0x40004400
 800495c:	40004800 	.word	0x40004800
 8004960:	007a1200 	.word	0x007a1200

08004964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a62:	d10a      	bne.n	8004a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b098      	sub	sp, #96	@ 0x60
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab8:	f7fc f8da 	bl	8000c70 <HAL_GetTick>
 8004abc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d12e      	bne.n	8004b2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f88c 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d021      	beq.n	8004b2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e062      	b.n	8004bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d149      	bne.n	8004bcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f856 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d03c      	beq.n	8004bcc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e6      	bne.n	8004b52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba4:	61fa      	str	r2, [r7, #28]
 8004ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e5      	bne.n	8004b84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e011      	b.n	8004bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3758      	adds	r7, #88	@ 0x58
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c08:	e049      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c10:	d045      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fc f82d 	bl	8000c70 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e048      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d031      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d110      	bne.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f925 	bl	8004ea0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e029      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c78:	d111      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f90b 	bl	8004ea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e00f      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d0a6      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b097      	sub	sp, #92	@ 0x5c
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfa:	d10e      	bne.n	8004d1a <UART_Start_Receive_IT+0x52>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <UART_Start_Receive_IT+0x48>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d0e:	e02d      	b.n	8004d6c <UART_Start_Receive_IT+0xa4>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	22ff      	movs	r2, #255	@ 0xff
 8004d14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d18:	e028      	b.n	8004d6c <UART_Start_Receive_IT+0xa4>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <UART_Start_Receive_IT+0x76>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <UART_Start_Receive_IT+0x6c>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	22ff      	movs	r2, #255	@ 0xff
 8004d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d32:	e01b      	b.n	8004d6c <UART_Start_Receive_IT+0xa4>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	227f      	movs	r2, #127	@ 0x7f
 8004d38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d3c:	e016      	b.n	8004d6c <UART_Start_Receive_IT+0xa4>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d46:	d10d      	bne.n	8004d64 <UART_Start_Receive_IT+0x9c>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <UART_Start_Receive_IT+0x92>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	227f      	movs	r2, #127	@ 0x7f
 8004d54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d58:	e008      	b.n	8004d6c <UART_Start_Receive_IT+0xa4>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	223f      	movs	r2, #63	@ 0x3f
 8004d5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d62:	e003      	b.n	8004d6c <UART_Start_Receive_IT+0xa4>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2222      	movs	r2, #34	@ 0x22
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004d9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db8:	d107      	bne.n	8004dca <UART_Start_Receive_IT+0x102>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <UART_Start_Receive_IT+0x184>)
 8004dc6:	669a      	str	r2, [r3, #104]	@ 0x68
 8004dc8:	e002      	b.n	8004dd0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	@ (8004e50 <UART_Start_Receive_IT+0x188>)
 8004dce:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d019      	beq.n	8004e0c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_Start_Receive_IT+0x110>
 8004e0a:	e018      	b.n	8004e3e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	69f9      	ldr	r1, [r7, #28]
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e6      	bne.n	8004e0c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	375c      	adds	r7, #92	@ 0x5c
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	08005435 	.word	0x08005435
 8004e50:	0800528d 	.word	0x0800528d

08004e54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	613b      	str	r3, [r7, #16]
   return(result);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004e94:	bf00      	nop
 8004e96:	3724      	adds	r7, #36	@ 0x24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b095      	sub	sp, #84	@ 0x54
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d118      	bne.n	8004f48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	613b      	str	r3, [r7, #16]
   return(result);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f5c:	bf00      	nop
 8004f5e:	3754      	adds	r7, #84	@ 0x54
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b090      	sub	sp, #64	@ 0x40
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d037      	beq.n	8004fee <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	623b      	str	r3, [r7, #32]
   return(result);
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fec:	e002      	b.n	8004ff4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8004fee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ff0:	f7fb f940 	bl	8000274 <HAL_UART_TxCpltCallback>
}
 8004ff4:	bf00      	nop
 8004ff6:	3740      	adds	r7, #64	@ 0x40
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff fb54 	bl	80046b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005032:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503e:	2b80      	cmp	r3, #128	@ 0x80
 8005040:	d109      	bne.n	8005056 <UART_DMAError+0x3e>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b21      	cmp	r3, #33	@ 0x21
 8005046:	d106      	bne.n	8005056 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	f7ff feff 	bl	8004e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005060:	2b40      	cmp	r3, #64	@ 0x40
 8005062:	d109      	bne.n	8005078 <UART_DMAError+0x60>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b22      	cmp	r3, #34	@ 0x22
 8005068:	d106      	bne.n	8005078 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005072:	6978      	ldr	r0, [r7, #20]
 8005074:	f7ff ff14 	bl	8004ea0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800507e:	f043 0210 	orr.w	r2, r3, #16
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005088:	6978      	ldr	r0, [r7, #20]
 800508a:	f7ff fb1f 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff fb09 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b08f      	sub	sp, #60	@ 0x3c
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ce:	2b21      	cmp	r3, #33	@ 0x21
 80050d0:	d14c      	bne.n	800516c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d132      	bne.n	8005144 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	60bb      	str	r3, [r7, #8]
   return(result);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6979      	ldr	r1, [r7, #20]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	613b      	str	r3, [r7, #16]
   return(result);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e6      	bne.n	8005110 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005142:	e013      	b.n	800516c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800516c:	bf00      	nop
 800516e:	373c      	adds	r7, #60	@ 0x3c
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b091      	sub	sp, #68	@ 0x44
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005184:	2b21      	cmp	r3, #33	@ 0x21
 8005186:	d151      	bne.n	800522c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d132      	bne.n	80051fa <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	623b      	str	r3, [r7, #32]
   return(result);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80051b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	617b      	str	r3, [r7, #20]
   return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e6      	bne.n	80051c6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80051f8:	e018      	b.n	800522c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520c:	b292      	uxth	r2, r2
 800520e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800522c:	bf00      	nop
 800522e:	3744      	adds	r7, #68	@ 0x44
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	60bb      	str	r3, [r7, #8]
   return(result);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6979      	ldr	r1, [r7, #20]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	613b      	str	r3, [r7, #16]
   return(result);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e6      	bne.n	8005240 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fa fff8 	bl	8000274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b09c      	sub	sp, #112	@ 0x70
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800529a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a4:	2b22      	cmp	r3, #34	@ 0x22
 80052a6:	f040 80b9 	bne.w	800541c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80052b8:	b2d9      	uxtb	r1, r3
 80052ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	400a      	ands	r2, r1
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 809c 	bne.w	800542c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005312:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005314:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005318:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e6      	bne.n	80052f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3308      	adds	r3, #8
 800532c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	667b      	str	r3, [r7, #100]	@ 0x64
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005346:	647a      	str	r2, [r7, #68]	@ 0x44
 8005348:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800534c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e5      	bne.n	8005326 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d018      	beq.n	80053ae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	623b      	str	r3, [r7, #32]
   return(result);
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005390:	663b      	str	r3, [r7, #96]	@ 0x60
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800539a:	633b      	str	r3, [r7, #48]	@ 0x30
 800539c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e6      	bne.n	800537c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d12e      	bne.n	8005414 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0310 	bic.w	r3, r3, #16
 80053d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	617b      	str	r3, [r7, #20]
   return(result);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e6      	bne.n	80053bc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d103      	bne.n	8005404 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2210      	movs	r2, #16
 8005402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff f967 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005412:	e00b      	b.n	800542c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fa ff3d 	bl	8000294 <HAL_UART_RxCpltCallback>
}
 800541a:	e007      	b.n	800542c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	619a      	str	r2, [r3, #24]
}
 800542c:	bf00      	nop
 800542e:	3770      	adds	r7, #112	@ 0x70
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b09c      	sub	sp, #112	@ 0x70
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005442:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800544c:	2b22      	cmp	r3, #34	@ 0x22
 800544e:	f040 80b9 	bne.w	80055c4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005458:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005460:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005462:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005466:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800546a:	4013      	ands	r3, r2
 800546c:	b29a      	uxth	r2, r3
 800546e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005470:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	1c9a      	adds	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 809c 	bne.w	80055d4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80054aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80054bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80054c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80054f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d018      	beq.n	8005556 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	61fb      	str	r3, [r7, #28]
   return(result);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005544:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e6      	bne.n	8005524 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555a:	2b01      	cmp	r3, #1
 800555c:	d12e      	bne.n	80055bc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60bb      	str	r3, [r7, #8]
   return(result);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	613b      	str	r3, [r7, #16]
   return(result);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d103      	bne.n	80055ac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2210      	movs	r2, #16
 80055aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff f893 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055ba:	e00b      	b.n	80055d4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fa fe69 	bl	8000294 <HAL_UART_RxCpltCallback>
}
 80055c2:	e007      	b.n	80055d4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0208 	orr.w	r2, r2, #8
 80055d2:	619a      	str	r2, [r3, #24]
}
 80055d4:	bf00      	nop
 80055d6:	3770      	adds	r7, #112	@ 0x70
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <memset>:
 80055f0:	4402      	add	r2, r0
 80055f2:	4603      	mov	r3, r0
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d100      	bne.n	80055fa <memset+0xa>
 80055f8:	4770      	bx	lr
 80055fa:	f803 1b01 	strb.w	r1, [r3], #1
 80055fe:	e7f9      	b.n	80055f4 <memset+0x4>

08005600 <__libc_init_array>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	4d0d      	ldr	r5, [pc, #52]	@ (8005638 <__libc_init_array+0x38>)
 8005604:	4c0d      	ldr	r4, [pc, #52]	@ (800563c <__libc_init_array+0x3c>)
 8005606:	1b64      	subs	r4, r4, r5
 8005608:	10a4      	asrs	r4, r4, #2
 800560a:	2600      	movs	r6, #0
 800560c:	42a6      	cmp	r6, r4
 800560e:	d109      	bne.n	8005624 <__libc_init_array+0x24>
 8005610:	4d0b      	ldr	r5, [pc, #44]	@ (8005640 <__libc_init_array+0x40>)
 8005612:	4c0c      	ldr	r4, [pc, #48]	@ (8005644 <__libc_init_array+0x44>)
 8005614:	f000 f818 	bl	8005648 <_init>
 8005618:	1b64      	subs	r4, r4, r5
 800561a:	10a4      	asrs	r4, r4, #2
 800561c:	2600      	movs	r6, #0
 800561e:	42a6      	cmp	r6, r4
 8005620:	d105      	bne.n	800562e <__libc_init_array+0x2e>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	f855 3b04 	ldr.w	r3, [r5], #4
 8005628:	4798      	blx	r3
 800562a:	3601      	adds	r6, #1
 800562c:	e7ee      	b.n	800560c <__libc_init_array+0xc>
 800562e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005632:	4798      	blx	r3
 8005634:	3601      	adds	r6, #1
 8005636:	e7f2      	b.n	800561e <__libc_init_array+0x1e>
 8005638:	080056dc 	.word	0x080056dc
 800563c:	080056dc 	.word	0x080056dc
 8005640:	080056dc 	.word	0x080056dc
 8005644:	080056e0 	.word	0x080056e0

08005648 <_init>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr

08005654 <_fini>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr
