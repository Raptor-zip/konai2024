
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800588c  0800588c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800588c  0800588c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800588c  0800588c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000010  080058a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  080058a4  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d1a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002774  00000000  00000000  00032d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6d  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c216  00000000  00000000  00037115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001271f  00000000  00000000  0005332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a79b0  00000000  00000000  00065a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041f4  00000000  00000000  0010d3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001115f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005818 	.word	0x08005818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005818 	.word	0x08005818

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	; 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f005 fad0 	bl	80057fc <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	; 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f9a6 	bl	80005fa <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	; 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8cd 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	; 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8ac 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	; 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f888 	bl	80004ea <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	; 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	; 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f864 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_ControlSpeed>:
void CyberGear_CurrentControlPram(CyberGear_Typedef *cyber, float kp, float ki,
		float gain);
void CyberGear_ControlSpeed(CyberGear_Typedef *cyber, float target_speed) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	ed87 0a00 	vstr	s0, [r7]
	cyber->cybermotion.velocity = target_speed;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
	union float_binary b_speed;
	b_speed.data = make_float_writedata(target_speed, V_MIN, V_MAX);
 8000442:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8000446:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 800044a:	ed97 0a00 	vldr	s0, [r7]
 800044e:	f7ff febb 	bl	80001c8 <make_float_writedata>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700A, b_speed.bin);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	461a      	mov	r2, r3
 8000460:	f247 010a 	movw	r1, #28682	; 0x700a
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f840 	bl	80004ea <CyberGear_WriteIndexParam>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af02      	add	r7, sp, #8
 8000478:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	b29a      	uxth	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7959      	ldrb	r1, [r3, #5]
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	460b      	mov	r3, r1
 8000494:	2103      	movs	r1, #3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff fec0 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80004a2:	200a      	movs	r0, #10
 80004a4:	4798      	blx	r3
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af02      	add	r7, sp, #8
 80004b4:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7959      	ldrb	r1, [r3, #5]
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	460b      	mov	r3, r1
 80004d0:	2104      	movs	r1, #4
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff fea2 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80004de:	200a      	movs	r0, #10
 80004e0:	4798      	blx	r3
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b08a      	sub	sp, #40	; 0x28
 80004ee:	af02      	add	r7, sp, #8
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	460b      	mov	r3, r1
 80004f4:	607a      	str	r2, [r7, #4]
 80004f6:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 8000504:	7d3b      	ldrb	r3, [r7, #20]
 8000506:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 8000508:	7d7b      	ldrb	r3, [r7, #21]
 800050a:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	789b      	ldrb	r3, [r3, #2]
 800051c:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	78db      	ldrb	r3, [r3, #3]
 8000522:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	b29a      	uxth	r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	7959      	ldrb	r1, [r3, #5]
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	460b      	mov	r3, r1
 8000536:	2112      	movs	r1, #18
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff fe6f 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000544:	2001      	movs	r0, #1
 8000546:	4798      	blx	r3
}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2200      	movs	r2, #0
 8000568:	639a      	str	r2, [r3, #56]	; 0x38
	ecan->filter.FilterIdLow = 0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	641a      	str	r2, [r3, #64]	; 0x40
	ecan->filter.FilterMaskIdLow = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	645a      	str	r2, [r3, #68]	; 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	649a      	str	r2, [r3, #72]	; 0x48

	if (can_nuumber == 1)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d103      	bne.n	8000590 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	64da      	str	r2, [r3, #76]	; 0x4c
 800058e:	e002      	b.n	8000596 <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	220e      	movs	r2, #14
 8000594:	64da      	str	r2, [r3, #76]	; 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	651a      	str	r2, [r3, #80]	; 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2201      	movs	r2, #1
 80005a0:	655a      	str	r2, [r3, #84]	; 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	659a      	str	r2, [r3, #88]	; 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	220e      	movs	r2, #14
 80005ac:	65da      	str	r2, [r3, #92]	; 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3338      	adds	r3, #56	; 0x38
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f000 ff0e 	bl	80013da <HAL_CAN_ConfigFilter>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <Easy_CAN6_Start+0x78>
		Error_Handler();
 80005c4:	f000 fb9a 	bl	8000cfc <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f916 	bl	8001800 <HAL_CAN_ActivateNotification>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 80005da:	f000 fb8f 	bl	8000cfc <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 ffc3 	bl	800156e <HAL_CAN_Start>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005ee:	f001 fa48 	bl	8001a82 <HAL_NVIC_SystemReset>

}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2204      	movs	r2, #4
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
	ecan->TxHeader.DLC = size;
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 800062c:	e000      	b.n	8000630 <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 800062e:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f8ae 	bl	8001796 <HAL_CAN_GetTxMailboxesFreeLevel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f6      	beq.n	800062e <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f103 0120 	add.w	r1, r3, #32
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	f000 ffd1 	bl	80015f6 <HAL_CAN_AddTxMessage>

}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[1], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_UART_TxCpltCallback+0x1c>)
 8000666:	2220      	movs	r2, #32
 8000668:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200000a0 	.word	0x200000a0

0800067c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <HAL_UART_RxCpltCallback+0x1c>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000508 	.word	0x20000508

0800069c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a2:	f000 fd15 	bl	80010d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a6:	f000 f969 	bl	800097c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006aa:	f000 fadd 	bl	8000c68 <MX_GPIO_Init>
	MX_DMA_Init();
 80006ae:	f000 fab5 	bl	8000c1c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80006b2:	f000 fa83 	bl	8000bbc <MX_USART2_UART_Init>
	MX_CAN_Init();
 80006b6:	f000 f9bb 	bl	8000a30 <MX_CAN_Init>
	MX_TIM1_Init();
 80006ba:	f000 f9ef 	bl	8000a9c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 80006be:	2202      	movs	r2, #2
 80006c0:	499c      	ldr	r1, [pc, #624]	; (8000934 <main+0x298>)
 80006c2:	489d      	ldr	r0, [pc, #628]	; (8000938 <main+0x29c>)
 80006c4:	f7ff ff44 	bl	8000550 <Easy_CAN6_Start>

	for (int i = 0; i < 4; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e03d      	b.n	800074a <main+0xae>
		if (is_run_CyberGear) {
			CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	22b0      	movs	r2, #176	; 0xb0
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	4a99      	ldr	r2, [pc, #612]	; (800093c <main+0x2a0>)
 80006d8:	1898      	adds	r0, r3, r2
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	3370      	adds	r3, #112	; 0x70
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b97      	ldr	r3, [pc, #604]	; (8000940 <main+0x2a4>)
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	4993      	ldr	r1, [pc, #588]	; (8000938 <main+0x29c>)
 80006ea:	f7ff fde4 	bl	80002b6 <CyberGear_Init>
			CyberGear_ResetMotor(&my_cyber[i]);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	22b0      	movs	r2, #176	; 0xb0
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	4a91      	ldr	r2, [pc, #580]	; (800093c <main+0x2a0>)
 80006f8:	4413      	add	r3, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fed7 	bl	80004ae <CyberGear_ResetMotor>
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	22b0      	movs	r2, #176	; 0xb0
 8000704:	fb02 f303 	mul.w	r3, r2, r3
 8000708:	4a8c      	ldr	r2, [pc, #560]	; (800093c <main+0x2a0>)
 800070a:	4413      	add	r3, r2
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fe0c 	bl	800032c <CyberGear_SetMode>
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	22b0      	movs	r2, #176	; 0xb0
 8000718:	fb02 f303 	mul.w	r3, r2, r3
 800071c:	4a87      	ldr	r2, [pc, #540]	; (800093c <main+0x2a0>)
 800071e:	4413      	add	r3, r2
 8000720:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 8000724:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8000728:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fde0 	bl	80002f2 <CyberGear_SetConfig>
			CyberGear_EnableMotor(&my_cyber[i]);
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	22b0      	movs	r2, #176	; 0xb0
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a80      	ldr	r2, [pc, #512]	; (800093c <main+0x2a0>)
 800073c:	4413      	add	r3, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fe97 	bl	8000472 <CyberGear_EnableMotor>
	for (int i = 0; i < 4; i++) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b03      	cmp	r3, #3
 800074e:	ddbe      	ble.n	80006ce <main+0x32>
		}
	}
	HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fd23 	bl	800119c <HAL_Delay>

	HAL_UART_Transmit_DMA(&huart2,
 8000756:	2221      	movs	r2, #33	; 0x21
 8000758:	497a      	ldr	r1, [pc, #488]	; (8000944 <main+0x2a8>)
 800075a:	487b      	ldr	r0, [pc, #492]	; (8000948 <main+0x2ac>)
 800075c:	f003 feac 	bl	80044b8 <HAL_UART_Transmit_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 8000760:	2108      	movs	r1, #8
 8000762:	487a      	ldr	r0, [pc, #488]	; (800094c <main+0x2b0>)
 8000764:	f001 fd36 	bl	80021d4 <HAL_GPIO_TogglePin>

		debug = HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 8000768:	2207      	movs	r2, #7
 800076a:	4979      	ldr	r1, [pc, #484]	; (8000950 <main+0x2b4>)
 800076c:	4876      	ldr	r0, [pc, #472]	; (8000948 <main+0x2ac>)
 800076e:	f003 ff1f 	bl	80045b0 <HAL_UART_Receive_DMA>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b77      	ldr	r3, [pc, #476]	; (8000954 <main+0x2b8>)
 8000778:	701a      	strb	r2, [r3, #0]

		debug_2 = rcvBuffer[0];
 800077a:	4b75      	ldr	r3, [pc, #468]	; (8000950 <main+0x2b4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b75      	ldr	r3, [pc, #468]	; (8000958 <main+0x2bc>)
 8000782:	801a      	strh	r2, [r3, #0]
		if(rcvBuffer[0] == 0){
 8000784:	4b72      	ldr	r3, [pc, #456]	; (8000950 <main+0x2b4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10b      	bne.n	80007a4 <main+0x108>
			memcpy(buf, &rcvBuffer[1], sizeof(buf));
 800078c:	4a73      	ldr	r2, [pc, #460]	; (800095c <main+0x2c0>)
 800078e:	4b70      	ldr	r3, [pc, #448]	; (8000950 <main+0x2b4>)
 8000790:	4614      	mov	r4, r2
 8000792:	1c5d      	adds	r5, r3, #1
 8000794:	6828      	ldr	r0, [r5, #0]
 8000796:	6869      	ldr	r1, [r5, #4]
 8000798:	68aa      	ldr	r2, [r5, #8]
 800079a:	68eb      	ldr	r3, [r5, #12]
 800079c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079e:	6928      	ldr	r0, [r5, #16]
 80007a0:	6020      	str	r0, [r4, #0]
 80007a2:	e007      	b.n	80007b4 <main+0x118>
		}else{
			memcpy(buf, &rcvBuffer[0], sizeof(buf));
 80007a4:	4a6d      	ldr	r2, [pc, #436]	; (800095c <main+0x2c0>)
 80007a6:	4b6a      	ldr	r3, [pc, #424]	; (8000950 <main+0x2b4>)
 80007a8:	4614      	mov	r4, r2
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	682b      	ldr	r3, [r5, #0]
 80007b2:	6023      	str	r3, [r4, #0]
 80007b4:	4b69      	ldr	r3, [pc, #420]	; (800095c <main+0x2c0>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
		}

		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
 80007b8:	4b69      	ldr	r3, [pc, #420]	; (8000960 <main+0x2c4>)
 80007ba:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[2];
 80007bc:	4b67      	ldr	r3, [pc, #412]	; (800095c <main+0x2c0>)
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	723b      	strb	r3, [r7, #8]
		reversed_bytes[1] = buf[1];
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <main+0x2c0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	727b      	strb	r3, [r7, #9]
 80007c8:	893a      	ldrh	r2, [r7, #8]
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 80007ca:	4b66      	ldr	r3, [pc, #408]	; (8000964 <main+0x2c8>)
 80007cc:	801a      	strh	r2, [r3, #0]
 80007ce:	4b63      	ldr	r3, [pc, #396]	; (800095c <main+0x2c0>)
 80007d0:	f8d3 3003 	ldr.w	r3, [r3, #3]

		uint8_t _temp_command_content[4];
		memcpy(_temp_command_content, &buf[3], sizeof(float));
 80007d4:	607b      	str	r3, [r7, #4]
		// バイト列を逆順にコピー
		for (int j = 0; j < 4; j++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	e00f      	b.n	80007fc <main+0x160>
			reversed_bytes[j] = _temp_command_content[3 - j];
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	f1c3 0303 	rsb	r3, r3, #3
 80007e2:	3318      	adds	r3, #24
 80007e4:	443b      	add	r3, r7
 80007e6:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80007ea:	f107 0208 	add.w	r2, r7, #8
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	4413      	add	r3, r2
 80007f2:	460a      	mov	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	3301      	adds	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	ddec      	ble.n	80007dc <main+0x140>
 8000802:	68bb      	ldr	r3, [r7, #8]
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 8000804:	4a58      	ldr	r2, [pc, #352]	; (8000968 <main+0x2cc>)
 8000806:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

		switch (command_id) {
 8000808:	4b56      	ldr	r3, [pc, #344]	; (8000964 <main+0x2c8>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	3b16      	subs	r3, #22
 800080e:	2b06      	cmp	r3, #6
 8000810:	f200 808b 	bhi.w	800092a <main+0x28e>
 8000814:	a201      	add	r2, pc, #4	; (adr r2, 800081c <main+0x180>)
 8000816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081a:	bf00      	nop
 800081c:	08000839 	.word	0x08000839
 8000820:	0800092b 	.word	0x0800092b
 8000824:	08000853 	.word	0x08000853
 8000828:	0800092b 	.word	0x0800092b
 800082c:	0800086d 	.word	0x0800086d
 8000830:	08000887 	.word	0x08000887
 8000834:	08000911 	.word	0x08000911
		case 22:
			motor_speed[0] = command_content;
 8000838:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <main+0x2cc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a4b      	ldr	r2, [pc, #300]	; (800096c <main+0x2d0>)
 800083e:	6013      	str	r3, [r2, #0]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[0], (float) motor_speed[0]);
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <main+0x2d0>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	eeb0 0a67 	vmov.f32	s0, s15
 800084a:	483c      	ldr	r0, [pc, #240]	; (800093c <main+0x2a0>)
 800084c:	f7ff fdf0 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000850:	e06b      	b.n	800092a <main+0x28e>

		case 24:
			motor_speed[1] = command_content;
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <main+0x2cc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a45      	ldr	r2, [pc, #276]	; (800096c <main+0x2d0>)
 8000858:	6053      	str	r3, [r2, #4]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[1], (float) motor_speed[1]);
 800085a:	4b44      	ldr	r3, [pc, #272]	; (800096c <main+0x2d0>)
 800085c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	4842      	ldr	r0, [pc, #264]	; (8000970 <main+0x2d4>)
 8000866:	f7ff fde3 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 800086a:	e05e      	b.n	800092a <main+0x28e>

		case 26:
			motor_speed[2] = command_content;
 800086c:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <main+0x2cc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <main+0x2d0>)
 8000872:	6093      	str	r3, [r2, #8]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[2], (float) motor_speed[2]);
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <main+0x2d0>)
 8000876:	edd3 7a02 	vldr	s15, [r3, #8]
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	483d      	ldr	r0, [pc, #244]	; (8000974 <main+0x2d8>)
 8000880:	f7ff fdd6 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000884:	e051      	b.n	800092a <main+0x28e>

		case 27:
			for (int i = 0; i < 4; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e03d      	b.n	8000908 <main+0x26c>
				if (is_run_CyberGear) {
					CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	22b0      	movs	r2, #176	; 0xb0
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	4a29      	ldr	r2, [pc, #164]	; (800093c <main+0x2a0>)
 8000896:	1898      	adds	r0, r3, r2
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	3370      	adds	r3, #112	; 0x70
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <main+0x2a4>)
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2300      	movs	r3, #0
 80008a6:	4924      	ldr	r1, [pc, #144]	; (8000938 <main+0x29c>)
 80008a8:	f7ff fd05 	bl	80002b6 <CyberGear_Init>
					CyberGear_ResetMotor(&my_cyber[i]);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	22b0      	movs	r2, #176	; 0xb0
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <main+0x2a0>)
 80008b6:	4413      	add	r3, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fdf8 	bl	80004ae <CyberGear_ResetMotor>
					CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	22b0      	movs	r2, #176	; 0xb0
 80008c2:	fb02 f303 	mul.w	r3, r2, r3
 80008c6:	4a1d      	ldr	r2, [pc, #116]	; (800093c <main+0x2a0>)
 80008c8:	4413      	add	r3, r2
 80008ca:	2102      	movs	r1, #2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fd2d 	bl	800032c <CyberGear_SetMode>
					CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	22b0      	movs	r2, #176	; 0xb0
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <main+0x2a0>)
 80008dc:	4413      	add	r3, r2
 80008de:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 80008e2:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80008e6:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fd01 	bl	80002f2 <CyberGear_SetConfig>
					CyberGear_EnableMotor(&my_cyber[i]);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	22b0      	movs	r2, #176	; 0xb0
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <main+0x2a0>)
 80008fa:	4413      	add	r3, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fdb8 	bl	8000472 <CyberGear_EnableMotor>
			for (int i = 0; i < 4; i++) {
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b03      	cmp	r3, #3
 800090c:	ddbe      	ble.n	800088c <main+0x1f0>
				}
			}
			break;
 800090e:	e00c      	b.n	800092a <main+0x28e>

		case 28:
			motor_speed[3] = command_content;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <main+0x2cc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <main+0x2d0>)
 8000916:	60d3      	str	r3, [r2, #12]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[3], (float) motor_speed[3]);
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <main+0x2d0>)
 800091a:	edd3 7a03 	vldr	s15, [r3, #12]
 800091e:	eeb0 0a67 	vmov.f32	s0, s15
 8000922:	4815      	ldr	r0, [pc, #84]	; (8000978 <main+0x2dc>)
 8000924:	f7ff fd84 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000928:	bf00      	nop
		}

		HAL_Delay(9);
 800092a:	2009      	movs	r0, #9
 800092c:	f000 fc36 	bl	800119c <HAL_Delay>
	while (1) {
 8000930:	e716      	b.n	8000760 <main+0xc4>
 8000932:	bf00      	nop
 8000934:	2000002c 	.word	0x2000002c
 8000938:	20000474 	.word	0x20000474
 800093c:	200001b4 	.word	0x200001b4
 8000940:	0800119d 	.word	0x0800119d
 8000944:	08005830 	.word	0x08005830
 8000948:	200000a0 	.word	0x200000a0
 800094c:	48000400 	.word	0x48000400
 8000950:	2000050c 	.word	0x2000050c
 8000954:	200001b0 	.word	0x200001b0
 8000958:	20000000 	.word	0x20000000
 800095c:	200004ec 	.word	0x200004ec
 8000960:	20000500 	.word	0x20000500
 8000964:	20000502 	.word	0x20000502
 8000968:	20000504 	.word	0x20000504
 800096c:	200004dc 	.word	0x200004dc
 8000970:	20000264 	.word	0x20000264
 8000974:	20000314 	.word	0x20000314
 8000978:	200003c4 	.word	0x200003c4

0800097c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b096      	sub	sp, #88	; 0x58
 8000980:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000986:	2228      	movs	r2, #40	; 0x28
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 ff09 	bl	80057a2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b0:	2302      	movs	r3, #2
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80009c4:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80009c8:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fc1a 	bl	8002208 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x62>
		Error_Handler();
 80009da:	f000 f98f 	bl	8000cfc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fc42 	bl	8003284 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x8e>
		Error_Handler();
 8000a06:	f000 f979 	bl	8000cfc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fe6a 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xaa>
		Error_Handler();
 8000a22:	f000 f96b 	bl	8000cfc <Error_Handler>
	}
}
 8000a26:	bf00      	nop
 8000a28:	3758      	adds	r7, #88	; 0x58
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_CAN_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a4e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000a52:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a5a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a82:	f000 fbaf 	bl	80011e4 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN_Init+0x60>
		Error_Handler();
 8000a8c:	f000 f936 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000002c 	.word	0x2000002c
 8000a98:	40006400 	.word	0x40006400

08000a9c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b096      	sub	sp, #88	; 0x58
 8000aa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	222c      	movs	r2, #44	; 0x2c
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fe6a 	bl	80057a2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000ad0:	4a39      	ldr	r2, [pc, #228]	; (8000bb8 <MX_TIM1_Init+0x11c>)
 8000ad2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000ad4:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000afa:	482e      	ldr	r0, [pc, #184]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000afc:	f002 ff1e 	bl	800393c <HAL_TIM_PWM_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000b06:	f000 f8f9 	bl	8000cfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4825      	ldr	r0, [pc, #148]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000b1e:	f003 fb97 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b28:	f000 f8e8 	bl	8000cfc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2c:	2360      	movs	r3, #96	; 0x60
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b34:	2300      	movs	r3, #0
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000b52:	f002 ff4b 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000b5c:	f000 f8ce 	bl	8000cfc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000b96:	f003 fbc9 	bl	800432c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000ba0:	f000 f8ac 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <MX_TIM1_Init+0x118>)
 8000ba6:	f000 f937 	bl	8000e18 <HAL_TIM_MspPostInit>
}
 8000baa:	bf00      	nop
 8000bac:	3758      	adds	r7, #88	; 0x58
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000054 	.word	0x20000054
 8000bb8:	40012c00 	.word	0x40012c00

08000bbc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_USART2_UART_Init+0x5c>)
 8000bca:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000be0:	220c      	movs	r2, #12
 8000be2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_USART2_UART_Init+0x54>)
 8000bfe:	f003 fc0d 	bl	800441c <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x50>
		Error_Handler();
 8000c08:	f000 f878 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000a0 	.word	0x200000a0
 8000c14:	40004400 	.word	0x40004400
 8000c18:	0007a120 	.word	0x0007a120

08000c1c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_DMA_Init+0x48>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_DMA_Init+0x48>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_DMA_Init+0x48>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f000 fef5 	bl	8001a2e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c44:	2010      	movs	r0, #16
 8000c46:	f000 ff0e 	bl	8001a66 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2011      	movs	r0, #17
 8000c50:	f000 feed 	bl	8001a2e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c54:	2011      	movs	r0, #17
 8000c56:	f000 ff06 	bl	8001a66 <HAL_NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_GPIO_Init+0x8c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2108      	movs	r1, #8
 8000cca:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <MX_GPIO_Init+0x90>)
 8000ccc:	f001 fa6a 	bl	80021a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_GPIO_Init+0x90>)
 8000ce8:	f001 f8ea 	bl	8001ec0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_CAN_MspInit+0x80>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d129      	bne.n	8000dc6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_CAN_MspInit+0x84>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_CAN_MspInit+0x84>)
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_CAN_MspInit+0x84>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_CAN_MspInit+0x84>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_CAN_MspInit+0x84>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_CAN_MspInit+0x84>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000da2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000db4:	2309      	movs	r3, #9
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f001 f87d 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40006400 	.word	0x40006400
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_TIM_PWM_MspInit+0x38>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10b      	bne.n	8000e02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <HAL_TIM_MspPostInit+0x68>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d11d      	bne.n	8000e76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e64:	2306      	movs	r3, #6
 8000e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 f825 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012c00 	.word	0x40012c00
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a42      	ldr	r2, [pc, #264]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d17d      	bne.n	8000fa6 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a41      	ldr	r2, [pc, #260]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a3b      	ldr	r2, [pc, #236]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000eda:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 ffe1 	bl	8001ec0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f00:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <HAL_UART_MspInit+0x134>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f06:	2210      	movs	r2, #16
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f2e:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f30:	f000 fdb7 	bl	8001aa2 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000f3a:	f7ff fedf 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f42:	671a      	str	r2, [r3, #112]	; 0x70
 8000f44:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_UART_MspInit+0x13c>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f70:	2220      	movs	r2, #32
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f7c:	f000 fd91 	bl	8001aa2 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000f86:	f7ff feb9 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f8e:	675a      	str	r2, [r3, #116]	; 0x74
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2026      	movs	r0, #38	; 0x26
 8000f9c:	f000 fd47 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa0:	2026      	movs	r0, #38	; 0x26
 8000fa2:	f000 fd60 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	20000128 	.word	0x20000128
 8000fbc:	40020080 	.word	0x40020080
 8000fc0:	2000016c 	.word	0x2000016c
 8000fc4:	4002006c 	.word	0x4002006c

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f8a2 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA1_Channel6_IRQHandler+0x10>)
 8001022:	f000 fe5b 	bl	8001cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000016c 	.word	0x2000016c

08001030 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA1_Channel7_IRQHandler+0x10>)
 8001036:	f000 fe51 	bl	8001cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000128 	.word	0x20000128

08001044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <USART2_IRQHandler+0x10>)
 800104a:	f003 faf5 	bl	8004638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000a0 	.word	0x200000a0

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fb83 	bl	80057b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff faf5 	bl	800069c <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010c0:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 80010c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010c8:	20000530 	.word	0x20000530

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x28>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 fc99 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fe0c 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fcb5 	bl	8001a8a <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	f000 fc79 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000004 	.word	0x20000004
 8001154:	2000000c 	.word	0x2000000c
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c
 8001180:	2000052c 	.word	0x2000052c

08001184 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;  
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000052c 	.word	0x2000052c

0800119c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0ed      	b.n	80013d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fda4 	bl	8000d50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff ffb4 	bl	8001184 <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800121e:	e012      	b.n	8001246 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001220:	f7ff ffb0 	bl	8001184 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d90b      	bls.n	8001246 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2205      	movs	r2, #5
 800123e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0c5      	b.n	80013d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0e5      	beq.n	8001220 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0202 	bic.w	r2, r2, #2
 8001262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001264:	f7ff ff8e 	bl	8001184 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800126a:	e012      	b.n	8001292 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff ff8a 	bl	8001184 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d90b      	bls.n	8001292 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2205      	movs	r2, #5
 800128a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e09f      	b.n	80013d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e5      	bne.n	800126c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7e1b      	ldrb	r3, [r3, #24]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e007      	b.n	80012ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7e5b      	ldrb	r3, [r3, #25]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d108      	bne.n	80012e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e007      	b.n	80012f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d108      	bne.n	800130e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e007      	b.n	800131e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0220 	bic.w	r2, r2, #32
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7edb      	ldrb	r3, [r3, #27]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d108      	bne.n	8001338 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0210 	bic.w	r2, r2, #16
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e007      	b.n	8001348 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0210 	orr.w	r2, r2, #16
 8001346:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d108      	bne.n	8001362 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0208 	orr.w	r2, r2, #8
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e007      	b.n	8001372 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0208 	bic.w	r2, r2, #8
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7f5b      	ldrb	r3, [r3, #29]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0204 	orr.w	r2, r2, #4
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e007      	b.n	800139c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0204 	bic.w	r2, r2, #4
 800139a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	ea42 0103 	orr.w	r1, r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	1e5a      	subs	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013da:	b480      	push	{r7}
 80013dc:	b087      	sub	sp, #28
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d003      	beq.n	8001400 <HAL_CAN_ConfigFilter+0x26>
 80013f8:	7cfb      	ldrb	r3, [r7, #19]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	f040 80aa 	bne.w	8001554 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	f003 031f 	and.w	r3, r3, #31
 8001418:	2201      	movs	r2, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d123      	bne.n	8001482 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800145c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3248      	adds	r2, #72	; 0x48
 8001462:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001476:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001478:	6979      	ldr	r1, [r7, #20]
 800147a:	3348      	adds	r3, #72	; 0x48
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d122      	bne.n	80014d0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	431a      	orrs	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3248      	adds	r2, #72	; 0x48
 80014b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	3348      	adds	r3, #72	; 0x48
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014ea:	e007      	b.n	80014fc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001516:	e007      	b.n	8001528 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	431a      	orrs	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001546:	f023 0201 	bic.w	r2, r3, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e006      	b.n	8001562 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12e      	bne.n	80015e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2202      	movs	r2, #2
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800159a:	f7ff fdf3 	bl	8001184 <HAL_GetTick>
 800159e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015a0:	e012      	b.n	80015c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a2:	f7ff fdef 	bl	8001184 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b0a      	cmp	r3, #10
 80015ae:	d90b      	bls.n	80015c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2205      	movs	r2, #5
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e012      	b.n	80015ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1e5      	bne.n	80015a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e006      	b.n	80015ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
  }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b089      	sub	sp, #36	; 0x24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001614:	7ffb      	ldrb	r3, [r7, #31]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d003      	beq.n	8001622 <HAL_CAN_AddTxMessage+0x2c>
 800161a:	7ffb      	ldrb	r3, [r7, #31]
 800161c:	2b02      	cmp	r3, #2
 800161e:	f040 80ad 	bne.w	800177c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10a      	bne.n	8001642 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8095 	beq.w	800176c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	0e1b      	lsrs	r3, r3, #24
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800164c:	2201      	movs	r2, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	409a      	lsls	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	431a      	orrs	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3318      	adds	r3, #24
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	440b      	add	r3, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e00f      	b.n	800169a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001684:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800168e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3318      	adds	r3, #24
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	440b      	add	r3, r1
 80016aa:	3304      	adds	r3, #4
 80016ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	7d1b      	ldrb	r3, [r3, #20]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d111      	bne.n	80016da <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3318      	adds	r3, #24
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6811      	ldr	r1, [r2, #0]
 80016ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3318      	adds	r3, #24
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	440b      	add	r3, r1
 80016d6:	3304      	adds	r3, #4
 80016d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3307      	adds	r3, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	061a      	lsls	r2, r3, #24
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3306      	adds	r3, #6
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3305      	adds	r3, #5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	4313      	orrs	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	3204      	adds	r2, #4
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4610      	mov	r0, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	ea43 0200 	orr.w	r2, r3, r0
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001710:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3302      	adds	r3, #2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4610      	mov	r0, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	6811      	ldr	r1, [r2, #0]
 8001738:	ea43 0200 	orr.w	r2, r3, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001746:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3318      	adds	r3, #24
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3318      	adds	r3, #24
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	440b      	add	r3, r1
 8001766:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	e00e      	b.n	800178a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e006      	b.n	800178a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d002      	beq.n	80017b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d11d      	bne.n	80017f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d002      	beq.n	800181e <HAL_CAN_ActivateNotification+0x1e>
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d109      	bne.n	8001832 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6959      	ldr	r1, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e006      	b.n	8001840 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
  }
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <__NVIC_SystemReset+0x24>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019ba:	4904      	ldr	r1, [pc, #16]	; (80019cc <__NVIC_SystemReset+0x24>)
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_SystemReset+0x28>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019c2:	f3bf 8f4f 	dsb	sy
}
 80019c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <__NVIC_SystemReset+0x20>
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	05fa0004 	.word	0x05fa0004

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f8:	f7ff ff78 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff13 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff28 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff78 	bl	8001940 <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff47 	bl	80018ec <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff1b 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001a86:	f7ff ff8f 	bl	80019a8 <__NVIC_SystemReset>

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff9e 	bl	80019d4 <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e037      	b.n	8001b28 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ace:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ad2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f9b8 	bl	8001e80 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}  
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_DMA_Start_IT+0x20>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e04a      	b.n	8001be6 <HAL_DMA_Start_IT+0xb6>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d13a      	bne.n	8001bd8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f94b 	bl	8001e22 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 020e 	orr.w	r2, r2, #14
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e00f      	b.n	8001bc6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 020a 	orr.w	r2, r2, #10
 8001bb4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0204 	bic.w	r2, r2, #4
 8001bc4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e005      	b.n	8001be4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d008      	beq.n	8001c12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e020      	b.n	8001c54 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 020e 	bic.w	r2, r2, #14
 8001c20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d005      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e027      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 020e 	bic.w	r2, r2, #14
 8001c90:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
    } 
  }
  return status;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d024      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x72>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01f      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	2104      	movs	r1, #4
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d06a      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d4c:	e065      	b.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2202      	movs	r2, #2
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02c      	beq.n	8001db8 <HAL_DMA_IRQHandler+0xdc>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d027      	beq.n	8001db8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 020a 	bic.w	r2, r2, #10
 8001d84:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	2102      	movs	r1, #2
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d035      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001db6:	e030      	b.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d028      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d023      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 020e 	bic.w	r2, r2, #14
 8001de0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
    }
  }
}  
 8001e18:	e7ff      	b.n	8001e1a <HAL_DMA_IRQHandler+0x13e>
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d108      	bne.n	8001e62 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e60:	e007      	b.n	8001e72 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	60da      	str	r2, [r3, #12]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <DMA_CalcBaseAndBitshift+0x34>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <DMA_CalcBaseAndBitshift+0x38>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	009a      	lsls	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <DMA_CalcBaseAndBitshift+0x3c>)
 8001ea4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	bffdfff8 	.word	0xbffdfff8
 8001eb8:	cccccccd 	.word	0xcccccccd
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e14e      	b.n	800216e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8140 	beq.w	8002168 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d005      	beq.n	8001f00 <HAL_GPIO_Init+0x40>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d130      	bne.n	8001f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f36:	2201      	movs	r2, #1
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0201 	and.w	r2, r3, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d017      	beq.n	8001f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d123      	bne.n	8001ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0203 	and.w	r2, r3, #3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 809a 	beq.w	8002168 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <HAL_GPIO_Init+0x2cc>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_GPIO_Init+0x2cc>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_GPIO_Init+0x2cc>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800204c:	4a50      	ldr	r2, [pc, #320]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002076:	d013      	beq.n	80020a0 <HAL_GPIO_Init+0x1e0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <HAL_GPIO_Init+0x2d4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00d      	beq.n	800209c <HAL_GPIO_Init+0x1dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a45      	ldr	r2, [pc, #276]	; (8002198 <HAL_GPIO_Init+0x2d8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x1d8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a44      	ldr	r2, [pc, #272]	; (800219c <HAL_GPIO_Init+0x2dc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_GPIO_Init+0x1d4>
 8002090:	2303      	movs	r3, #3
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 8002094:	2305      	movs	r3, #5
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 8002098:	2302      	movs	r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 80020a0:	2300      	movs	r3, #0
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b2:	4937      	ldr	r1, [pc, #220]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020e4:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800210e:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f aea9 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	48000400 	.word	0x48000400
 8002198:	48000800 	.word	0x48000800
 800219c:	48000c00 	.word	0x48000c00
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43d9      	mvns	r1, r3
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	400b      	ands	r3, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800220e:	af00      	add	r7, sp, #0
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002218:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f001 b823 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 817d 	beq.w	800253e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002244:	4bbc      	ldr	r3, [pc, #752]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002250:	4bb9      	ldr	r3, [pc, #740]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d15c      	bne.n	8002316 <HAL_RCC_OscConfig+0x10e>
 800225c:	4bb6      	ldr	r3, [pc, #728]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d155      	bne.n	8002316 <HAL_RCC_OscConfig+0x10e>
 800226a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0x94>
 8002296:	4ba8      	ldr	r3, [pc, #672]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e015      	b.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 800229c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022c4:	4b9c      	ldr	r3, [pc, #624]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022d4:	fa92 f2a2 	rbit	r2, r2
 80022d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f042 0220 	orr.w	r2, r2, #32
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 811f 	beq.w	800253c <HAL_RCC_OscConfig+0x334>
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8116 	bne.w	800253c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f000 bfaf 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x12e>
 8002328:	4b83      	ldr	r3, [pc, #524]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a82      	ldr	r2, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e036      	b.n	80023a4 <HAL_RCC_OscConfig+0x19c>
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x158>
 8002346:	4b7c      	ldr	r3, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7b      	ldr	r2, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b79      	ldr	r3, [pc, #484]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a78      	ldr	r2, [pc, #480]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e021      	b.n	80023a4 <HAL_RCC_OscConfig+0x19c>
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x184>
 8002372:	4b71      	ldr	r3, [pc, #452]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a70      	ldr	r2, [pc, #448]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6e      	ldr	r3, [pc, #440]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6d      	ldr	r2, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x19c>
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a69      	ldr	r2, [pc, #420]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b67      	ldr	r3, [pc, #412]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a4:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f023 020f 	bic.w	r2, r3, #15
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	495f      	ldr	r1, [pc, #380]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d059      	beq.n	8002482 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fed9 	bl	8001184 <HAL_GetTick>
 80023d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fed4 	bl	8001184 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d902      	bls.n	80023ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f000 bf43 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
 80023ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002402:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_RCC_OscConfig+0x218>
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	e015      	b.n	800244c <HAL_RCC_OscConfig+0x244>
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002438:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800243c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002448:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002450:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002454:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002458:	fa92 f2a2 	rbit	r2, r2
 800245c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002460:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ab      	beq.n	80023d8 <HAL_RCC_OscConfig+0x1d0>
 8002480:	e05d      	b.n	800253e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe fe7f 	bl	8001184 <HAL_GetTick>
 8002486:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fe7a 	bl	8001184 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b64      	cmp	r3, #100	; 0x64
 800249a:	d902      	bls.n	80024a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	f000 bee9 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
 80024a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2cc>
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e015      	b.n	8002500 <HAL_RCC_OscConfig+0x2f8>
 80024d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_RCC_OscConfig+0x330>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002504:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002508:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800250c:	fa92 f2a2 	rbit	r2, r2
 8002510:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002514:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ab      	bne.n	800248c <HAL_RCC_OscConfig+0x284>
 8002534:	e003      	b.n	800253e <HAL_RCC_OscConfig+0x336>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 817d 	beq.w	800284e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002554:	4ba6      	ldr	r3, [pc, #664]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00b      	beq.n	8002578 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002560:	4ba3      	ldr	r3, [pc, #652]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d172      	bne.n	8002652 <HAL_RCC_OscConfig+0x44a>
 800256c:	4ba0      	ldr	r3, [pc, #640]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d16c      	bne.n	8002652 <HAL_RCC_OscConfig+0x44a>
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800258a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3a0>
 80025a2:	4b93      	ldr	r3, [pc, #588]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e013      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c8>
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025cc:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCC_OscConfig+0x410>
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d002      	beq.n	8002618 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f000 be2e 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	21f8      	movs	r1, #248	; 0xf8
 800262e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002636:	fa91 f1a1 	rbit	r1, r1
 800263a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800263e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002642:	fab1 f181 	clz	r1, r1
 8002646:	b2c9      	uxtb	r1, r1
 8002648:	408b      	lsls	r3, r1
 800264a:	4969      	ldr	r1, [pc, #420]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002650:	e0fd      	b.n	800284e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8088 	beq.w	8002774 <HAL_RCC_OscConfig+0x56c>
 8002664:	2301      	movs	r3, #1
 8002666:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002676:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002684:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	461a      	mov	r2, r3
 800268c:	2301      	movs	r3, #1
 800268e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fd78 	bl	8001184 <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fd73 	bl	8001184 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d902      	bls.n	80026b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 bde2 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d102      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4d8>
 80026da:	4b45      	ldr	r3, [pc, #276]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	e013      	b.n	8002708 <HAL_RCC_OscConfig+0x500>
 80026e0:	2302      	movs	r3, #2
 80026e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2202      	movs	r2, #2
 800270a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800270e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002712:	fa92 f2a2 	rbit	r2, r2
 8002716:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800271a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f002 021f 	and.w	r2, r2, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0af      	beq.n	800269a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	21f8      	movs	r1, #248	; 0xf8
 8002750:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002758:	fa91 f1a1 	rbit	r1, r1
 800275c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002760:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002764:	fab1 f181 	clz	r1, r1
 8002768:	b2c9      	uxtb	r1, r1
 800276a:	408b      	lsls	r3, r1
 800276c:	4920      	ldr	r1, [pc, #128]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
 8002772:	e06c      	b.n	800284e <HAL_RCC_OscConfig+0x646>
 8002774:	2301      	movs	r3, #1
 8002776:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002786:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002794:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	461a      	mov	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fcf0 	bl	8001184 <HAL_GetTick>
 80027a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fceb 	bl	8001184 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	f000 bd5a 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d104      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5ec>
 80027ea:	4b01      	ldr	r3, [pc, #4]	; (80027f0 <HAL_RCC_OscConfig+0x5e8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	e015      	b.n	800281c <HAL_RCC_OscConfig+0x614>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	2302      	movs	r3, #2
 80027f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800280c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002818:	4bc8      	ldr	r3, [pc, #800]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2202      	movs	r2, #2
 800281e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002822:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002826:	fa92 f2a2 	rbit	r2, r2
 800282a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800282e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002832:	fab2 f282 	clz	r2, r2
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f042 0220 	orr.w	r2, r2, #32
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f002 021f 	and.w	r2, r2, #31
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f202 	lsl.w	r2, r1, r2
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ad      	bne.n	80027aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8110 	beq.w	8002a84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d079      	beq.n	8002968 <HAL_RCC_OscConfig+0x760>
 8002874:	2301      	movs	r3, #1
 8002876:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	4bab      	ldr	r3, [pc, #684]	; (8002b40 <HAL_RCC_OscConfig+0x938>)
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	461a      	mov	r2, r3
 800289a:	2301      	movs	r3, #1
 800289c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289e:	f7fe fc71 	bl	8001184 <HAL_GetTick>
 80028a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fc6c 	bl	8001184 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d902      	bls.n	80028be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	f000 bcdb 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028d8:	2202      	movs	r2, #2
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028fc:	2202      	movs	r2, #2
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f2a3 	rbit	r2, r3
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002916:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002918:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 800291a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002924:	2102      	movs	r1, #2
 8002926:	6019      	str	r1, [r3, #0]
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f1a3 	rbit	r1, r3
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800293e:	6019      	str	r1, [r3, #0]
  return result;
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0a0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x6a0>
 8002966:	e08d      	b.n	8002a84 <HAL_RCC_OscConfig+0x87c>
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800298a:	601a      	str	r2, [r3, #0]
  return result;
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002994:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x938>)
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	461a      	mov	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe fbeb 	bl	8001184 <HAL_GetTick>
 80029ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fbe6 	bl	8001184 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d902      	bls.n	80029ca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	f000 bc55 	b.w	8003274 <HAL_RCC_OscConfig+0x106c>
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029d2:	2202      	movs	r2, #2
 80029d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029f6:	2202      	movs	r2, #2
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a42:	2102      	movs	r1, #2
 8002a44:	6019      	str	r1, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f1a3 	rbit	r1, r3
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a5c:	6019      	str	r1, [r3, #0]
  return result;
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d197      	bne.n	80029b4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 81a1 	beq.w	8002ddc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	61d3      	str	r3, [r2, #28]
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ad2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_OscConfig+0x93c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_RCC_OscConfig+0x93c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <HAL_RCC_OscConfig+0x93c>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fb47 	bl	8001184 <HAL_GetTick>
 8002af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	e009      	b.n	8002b10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fb42 	bl	8001184 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e3b1      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x93c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_OscConfig+0x940>
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a02      	ldr	r2, [pc, #8]	; (8002b3c <HAL_RCC_OscConfig+0x934>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	e03c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x9ac>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	10908120 	.word	0x10908120
 8002b44:	40007000 	.word	0x40007000
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10c      	bne.n	8002b72 <HAL_RCC_OscConfig+0x96a>
 8002b58:	4bc1      	ldr	r3, [pc, #772]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4ac0      	ldr	r2, [pc, #768]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	4bbe      	ldr	r3, [pc, #760]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4abd      	ldr	r2, [pc, #756]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	e020      	b.n	8002bb4 <HAL_RCC_OscConfig+0x9ac>
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x994>
 8002b82:	4bb7      	ldr	r3, [pc, #732]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4ab6      	ldr	r2, [pc, #728]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	4bb4      	ldr	r3, [pc, #720]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4ab3      	ldr	r2, [pc, #716]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x9ac>
 8002b9c:	4bb0      	ldr	r3, [pc, #704]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4aaf      	ldr	r2, [pc, #700]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	4bad      	ldr	r3, [pc, #692]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4aac      	ldr	r2, [pc, #688]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8081 	beq.w	8002cc8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fadd 	bl	8001184 <HAL_GetTick>
 8002bca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fad8 	bl	8001184 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e345      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c14:	2202      	movs	r2, #2
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c2e:	601a      	str	r2, [r3, #0]
  return result;
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_OscConfig+0xa4c>
 8002c4e:	4b84      	ldr	r3, [pc, #528]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0xa74>
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c84:	2102      	movs	r1, #2
 8002c86:	6011      	str	r1, [r2, #0]
 8002c88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	fa92 f1a2 	rbit	r1, r2
 8002c96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c9a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ca4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f002 021f 	and.w	r2, r2, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d084      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x9c8>
 8002cc6:	e07f      	b.n	8002dc8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fa5c 	bl	8001184 <HAL_GetTick>
 8002ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00b      	b.n	8002cea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe fa57 	bl	8001184 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e2c4      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d30:	601a      	str	r2, [r3, #0]
  return result;
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_OscConfig+0xb4e>
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	e013      	b.n	8002d7e <HAL_RCC_OscConfig+0xb76>
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d86:	2102      	movs	r1, #2
 8002d88:	6011      	str	r1, [r2, #0]
 8002d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	fa92 f1a2 	rbit	r1, r2
 8002d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002da0:	6011      	str	r1, [r2, #0]
  return result;
 8002da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	fab2 f282 	clz	r2, r2
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f002 021f 	and.w	r2, r2, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d184      	bne.n	8002cd2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8242 	beq.w	8003272 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_OscConfig+0xc58>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	f000 8213 	beq.w	8003222 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	f040 8162 	bne.w	80030d2 <HAL_RCC_OscConfig+0xeca>
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e32:	601a      	str	r2, [r3, #0]
  return result;
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2300      	movs	r3, #0
 8002e52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe f996 	bl	8001184 <HAL_GetTick>
 8002e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCC_OscConfig+0xc70>
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe f98e 	bl	8001184 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1fd      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e9c:	601a      	str	r2, [r3, #0]
  return result;
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ea6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d102      	bne.n	8002ec2 <HAL_RCC_OscConfig+0xcba>
 8002ebc:	4bb0      	ldr	r3, [pc, #704]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	e027      	b.n	8002f12 <HAL_RCC_OscConfig+0xd0a>
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4b9c      	ldr	r3, [pc, #624]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f16:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f1e:	6011      	str	r1, [r2, #0]
 8002f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f24:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	fa92 f1a2 	rbit	r1, r2
 8002f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f32:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f36:	6011      	str	r1, [r2, #0]
  return result;
 8002f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	fab2 f282 	clz	r2, r2
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f042 0220 	orr.w	r2, r2, #32
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	f002 021f 	and.w	r2, r2, #31
 8002f52:	2101      	movs	r1, #1
 8002f54:	fa01 f202 	lsl.w	r2, r1, r2
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d182      	bne.n	8002e64 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5e:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	497f      	ldr	r1, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	fa93 f2a3 	rbit	r2, r3
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002faa:	601a      	str	r2, [r3, #0]
  return result;
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fb4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2301      	movs	r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f8da 	bl	8001184 <HAL_GetTick>
 8002fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd4:	e009      	b.n	8002fea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe f8d5 	bl	8001184 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e144      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800300e:	601a      	str	r2, [r3, #0]
  return result;
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_RCC_OscConfig+0xe2c>
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	e027      	b.n	8003084 <HAL_RCC_OscConfig+0xe7c>
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800303c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	fa93 f2a3 	rbit	r2, r3
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003088:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800308c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003090:	6011      	str	r1, [r2, #0]
 8003092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003096:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	fa92 f1a2 	rbit	r1, r2
 80030a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030a8:	6011      	str	r1, [r2, #0]
  return result;
 80030aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f042 0220 	orr.w	r2, r2, #32
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f002 021f 	and.w	r2, r2, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d082      	beq.n	8002fd6 <HAL_RCC_OscConfig+0xdce>
 80030d0:	e0cf      	b.n	8003272 <HAL_RCC_OscConfig+0x106a>
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030f6:	601a      	str	r2, [r3, #0]
  return result;
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003100:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe f834 	bl	8001184 <HAL_GetTick>
 800311c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003120:	e009      	b.n	8003136 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe f82f 	bl	8001184 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e09e      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800313e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800315a:	601a      	str	r2, [r3, #0]
  return result;
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003164:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d104      	bne.n	8003184 <HAL_RCC_OscConfig+0xf7c>
 800317a:	4b01      	ldr	r3, [pc, #4]	; (8003180 <HAL_RCC_OscConfig+0xf78>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e029      	b.n	80031d4 <HAL_RCC_OscConfig+0xfcc>
 8003180:	40021000 	.word	0x40021000
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800318c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x1078>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	fa92 f1a2 	rbit	r1, r2
 80031f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031f8:	6011      	str	r1, [r2, #0]
  return result;
 80031fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	fab2 f282 	clz	r2, r2
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f042 0220 	orr.w	r2, r2, #32
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f002 021f 	and.w	r2, r2, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d180      	bne.n	8003122 <HAL_RCC_OscConfig+0xf1a>
 8003220:	e027      	b.n	8003272 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e01e      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_OscConfig+0x1078>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800323e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003242:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	429a      	cmp	r2, r3
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800325a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000

08003284 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b09e      	sub	sp, #120	; 0x78
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e162      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b90      	ldr	r3, [pc, #576]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d910      	bls.n	80032cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b8d      	ldr	r3, [pc, #564]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 0207 	bic.w	r2, r3, #7
 80032b2:	498b      	ldr	r1, [pc, #556]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e14a      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	497f      	ldr	r1, [pc, #508]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80dc 	beq.w	80034b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d13c      	bne.n	800337a <HAL_RCC_ClockConfig+0xf6>
 8003300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003304:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_RCC_ClockConfig+0xa6>
 8003324:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	e00f      	b.n	800334a <HAL_RCC_ClockConfig+0xc6>
 800332a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	667b      	str	r3, [r7, #100]	; 0x64
 8003338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800333c:	663b      	str	r3, [r7, #96]	; 0x60
 800333e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003346:	4b67      	ldr	r3, [pc, #412]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003352:	fa92 f2a2 	rbit	r2, r2
 8003356:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800335a:	fab2 f282 	clz	r2, r2
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	f042 0220 	orr.w	r2, r2, #32
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f002 021f 	and.w	r2, r2, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d17b      	bne.n	800346e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0f3      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d13c      	bne.n	80033fc <HAL_RCC_ClockConfig+0x178>
 8003382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003386:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_ClockConfig+0x128>
 80033a6:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e00f      	b.n	80033cc <HAL_RCC_ClockConfig+0x148>
 80033ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
 80033c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80033d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d4:	fa92 f2a2 	rbit	r2, r2
 80033d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f042 0220 	orr.w	r2, r2, #32
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f002 021f 	and.w	r2, r2, #31
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f202 	lsl.w	r2, r1, r2
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d13a      	bne.n	800346e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b2      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
 80033fc:	2302      	movs	r3, #2
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d102      	bne.n	8003424 <HAL_RCC_ClockConfig+0x1a0>
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	e00d      	b.n	8003440 <HAL_RCC_ClockConfig+0x1bc>
 8003424:	2302      	movs	r3, #2
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	2302      	movs	r3, #2
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2202      	movs	r2, #2
 8003442:	61ba      	str	r2, [r7, #24]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	fa92 f2a2 	rbit	r2, r2
 800344a:	617a      	str	r2, [r7, #20]
  return result;
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	fab2 f282 	clz	r2, r2
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f042 0220 	orr.w	r2, r2, #32
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	f002 021f 	and.w	r2, r2, #31
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e079      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	491a      	ldr	r1, [pc, #104]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7fd fe80 	bl	8001184 <HAL_GetTick>
 8003484:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fd fe7c 	bl	8001184 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e061      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HAL_RCC_ClockConfig+0x260>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d214      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4906      	ldr	r1, [pc, #24]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_RCC_ClockConfig+0x25c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e040      	b.n	8003562 <HAL_RCC_ClockConfig+0x2de>
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCC_ClockConfig+0x2e8>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	491a      	ldr	r1, [pc, #104]	; (800356c <HAL_RCC_ClockConfig+0x2e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCC_ClockConfig+0x2e8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4912      	ldr	r1, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x2e8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003526:	f000 f829 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800352a:	4601      	mov	r1, r0
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <HAL_RCC_ClockConfig+0x2e8>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003534:	22f0      	movs	r2, #240	; 0xf0
 8003536:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	fa92 f2a2 	rbit	r2, r2
 800353e:	60fa      	str	r2, [r7, #12]
  return result;
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	fab2 f282 	clz	r2, r2
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	40d3      	lsrs	r3, r2
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x2ec>)
 800354c:	5cd3      	ldrb	r3, [r2, r3]
 800354e:	fa21 f303 	lsr.w	r3, r1, r3
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <HAL_RCC_ClockConfig+0x2f0>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <HAL_RCC_ClockConfig+0x2f4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fdce 	bl	80010fc <HAL_InitTick>
  
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3778      	adds	r7, #120	; 0x78
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	08005854 	.word	0x08005854
 8003574:	20000004 	.word	0x20000004
 8003578:	20000008 	.word	0x20000008

0800357c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b08b      	sub	sp, #44	; 0x2c
 8003580:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x30>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x36>
 80035aa:	e03c      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035ae:	623b      	str	r3, [r7, #32]
      break;
 80035b0:	e03c      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	fa92 f2a2 	rbit	r2, r2
 80035c4:	607a      	str	r2, [r7, #4]
  return result;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	fab2 f282 	clz	r2, r2
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	40d3      	lsrs	r3, r2
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	220f      	movs	r2, #15
 80035e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	fa92 f2a2 	rbit	r2, r2
 80035e8:	60fa      	str	r2, [r7, #12]
  return result;
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	fab2 f282 	clz	r2, r2
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	40d3      	lsrs	r3, r2
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035f6:	5cd3      	ldrb	r3, [r2, r3]
 80035f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	fbb2 f2f3 	udiv	r2, r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	e004      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	4a0c      	ldr	r2, [pc, #48]	; (800364c <HAL_RCC_GetSysClockFreq+0xd0>)
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	623b      	str	r3, [r7, #32]
      break;
 8003624:	e002      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003628:	623b      	str	r3, [r7, #32]
      break;
 800362a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362c:	6a3b      	ldr	r3, [r7, #32]
}
 800362e:	4618      	mov	r0, r3
 8003630:	372c      	adds	r7, #44	; 0x2c
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	007a1200 	.word	0x007a1200
 8003644:	0800586c 	.word	0x0800586c
 8003648:	0800587c 	.word	0x0800587c
 800364c:	003d0900 	.word	0x003d0900

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800366e:	f7ff ffef 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003672:	4601      	mov	r1, r0
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800367c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003680:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	fa92 f2a2 	rbit	r2, r2
 8003688:	603a      	str	r2, [r7, #0]
  return result;
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	40d3      	lsrs	r3, r2
 8003694:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08005864 	.word	0x08005864

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036b2:	f7ff ffcd 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 80036b6:	4601      	mov	r1, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	fa92 f2a2 	rbit	r2, r2
 80036cc:	603a      	str	r2, [r7, #0]
  return result;
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	fab2 f282 	clz	r2, r2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	40d3      	lsrs	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80036da:	5cd3      	ldrb	r3, [r2, r3]
 80036dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08005864 	.word	0x08005864

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b092      	sub	sp, #72	; 0x48
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80cd 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003714:	4b86      	ldr	r3, [pc, #536]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10e      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b83      	ldr	r3, [pc, #524]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a82      	ldr	r2, [pc, #520]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	61d3      	str	r3, [r2, #28]
 800372c:	4b80      	ldr	r3, [pc, #512]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	4b7d      	ldr	r3, [pc, #500]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374a:	4b7a      	ldr	r3, [pc, #488]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a79      	ldr	r2, [pc, #484]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7fd fd15 	bl	8001184 <HAL_GetTick>
 800375a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd fd11 	bl	8001184 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	; 0x64
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0db      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	4b70      	ldr	r3, [pc, #448]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377c:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003796:	429a      	cmp	r2, r3
 8003798:	d076      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	461a      	mov	r2, r3
 80037c4:	2301      	movs	r3, #1
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	4b55      	ldr	r3, [pc, #340]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d045      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fd fcc2 	bl	8001184 <HAL_GetTick>
 8003800:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	e00a      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd fcbe 	bl	8001184 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e086      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800381a:	2302      	movs	r3, #2
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
 8003826:	2302      	movs	r3, #2
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	61fb      	str	r3, [r7, #28]
  return result;
 8003832:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	fab3 f383 	clz	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d102      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	e007      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800384e:	2302      	movs	r3, #2
 8003850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	4b35      	ldr	r3, [pc, #212]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2202      	movs	r2, #2
 8003860:	613a      	str	r2, [r7, #16]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	fa92 f2a2 	rbit	r2, r2
 8003868:	60fa      	str	r2, [r7, #12]
  return result;
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0bd      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003888:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4926      	ldr	r1, [pc, #152]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003896:	4313      	orrs	r3, r2
 8003898:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800389a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b23      	ldr	r3, [pc, #140]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a22      	ldr	r2, [pc, #136]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	491a      	ldr	r1, [pc, #104]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	f023 0210 	bic.w	r2, r3, #16
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4912      	ldr	r1, [pc, #72]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	490b      	ldr	r1, [pc, #44]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003904:	4313      	orrs	r3, r2
 8003906:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	4903      	ldr	r1, [pc, #12]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003922:	4313      	orrs	r3, r2
 8003924:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3748      	adds	r7, #72	; 0x48
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	10908100 	.word	0x10908100

0800393c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e049      	b.n	80039e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fa38 	bl	8000dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 f94a 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0ff      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b14      	cmp	r3, #20
 8003a16:	f200 80f0 	bhi.w	8003bfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a75 	.word	0x08003a75
 8003a24:	08003bfb 	.word	0x08003bfb
 8003a28:	08003bfb 	.word	0x08003bfb
 8003a2c:	08003bfb 	.word	0x08003bfb
 8003a30:	08003ab5 	.word	0x08003ab5
 8003a34:	08003bfb 	.word	0x08003bfb
 8003a38:	08003bfb 	.word	0x08003bfb
 8003a3c:	08003bfb 	.word	0x08003bfb
 8003a40:	08003af7 	.word	0x08003af7
 8003a44:	08003bfb 	.word	0x08003bfb
 8003a48:	08003bfb 	.word	0x08003bfb
 8003a4c:	08003bfb 	.word	0x08003bfb
 8003a50:	08003b37 	.word	0x08003b37
 8003a54:	08003bfb 	.word	0x08003bfb
 8003a58:	08003bfb 	.word	0x08003bfb
 8003a5c:	08003bfb 	.word	0x08003bfb
 8003a60:	08003b79 	.word	0x08003b79
 8003a64:	08003bfb 	.word	0x08003bfb
 8003a68:	08003bfb 	.word	0x08003bfb
 8003a6c:	08003bfb 	.word	0x08003bfb
 8003a70:	08003bb9 	.word	0x08003bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f942 	bl	8003d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0208 	orr.w	r2, r2, #8
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0204 	bic.w	r2, r2, #4
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
      break;
 8003ab2:	e0a5      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f9a8 	bl	8003e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	021a      	lsls	r2, r3, #8
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
      break;
 8003af4:	e084      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fa07 	bl	8003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0208 	orr.w	r2, r2, #8
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0204 	bic.w	r2, r2, #4
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      break;
 8003b34:	e064      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fa65 	bl	800400c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]
      break;
 8003b76:	e043      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 faa8 	bl	80040d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bb6:	e023      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fae6 	bl	8004190 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	021a      	lsls	r2, r3, #8
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bf8:	e002      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a32      	ldr	r2, [pc, #200]	; (8003cf0 <TIM_Base_SetConfig+0xdc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_Base_SetConfig+0x28>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0x28>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <TIM_Base_SetConfig+0xe0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d108      	bne.n	8003c4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <TIM_Base_SetConfig+0xdc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0x6a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0x6a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <TIM_Base_SetConfig+0xe0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0x6a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <TIM_Base_SetConfig+0xe4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x6a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <TIM_Base_SetConfig+0xe8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x6a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <TIM_Base_SetConfig+0xec>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <TIM_Base_SetConfig+0xdc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_Base_SetConfig+0xc0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <TIM_Base_SetConfig+0xe4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_Base_SetConfig+0xc0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <TIM_Base_SetConfig+0xe8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_Base_SetConfig+0xc0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a0c      	ldr	r2, [pc, #48]	; (8003d00 <TIM_Base_SetConfig+0xec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800

08003d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 0302 	bic.w	r3, r3, #2
 8003d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <TIM_OC1_SetConfig+0xfc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_OC1_SetConfig+0x78>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <TIM_OC1_SetConfig+0x100>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <TIM_OC1_SetConfig+0x78>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <TIM_OC1_SetConfig+0x104>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC1_SetConfig+0x78>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <TIM_OC1_SetConfig+0x108>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10c      	bne.n	8003d96 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0308 	bic.w	r3, r3, #8
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <TIM_OC1_SetConfig+0xfc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_OC1_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <TIM_OC1_SetConfig+0x100>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_OC1_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <TIM_OC1_SetConfig+0x104>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_OC1_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC1_SetConfig+0x108>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d111      	bne.n	8003dda <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40014000 	.word	0x40014000
 8003e08:	40014400 	.word	0x40014400
 8003e0c:	40014800 	.word	0x40014800

08003e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0210 	bic.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <TIM_OC2_SetConfig+0xf0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10d      	bne.n	8003e90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <TIM_OC2_SetConfig+0xf0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xa0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <TIM_OC2_SetConfig+0xf4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xa0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <TIM_OC2_SetConfig+0xf8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xa0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <TIM_OC2_SetConfig+0xfc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d113      	bne.n	8003ed8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800

08003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <TIM_OC3_SetConfig+0xec>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10d      	bne.n	8003f8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <TIM_OC3_SetConfig+0xec>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_OC3_SetConfig+0x9e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <TIM_OC3_SetConfig+0xf0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_OC3_SetConfig+0x9e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <TIM_OC3_SetConfig+0xf4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC3_SetConfig+0x9e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a17      	ldr	r2, [pc, #92]	; (8004008 <TIM_OC3_SetConfig+0xf8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d113      	bne.n	8003fd6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800

0800400c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <TIM_OC4_SetConfig+0xb8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00b      	beq.n	8004088 <TIM_OC4_SetConfig+0x7c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <TIM_OC4_SetConfig+0xbc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d007      	beq.n	8004088 <TIM_OC4_SetConfig+0x7c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <TIM_OC4_SetConfig+0xc0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC4_SetConfig+0x7c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <TIM_OC4_SetConfig+0xc4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800

080040d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004118:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <TIM_OC5_SetConfig+0xac>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_OC5_SetConfig+0x72>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <TIM_OC5_SetConfig+0xb0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_OC5_SetConfig+0x72>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <TIM_OC5_SetConfig+0xb4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC5_SetConfig+0x72>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_OC5_SetConfig+0xb8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d109      	bne.n	800415a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	621a      	str	r2, [r3, #32]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	051b      	lsls	r3, r3, #20
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a16      	ldr	r2, [pc, #88]	; (8004240 <TIM_OC6_SetConfig+0xb0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_OC6_SetConfig+0x74>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <TIM_OC6_SetConfig+0xb4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_OC6_SetConfig+0x74>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a14      	ldr	r2, [pc, #80]	; (8004248 <TIM_OC6_SetConfig+0xb8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_OC6_SetConfig+0x74>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <TIM_OC6_SetConfig+0xbc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d109      	bne.n	8004218 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e054      	b.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004298:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d009      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40014000 	.word	0x40014000

0800432c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004344:	2302      	movs	r3, #2
 8004346:	e060      	b.n	800440a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d115      	bne.n	80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	051b      	lsls	r3, r3, #20
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00

0800441c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e040      	b.n	80044b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc fd22 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fbfc 	bl	8004c58 <UART_SetConfig>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e022      	b.n	80044b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fd26 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fdad 	bl	8005008 <UART_CheckIdleState>
 80044ae:	4603      	mov	r3, r0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d165      	bne.n	800459a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Transmit_DMA+0x22>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e05e      	b.n	800459c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2221      	movs	r2, #33	; 0x21
 8004500:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	2b00      	cmp	r3, #0
 8004508:	d027      	beq.n	800455a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <HAL_UART_Transmit_DMA+0xec>)
 8004510:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_UART_Transmit_DMA+0xf0>)
 8004518:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <HAL_UART_Transmit_DMA+0xf4>)
 8004520:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	2200      	movs	r2, #0
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	4619      	mov	r1, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3328      	adds	r3, #40	; 0x28
 800453a:	461a      	mov	r2, r3
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	f7fd faf7 	bl	8001b30 <HAL_DMA_Start_IT>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2210      	movs	r2, #16
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e020      	b.n	800459c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3308      	adds	r3, #8
 8004568:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3308      	adds	r3, #8
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	623a      	str	r2, [r7, #32]
 8004584:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e5      	bne.n	8004562 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	0800547d 	.word	0x0800547d
 80045a8:	08005511 	.word	0x08005511
 80045ac:	08005691 	.word	0x08005691

080045b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d132      	bne.n	800462e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Receive_DMA+0x24>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e02b      	b.n	8004630 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d018      	beq.n	800461e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	613b      	str	r3, [r7, #16]
   return(result);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	623b      	str	r3, [r7, #32]
 800460c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	69f9      	ldr	r1, [r7, #28]
 8004610:	6a3a      	ldr	r2, [r7, #32]
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	61bb      	str	r3, [r7, #24]
   return(result);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e6      	bne.n	80045ec <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	461a      	mov	r2, r3
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fdff 	bl	8005228 <UART_Start_Receive_DMA>
 800462a:	4603      	mov	r3, r0
 800462c:	e000      	b.n	8004630 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	; 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0ba      	sub	sp, #232	; 0xe8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800465e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004662:	f640 030f 	movw	r3, #2063	; 0x80f
 8004666:	4013      	ands	r3, r2
 8004668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800466c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d115      	bne.n	80046a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 82ab 	beq.w	8004bec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
      }
      return;
 800469e:	e2a5      	b.n	8004bec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8117 	beq.w	80048d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046ba:	4b85      	ldr	r3, [pc, #532]	; (80048d0 <HAL_UART_IRQHandler+0x298>)
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 810a 	beq.w	80048d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <HAL_UART_IRQHandler+0xbc>
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d011      	beq.n	8004724 <HAL_UART_IRQHandler+0xec>
 8004700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2202      	movs	r2, #2
 8004712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d011      	beq.n	8004754 <HAL_UART_IRQHandler+0x11c>
 8004730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2204      	movs	r2, #4
 8004742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004770:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2208      	movs	r2, #8
 800477e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18a>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8211 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800480e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004812:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04f      	beq.n	80048ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fdca 	bl	80053b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d141      	bne.n	80048b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800485a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800485e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1d9      	bne.n	800482e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487e:	2b00      	cmp	r3, #0
 8004880:	d013      	beq.n	80048aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <HAL_UART_IRQHandler+0x29c>)
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd f9e6 	bl	8001c60 <HAL_DMA_Abort_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d017      	beq.n	80048ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048a4:	4610      	mov	r0, r2
 80048a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	e00f      	b.n	80048ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9be 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	e00b      	b.n	80048ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9ba 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	e007      	b.n	80048ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9b6 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80048c8:	e192      	b.n	8004bf0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ca:	bf00      	nop
    return;
 80048cc:	e190      	b.n	8004bf0 <HAL_UART_IRQHandler+0x5b8>
 80048ce:	bf00      	nop
 80048d0:	04000120 	.word	0x04000120
 80048d4:	0800570f 	.word	0x0800570f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 814b 	bne.w	8004b78 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8144 	beq.w	8004b78 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 813d 	beq.w	8004b78 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	f040 80b5 	bne.w	8004a80 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004922:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8164 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004936:	429a      	cmp	r2, r3
 8004938:	f080 815c 	bcs.w	8004bf4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004942:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b20      	cmp	r3, #32
 800494e:	f000 8086 	beq.w	8004a5e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800496a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800497c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004980:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004988:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1da      	bne.n	8004952 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e1      	bne.n	800499c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3308      	adds	r3, #8
 80049f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e3      	bne.n	80049d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2e:	f023 0310 	bic.w	r3, r3, #16
 8004a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e4      	bne.n	8004a1e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fd f8c8 	bl	8001bee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2202      	movs	r2, #2
 8004a62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8e1 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a7e:	e0b9      	b.n	8004bf4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80ab 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004aa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80a6 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ace:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e4      	bne.n	8004aac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	623b      	str	r3, [r7, #32]
   return(result);
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b06:	633a      	str	r2, [r7, #48]	; 0x30
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e3      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e4      	bne.n	8004b2e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f865 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b76:	e03f      	b.n	8004bf8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00e      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x56a>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fdf7 	bl	800578e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba0:	e02d      	b.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00e      	beq.n	8004bcc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01c      	beq.n	8004bfc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
    }
    return;
 8004bca:	e017      	b.n	8004bfc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d012      	beq.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fda8 	bl	800573a <UART_EndTransmit_IT>
    return;
 8004bea:	e008      	b.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bec:	bf00      	nop
 8004bee:	e006      	b.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004bf0:	bf00      	nop
 8004bf2:	e004      	b.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bf4:	bf00      	nop
 8004bf6:	e002      	b.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004bfc:	bf00      	nop
  }

}
 8004bfe:	37e8      	adds	r7, #232	; 0xe8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b8a      	ldr	r3, [pc, #552]	; (8004eac <UART_SetConfig+0x254>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6979      	ldr	r1, [r7, #20]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a78      	ldr	r2, [pc, #480]	; (8004eb0 <UART_SetConfig+0x258>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d120      	bne.n	8004d16 <UART_SetConfig+0xbe>
 8004cd4:	4b77      	ldr	r3, [pc, #476]	; (8004eb4 <UART_SetConfig+0x25c>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d817      	bhi.n	8004d10 <UART_SetConfig+0xb8>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0x90>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d05 	.word	0x08004d05
 8004cf0:	08004d0b 	.word	0x08004d0b
 8004cf4:	08004cff 	.word	0x08004cff
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e01d      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e01a      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004d04:	2304      	movs	r3, #4
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e017      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e014      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004d10:	2310      	movs	r3, #16
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e011      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a67      	ldr	r2, [pc, #412]	; (8004eb8 <UART_SetConfig+0x260>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d102      	bne.n	8004d26 <UART_SetConfig+0xce>
 8004d20:	2300      	movs	r3, #0
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e009      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a64      	ldr	r2, [pc, #400]	; (8004ebc <UART_SetConfig+0x264>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d102      	bne.n	8004d36 <UART_SetConfig+0xde>
 8004d30:	2300      	movs	r3, #0
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e001      	b.n	8004d3a <UART_SetConfig+0xe2>
 8004d36:	2310      	movs	r3, #16
 8004d38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d42:	d15a      	bne.n	8004dfa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004d44:	7ffb      	ldrb	r3, [r7, #31]
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d827      	bhi.n	8004d9a <UART_SetConfig+0x142>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0xf8>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08004d9b 	.word	0x08004d9b
 8004d68:	08004d9b 	.word	0x08004d9b
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004d93 	.word	0x08004d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fe fc78 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8004d78:	61b8      	str	r0, [r7, #24]
        break;
 8004d7a:	e013      	b.n	8004da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fe fc96 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8004d80:	61b8      	str	r0, [r7, #24]
        break;
 8004d82:	e00f      	b.n	8004da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b4e      	ldr	r3, [pc, #312]	; (8004ec0 <UART_SetConfig+0x268>)
 8004d86:	61bb      	str	r3, [r7, #24]
        break;
 8004d88:	e00c      	b.n	8004da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fe fbf7 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004d8e:	61b8      	str	r0, [r7, #24]
        break;
 8004d90:	e008      	b.n	8004da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	61bb      	str	r3, [r7, #24]
        break;
 8004d98:	e004      	b.n	8004da4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	77bb      	strb	r3, [r7, #30]
        break;
 8004da2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d074      	beq.n	8004e94 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	005a      	lsls	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	d916      	bls.n	8004df4 <UART_SetConfig+0x19c>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d212      	bcs.n	8004df4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f023 030f 	bic.w	r3, r3, #15
 8004dd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	89fb      	ldrh	r3, [r7, #14]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	89fa      	ldrh	r2, [r7, #14]
 8004df0:	60da      	str	r2, [r3, #12]
 8004df2:	e04f      	b.n	8004e94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77bb      	strb	r3, [r7, #30]
 8004df8:	e04c      	b.n	8004e94 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d828      	bhi.n	8004e52 <UART_SetConfig+0x1fa>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x1b0>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e53 	.word	0x08004e53
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e53 	.word	0x08004e53
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e53 	.word	0x08004e53
 8004e28:	08004e4b 	.word	0x08004e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe fc1c 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e013      	b.n	8004e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e34:	f7fe fc3a 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8004e38:	61b8      	str	r0, [r7, #24]
        break;
 8004e3a:	e00f      	b.n	8004e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <UART_SetConfig+0x268>)
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e00c      	b.n	8004e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7fe fb9b 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004e46:	61b8      	str	r0, [r7, #24]
        break;
 8004e48:	e008      	b.n	8004e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	61bb      	str	r3, [r7, #24]
        break;
 8004e50:	e004      	b.n	8004e5c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	77bb      	strb	r3, [r7, #30]
        break;
 8004e5a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d018      	beq.n	8004e94 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	085a      	lsrs	r2, r3, #1
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d909      	bls.n	8004e90 <UART_SetConfig+0x238>
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d205      	bcs.n	8004e90 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e001      	b.n	8004e94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ea0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	efff69f3 	.word	0xefff69f3
 8004eb0:	40013800 	.word	0x40013800
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40004400 	.word	0x40004400
 8004ebc:	40004800 	.word	0x40004800
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	; 0x60
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fc f8b4 	bl	8001184 <HAL_GetTick>
 800501c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d12e      	bne.n	800508a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88c 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d021      	beq.n	800508a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e062      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d149      	bne.n	800512c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f856 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03c      	beq.n	800512c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	623b      	str	r3, [r7, #32]
   return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
 80050d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005104:	61fa      	str	r2, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	617b      	str	r3, [r7, #20]
   return(result);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3758      	adds	r7, #88	; 0x58
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e049      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005170:	d045      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fc f807 	bl	8001184 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <UART_WaitOnFlagUntilTimeout+0x30>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e048      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d031      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d110      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2208      	movs	r2, #8
 80051ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f8ff 	bl	80053b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2208      	movs	r2, #8
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e029      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d111      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f8e5 	bl	80053b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e00f      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	429a      	cmp	r2, r3
 800521a:	d0a6      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b096      	sub	sp, #88	; 0x58
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2222      	movs	r2, #34	; 0x22
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	2b00      	cmp	r3, #0
 800525a:	d028      	beq.n	80052ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	4a3e      	ldr	r2, [pc, #248]	; (800535c <UART_Start_Receive_DMA+0x134>)
 8005262:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <UART_Start_Receive_DMA+0x138>)
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005270:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <UART_Start_Receive_DMA+0x13c>)
 8005272:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005278:	2200      	movs	r2, #0
 800527a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3324      	adds	r3, #36	; 0x24
 8005286:	4619      	mov	r1, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	461a      	mov	r2, r3
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	f7fc fc4e 	bl	8001b30 <HAL_DMA_Start_IT>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2210      	movs	r2, #16
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e051      	b.n	8005352 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d018      	beq.n	80052e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ca:	657b      	str	r3, [r7, #84]	; 0x54
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e6      	bne.n	80052b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005308:	637a      	str	r2, [r7, #52]	; 0x34
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800530e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3308      	adds	r3, #8
 8005322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	613b      	str	r3, [r7, #16]
   return(result);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800533c:	623a      	str	r2, [r7, #32]
 800533e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	6a3a      	ldr	r2, [r7, #32]
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	61bb      	str	r3, [r7, #24]
   return(result);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e5      	bne.n	800531c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3758      	adds	r7, #88	; 0x58
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	0800552d 	.word	0x0800552d
 8005360:	08005653 	.word	0x08005653
 8005364:	08005691 	.word	0x08005691

08005368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	60bb      	str	r3, [r7, #8]
   return(result);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80053a8:	bf00      	nop
 80053aa:	3724      	adds	r7, #36	; 0x24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b095      	sub	sp, #84	; 0x54
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053da:	643b      	str	r3, [r7, #64]	; 0x40
 80053dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e6      	bne.n	80053bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	64bb      	str	r3, [r7, #72]	; 0x48
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800540e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005426:	2b01      	cmp	r3, #1
 8005428:	d118      	bne.n	800545c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	60bb      	str	r3, [r7, #8]
   return(result);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f023 0310 	bic.w	r3, r3, #16
 800543e:	647b      	str	r3, [r7, #68]	; 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005470:	bf00      	nop
 8005472:	3754      	adds	r7, #84	; 0x54
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b090      	sub	sp, #64	; 0x40
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b20      	cmp	r3, #32
 8005490:	d037      	beq.n	8005502 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	2200      	movs	r2, #0
 8005496:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	623b      	str	r3, [r7, #32]
   return(result);
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ba:	633a      	str	r2, [r7, #48]	; 0x30
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60fb      	str	r3, [r7, #12]
   return(result);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	69b9      	ldr	r1, [r7, #24]
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	617b      	str	r3, [r7, #20]
   return(result);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005500:	e002      	b.n	8005508 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005502:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005504:	f7fb f8aa 	bl	800065c <HAL_UART_TxCpltCallback>
}
 8005508:	bf00      	nop
 800550a:	3740      	adds	r7, #64	; 0x40
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff fb70 	bl	8004c04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b09c      	sub	sp, #112	; 0x70
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b20      	cmp	r3, #32
 8005540:	d071      	beq.n	8005626 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005544:	2200      	movs	r2, #0
 8005546:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800554a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005568:	65bb      	str	r3, [r7, #88]	; 0x58
 800556a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800556e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	667b      	str	r3, [r7, #100]	; 0x64
 8005594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800559c:	647a      	str	r2, [r7, #68]	; 0x44
 800559e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	623b      	str	r3, [r7, #32]
   return(result);
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c6:	663b      	str	r3, [r7, #96]	; 0x60
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055d0:	633a      	str	r2, [r7, #48]	; 0x30
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d118      	bne.n	8005626 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	60fb      	str	r3, [r7, #12]
   return(result);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	617b      	str	r3, [r7, #20]
   return(result);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005628:	2200      	movs	r2, #0
 800562a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800563a:	4619      	mov	r1, r3
 800563c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800563e:	f7ff faff 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005642:	e002      	b.n	800564a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005644:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005646:	f7fb f819 	bl	800067c <HAL_UART_RxCpltCallback>
}
 800564a:	bf00      	nop
 800564c:	3770      	adds	r7, #112	; 0x70
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566a:	2b01      	cmp	r3, #1
 800566c:	d109      	bne.n	8005682 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	b29b      	uxth	r3, r3
 8005678:	4619      	mov	r1, r3
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff fae0 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005680:	e002      	b.n	8005688 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff fac8 	bl	8004c18 <HAL_UART_RxHalfCpltCallback>
}
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d109      	bne.n	80056ce <UART_DMAError+0x3e>
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b21      	cmp	r3, #33	; 0x21
 80056be:	d106      	bne.n	80056ce <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80056c8:	6978      	ldr	r0, [r7, #20]
 80056ca:	f7ff fe4d 	bl	8005368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d109      	bne.n	80056f0 <UART_DMAError+0x60>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b22      	cmp	r3, #34	; 0x22
 80056e0:	d106      	bne.n	80056f0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f7ff fe62 	bl	80053b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	f043 0210 	orr.w	r2, r3, #16
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005700:	6978      	ldr	r0, [r7, #20]
 8005702:	f7ff fa93 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7ff fa7d 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b088      	sub	sp, #32
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6979      	ldr	r1, [r7, #20]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	613b      	str	r3, [r7, #16]
   return(result);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fa ff6b 	bl	800065c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005786:	bf00      	nop
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <memset>:
 80057a2:	4402      	add	r2, r0
 80057a4:	4603      	mov	r3, r0
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d100      	bne.n	80057ac <memset+0xa>
 80057aa:	4770      	bx	lr
 80057ac:	f803 1b01 	strb.w	r1, [r3], #1
 80057b0:	e7f9      	b.n	80057a6 <memset+0x4>
	...

080057b4 <__libc_init_array>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4d0d      	ldr	r5, [pc, #52]	; (80057ec <__libc_init_array+0x38>)
 80057b8:	4c0d      	ldr	r4, [pc, #52]	; (80057f0 <__libc_init_array+0x3c>)
 80057ba:	1b64      	subs	r4, r4, r5
 80057bc:	10a4      	asrs	r4, r4, #2
 80057be:	2600      	movs	r6, #0
 80057c0:	42a6      	cmp	r6, r4
 80057c2:	d109      	bne.n	80057d8 <__libc_init_array+0x24>
 80057c4:	4d0b      	ldr	r5, [pc, #44]	; (80057f4 <__libc_init_array+0x40>)
 80057c6:	4c0c      	ldr	r4, [pc, #48]	; (80057f8 <__libc_init_array+0x44>)
 80057c8:	f000 f826 	bl	8005818 <_init>
 80057cc:	1b64      	subs	r4, r4, r5
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	2600      	movs	r6, #0
 80057d2:	42a6      	cmp	r6, r4
 80057d4:	d105      	bne.n	80057e2 <__libc_init_array+0x2e>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057dc:	4798      	blx	r3
 80057de:	3601      	adds	r6, #1
 80057e0:	e7ee      	b.n	80057c0 <__libc_init_array+0xc>
 80057e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e6:	4798      	blx	r3
 80057e8:	3601      	adds	r6, #1
 80057ea:	e7f2      	b.n	80057d2 <__libc_init_array+0x1e>
 80057ec:	0800588c 	.word	0x0800588c
 80057f0:	0800588c 	.word	0x0800588c
 80057f4:	0800588c 	.word	0x0800588c
 80057f8:	08005890 	.word	0x08005890

080057fc <memcpy>:
 80057fc:	440a      	add	r2, r1
 80057fe:	4291      	cmp	r1, r2
 8005800:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005804:	d100      	bne.n	8005808 <memcpy+0xc>
 8005806:	4770      	bx	lr
 8005808:	b510      	push	{r4, lr}
 800580a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005812:	4291      	cmp	r1, r2
 8005814:	d1f9      	bne.n	800580a <memcpy+0xe>
 8005816:	bd10      	pop	{r4, pc}

08005818 <_init>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr

08005824 <_fini>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr
