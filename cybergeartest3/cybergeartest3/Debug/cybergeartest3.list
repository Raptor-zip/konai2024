
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005960  08005960  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005960  08005960  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005960  08005960  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000014  0800597c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800597c  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ce0  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002799  00000000  00000000  00032d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00035500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6d  00000000  00000000  00036490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c210  00000000  00000000  000370fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001281f  00000000  00000000  0005330d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a79d7  00000000  00000000  00065b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041f0  00000000  00000000  0010d504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001116f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058ec 	.word	0x080058ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080058ec 	.word	0x080058ec

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	; 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f005 fb3a 	bl	80058d0 <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	; 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f985 	bl	80005b8 <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	; 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8ac 	bl	80004a8 <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	; 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f88b 	bl	80004a8 <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	; 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f867 	bl	80004a8 <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	; 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	; 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f843 	bl	80004a8 <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af02      	add	r7, sp, #8
 8000436:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 8000438:	2300      	movs	r3, #0
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	b29a      	uxth	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7959      	ldrb	r1, [r3, #5]
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	460b      	mov	r3, r1
 8000452:	2103      	movs	r1, #3
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff fee1 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000460:	200a      	movs	r0, #10
 8000462:	4798      	blx	r3
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af02      	add	r7, sp, #8
 8000472:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	b29a      	uxth	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	7959      	ldrb	r1, [r3, #5]
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	460b      	mov	r3, r1
 800048e:	2104      	movs	r1, #4
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f7ff fec3 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800049c:	200a      	movs	r0, #10
 800049e:	4798      	blx	r3
}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	460b      	mov	r3, r1
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 80004be:	897b      	ldrh	r3, [r7, #10]
 80004c0:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 80004c2:	7d3b      	ldrb	r3, [r7, #20]
 80004c4:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 80004c6:	7d7b      	ldrb	r3, [r7, #21]
 80004c8:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	785b      	ldrb	r3, [r3, #1]
 80004d4:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	78db      	ldrb	r3, [r3, #3]
 80004e0:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	7959      	ldrb	r1, [r3, #5]
 80004ec:	f107 0318 	add.w	r3, r7, #24
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	460b      	mov	r3, r1
 80004f4:	2112      	movs	r1, #18
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f7ff fe90 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000502:	2001      	movs	r0, #1
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	4613      	mov	r3, r2
 800051a:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2200      	movs	r2, #0
 8000526:	639a      	str	r2, [r3, #56]	; 0x38
	ecan->filter.FilterIdLow = 0;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2200      	movs	r2, #0
 800052c:	63da      	str	r2, [r3, #60]	; 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2200      	movs	r2, #0
 8000532:	641a      	str	r2, [r3, #64]	; 0x40
	ecan->filter.FilterMaskIdLow = 0;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2200      	movs	r2, #0
 8000538:	645a      	str	r2, [r3, #68]	; 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2200      	movs	r2, #0
 800053e:	649a      	str	r2, [r3, #72]	; 0x48

	if (can_nuumber == 1)
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d103      	bne.n	800054e <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2200      	movs	r2, #0
 800054a:	64da      	str	r2, [r3, #76]	; 0x4c
 800054c:	e002      	b.n	8000554 <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	220e      	movs	r2, #14
 8000552:	64da      	str	r2, [r3, #76]	; 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2200      	movs	r2, #0
 8000558:	651a      	str	r2, [r3, #80]	; 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2201      	movs	r2, #1
 800055e:	655a      	str	r2, [r3, #84]	; 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2201      	movs	r2, #1
 8000564:	659a      	str	r2, [r3, #88]	; 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	220e      	movs	r2, #14
 800056a:	65da      	str	r2, [r3, #92]	; 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3338      	adds	r3, #56	; 0x38
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f000 ffb3 	bl	80014e2 <HAL_CAN_ConfigFilter>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <Easy_CAN6_Start+0x78>
		Error_Handler();
 8000582:	f000 fc3f 	bl	8000e04 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2102      	movs	r1, #2
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f9bb 	bl	8001908 <HAL_CAN_ActivateNotification>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 8000598:	f000 fc34 	bl	8000e04 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f868 	bl	8001676 <HAL_CAN_Start>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005ac:	f001 faed 	bl	8001b8a <HAL_NVIC_SystemReset>

}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	68ba      	ldr	r2, [r7, #8]
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2204      	movs	r2, #4
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
	ecan->TxHeader.DLC = size;
 80005dc:	78fa      	ldrb	r2, [r7, #3]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 80005ea:	e000      	b.n	80005ee <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 80005ec:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f953 	bl	800189e <HAL_CAN_GetTxMailboxesFreeLevel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f6      	beq.n	80005ec <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f103 0120 	add.w	r1, r3, #32
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	f001 f876 	bl	80016fe <HAL_CAN_AddTxMessage>

}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_UART_TxCpltCallback+0x1c>)
 8000626:	2220      	movs	r2, #32
 8000628:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200000a4 	.word	0x200000a4

0800063c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <HAL_UART_RxCpltCallback+0x1c>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
	//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200004dc 	.word	0x200004dc

0800065c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000662:	f000 fdb9 	bl	80011d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000666:	f000 fa0d 	bl	8000a84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800066a:	f000 fb81 	bl	8000d70 <MX_GPIO_Init>
	MX_DMA_Init();
 800066e:	f000 fb59 	bl	8000d24 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000672:	f000 fb27 	bl	8000cc4 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000676:	f000 fa5f 	bl	8000b38 <MX_CAN_Init>
	MX_TIM1_Init();
 800067a:	f000 fa93 	bl	8000ba4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 800067e:	2202      	movs	r2, #2
 8000680:	499e      	ldr	r1, [pc, #632]	; (80008fc <main+0x2a0>)
 8000682:	489f      	ldr	r0, [pc, #636]	; (8000900 <main+0x2a4>)
 8000684:	f7ff ff43 	bl	800050e <Easy_CAN6_Start>
	//	    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	//	}

//	for (int i = 0; i < 4; i++)

		for (int i = 1; i < 3; i++)
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e053      	b.n	8000736 <main+0xda>
	{
		if (is_run_CyberGear)
		{
			debug_1 = i;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b9c      	ldr	r3, [pc, #624]	; (8000904 <main+0x2a8>)
 8000694:	801a      	strh	r2, [r3, #0]
//			debug_2 = 195;
			debug_current_line = __LINE__;
 8000696:	4b9c      	ldr	r3, [pc, #624]	; (8000908 <main+0x2ac>)
 8000698:	22c9      	movs	r2, #201	; 0xc9
 800069a:	801a      	strh	r2, [r3, #0]
			CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	22b0      	movs	r2, #176	; 0xb0
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	4a99      	ldr	r2, [pc, #612]	; (800090c <main+0x2b0>)
 80006a6:	1898      	adds	r0, r3, r2
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	3370      	adds	r3, #112	; 0x70
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b97      	ldr	r3, [pc, #604]	; (8000910 <main+0x2b4>)
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	4992      	ldr	r1, [pc, #584]	; (8000900 <main+0x2a4>)
 80006b8:	f7ff fdfd 	bl	80002b6 <CyberGear_Init>
//			debug_2 = 197;
			debug_current_line = __LINE__;
 80006bc:	4b92      	ldr	r3, [pc, #584]	; (8000908 <main+0x2ac>)
 80006be:	22cc      	movs	r2, #204	; 0xcc
 80006c0:	801a      	strh	r2, [r3, #0]
			CyberGear_ResetMotor(&my_cyber[i]);
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	22b0      	movs	r2, #176	; 0xb0
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	4a90      	ldr	r2, [pc, #576]	; (800090c <main+0x2b0>)
 80006cc:	4413      	add	r3, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fecc 	bl	800046c <CyberGear_ResetMotor>
//			debug_2 = 199;
			debug_current_line = __LINE__;
 80006d4:	4b8c      	ldr	r3, [pc, #560]	; (8000908 <main+0x2ac>)
 80006d6:	22cf      	movs	r2, #207	; 0xcf
 80006d8:	801a      	strh	r2, [r3, #0]
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	22b0      	movs	r2, #176	; 0xb0
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4a8a      	ldr	r2, [pc, #552]	; (800090c <main+0x2b0>)
 80006e4:	4413      	add	r3, r2
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fe1f 	bl	800032c <CyberGear_SetMode>
//			debug_2 = 201;
			debug_current_line = __LINE__;
 80006ee:	4b86      	ldr	r3, [pc, #536]	; (8000908 <main+0x2ac>)
 80006f0:	22d2      	movs	r2, #210	; 0xd2
 80006f2:	801a      	strh	r2, [r3, #0]
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 4.0f);
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	22b0      	movs	r2, #176	; 0xb0
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	4a83      	ldr	r2, [pc, #524]	; (800090c <main+0x2b0>)
 80006fe:	4413      	add	r3, r2
 8000700:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8000704:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8000708:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fdf0 	bl	80002f2 <CyberGear_SetConfig>
//			debug_2 = 203;
			debug_current_line = __LINE__;
 8000712:	4b7d      	ldr	r3, [pc, #500]	; (8000908 <main+0x2ac>)
 8000714:	22d5      	movs	r2, #213	; 0xd5
 8000716:	801a      	strh	r2, [r3, #0]
			CyberGear_EnableMotor(&my_cyber[i]);
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	22b0      	movs	r2, #176	; 0xb0
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	4a7a      	ldr	r2, [pc, #488]	; (800090c <main+0x2b0>)
 8000722:	4413      	add	r3, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fe83 	bl	8000430 <CyberGear_EnableMotor>
//			debug_2 = 205;
			debug_current_line = __LINE__;
 800072a:	4b77      	ldr	r3, [pc, #476]	; (8000908 <main+0x2ac>)
 800072c:	22d8      	movs	r2, #216	; 0xd8
 800072e:	801a      	strh	r2, [r3, #0]
		for (int i = 1; i < 3; i++)
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b02      	cmp	r3, #2
 800073a:	dda8      	ble.n	800068e <main+0x32>
		}
	}
	HAL_Delay(10);
 800073c:	200a      	movs	r0, #10
 800073e:	f000 fdb1 	bl	80012a4 <HAL_Delay>

	HAL_UART_Transmit_DMA(&huart2,
 8000742:	2221      	movs	r2, #33	; 0x21
 8000744:	4973      	ldr	r1, [pc, #460]	; (8000914 <main+0x2b8>)
 8000746:	4874      	ldr	r0, [pc, #464]	; (8000918 <main+0x2bc>)
 8000748:	f003 ff20 	bl	800458c <HAL_UART_Transmit_DMA>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		debug_current_line = __LINE__;
 800074c:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <main+0x2ac>)
 800074e:	22e8      	movs	r2, #232	; 0xe8
 8000750:	801a      	strh	r2, [r3, #0]
		begin_time = HAL_GetTick();
 8000752:	f000 fd9b 	bl	800128c <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	4a70      	ldr	r2, [pc, #448]	; (800091c <main+0x2c0>)
 800075a:	6013      	str	r3, [r2, #0]
		//		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);

		HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 800075c:	2207      	movs	r2, #7
 800075e:	4970      	ldr	r1, [pc, #448]	; (8000920 <main+0x2c4>)
 8000760:	486d      	ldr	r0, [pc, #436]	; (8000918 <main+0x2bc>)
 8000762:	f003 ff8f 	bl	8004684 <HAL_UART_Receive_DMA>
		//		HAL_UART_Receive(&huart2, rcvBuffer, 7, 1000);

		if (rcvBuffer[0] == 0 && rcvBuffer[1] == 0 && rcvBuffer[2] == 0 && rcvBuffer[3] == 0 && rcvBuffer[4] == 0 && rcvBuffer[5] == 0 && rcvBuffer[6] == 0)
 8000766:	4b6e      	ldr	r3, [pc, #440]	; (8000920 <main+0x2c4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d11c      	bne.n	80007a8 <main+0x14c>
 800076e:	4b6c      	ldr	r3, [pc, #432]	; (8000920 <main+0x2c4>)
 8000770:	785b      	ldrb	r3, [r3, #1]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d118      	bne.n	80007a8 <main+0x14c>
 8000776:	4b6a      	ldr	r3, [pc, #424]	; (8000920 <main+0x2c4>)
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d114      	bne.n	80007a8 <main+0x14c>
 800077e:	4b68      	ldr	r3, [pc, #416]	; (8000920 <main+0x2c4>)
 8000780:	78db      	ldrb	r3, [r3, #3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d110      	bne.n	80007a8 <main+0x14c>
 8000786:	4b66      	ldr	r3, [pc, #408]	; (8000920 <main+0x2c4>)
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10c      	bne.n	80007a8 <main+0x14c>
 800078e:	4b64      	ldr	r3, [pc, #400]	; (8000920 <main+0x2c4>)
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d108      	bne.n	80007a8 <main+0x14c>
 8000796:	4b62      	ldr	r3, [pc, #392]	; (8000920 <main+0x2c4>)
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d104      	bne.n	80007a8 <main+0x14c>
		{
			HAL_Delay(100);
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f000 fd80 	bl	80012a4 <HAL_Delay>
			HAL_NVIC_SystemReset();
 80007a4:	f001 f9f1 	bl	8001b8a <HAL_NVIC_SystemReset>
		}

		buf[0] = (unsigned char)rcvBuffer[1];
 80007a8:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <main+0x2c4>)
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	4b5d      	ldr	r3, [pc, #372]	; (8000924 <main+0x2c8>)
 80007ae:	701a      	strb	r2, [r3, #0]
		buf[1] = (unsigned char)rcvBuffer[2];
 80007b0:	4b5b      	ldr	r3, [pc, #364]	; (8000920 <main+0x2c4>)
 80007b2:	789a      	ldrb	r2, [r3, #2]
 80007b4:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <main+0x2c8>)
 80007b6:	705a      	strb	r2, [r3, #1]
		buf[2] = (unsigned char)rcvBuffer[3];
 80007b8:	4b59      	ldr	r3, [pc, #356]	; (8000920 <main+0x2c4>)
 80007ba:	78da      	ldrb	r2, [r3, #3]
 80007bc:	4b59      	ldr	r3, [pc, #356]	; (8000924 <main+0x2c8>)
 80007be:	709a      	strb	r2, [r3, #2]
		buf[3] = (unsigned char)rcvBuffer[4];
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <main+0x2c4>)
 80007c2:	791a      	ldrb	r2, [r3, #4]
 80007c4:	4b57      	ldr	r3, [pc, #348]	; (8000924 <main+0x2c8>)
 80007c6:	70da      	strb	r2, [r3, #3]
		buf[4] = (unsigned char)rcvBuffer[5];
 80007c8:	4b55      	ldr	r3, [pc, #340]	; (8000920 <main+0x2c4>)
 80007ca:	795a      	ldrb	r2, [r3, #5]
 80007cc:	4b55      	ldr	r3, [pc, #340]	; (8000924 <main+0x2c8>)
 80007ce:	711a      	strb	r2, [r3, #4]
		buf[5] = (unsigned char)rcvBuffer[6];
 80007d0:	4b53      	ldr	r3, [pc, #332]	; (8000920 <main+0x2c4>)
 80007d2:	799a      	ldrb	r2, [r3, #6]
 80007d4:	4b53      	ldr	r3, [pc, #332]	; (8000924 <main+0x2c8>)
 80007d6:	715a      	strb	r2, [r3, #5]
		buf[6] = (unsigned char)rcvBuffer[0];
 80007d8:	4b51      	ldr	r3, [pc, #324]	; (8000920 <main+0x2c4>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b51      	ldr	r3, [pc, #324]	; (8000924 <main+0x2c8>)
 80007de:	719a      	strb	r2, [r3, #6]
 80007e0:	4b50      	ldr	r3, [pc, #320]	; (8000924 <main+0x2c8>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
		//			memcpy(buf, &rcvBuffer[1], sizeof(buf));
		//		}else{
		//			memcpy(buf, &rcvBuffer[0], sizeof(buf));
		//		}

		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
 80007e4:	4b50      	ldr	r3, [pc, #320]	; (8000928 <main+0x2cc>)
 80007e6:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[2];
 80007e8:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <main+0x2c8>)
 80007ea:	789b      	ldrb	r3, [r3, #2]
 80007ec:	723b      	strb	r3, [r7, #8]
		reversed_bytes[1] = buf[1];
 80007ee:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <main+0x2c8>)
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	727b      	strb	r3, [r7, #9]
 80007f4:	893a      	ldrh	r2, [r7, #8]
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 80007f6:	4b4d      	ldr	r3, [pc, #308]	; (800092c <main+0x2d0>)
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <main+0x2c8>)
 80007fc:	f8d3 3003 	ldr.w	r3, [r3, #3]

		uint8_t _temp_command_content[4];
		memcpy(_temp_command_content, &buf[3], sizeof(float));
 8000800:	607b      	str	r3, [r7, #4]
		// バイト列を逆順にコピー
		for (int j = 0; j < 4; j++)
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	e00f      	b.n	8000828 <main+0x1cc>
		{
			reversed_bytes[j] = _temp_command_content[3 - j];
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	f1c3 0303 	rsb	r3, r3, #3
 800080e:	3318      	adds	r3, #24
 8000810:	443b      	add	r3, r7
 8000812:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8000816:	f107 0208 	add.w	r2, r7, #8
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	4413      	add	r3, r2
 800081e:	460a      	mov	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++)
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	3301      	adds	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	2b03      	cmp	r3, #3
 800082c:	ddec      	ble.n	8000808 <main+0x1ac>
 800082e:	68bb      	ldr	r3, [r7, #8]
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 8000830:	4a3f      	ldr	r2, [pc, #252]	; (8000930 <main+0x2d4>)
 8000832:	6013      	str	r3, [r2, #0]

		pUart2 = &huart2;
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <main+0x2d8>)
 8000836:	4a38      	ldr	r2, [pc, #224]	; (8000918 <main+0x2bc>)
 8000838:	601a      	str	r2, [r3, #0]
		wr_ptr = pUart2->hdmarx->Instance->CNDTR;
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <main+0x2d8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4a3c      	ldr	r2, [pc, #240]	; (8000938 <main+0x2dc>)
 8000846:	6013      	str	r3, [r2, #0]

		if (uart_prev_count == 0 || uart_prev_count == uart_prev_count_past)
 8000848:	4b37      	ldr	r3, [pc, #220]	; (8000928 <main+0x2cc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d005      	beq.n	800085c <main+0x200>
 8000850:	4b35      	ldr	r3, [pc, #212]	; (8000928 <main+0x2cc>)
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <main+0x2e0>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	429a      	cmp	r2, r3
 800085a:	d106      	bne.n	800086a <main+0x20e>
		{
			debug_2 = 123;
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <main+0x2e4>)
 800085e:	227b      	movs	r2, #123	; 0x7b
 8000860:	801a      	strh	r2, [r3, #0]
			wr_ptr = 0;
 8000862:	4b35      	ldr	r3, [pc, #212]	; (8000938 <main+0x2dc>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	e0e1      	b.n	8000a2e <main+0x3d2>
		}
		else if (uart_prev_count == uart_prev_count_past + 1)
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <main+0x2cc>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b32      	ldr	r3, [pc, #200]	; (800093c <main+0x2e0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	429a      	cmp	r2, r3
 8000878:	f040 80d9 	bne.w	8000a2e <main+0x3d2>
		{
			debug_current_line = __LINE__;
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <main+0x2ac>)
 800087e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8000882:	801a      	strh	r2, [r3, #0]
			//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
			//
			//    sprintf(str, "data[1] : %d\n", data[1]);
			//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

			switch (command_id)
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <main+0x2d0>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3b16      	subs	r3, #22
 800088a:	2b06      	cmp	r3, #6
 800088c:	f200 80cc 	bhi.w	8000a28 <main+0x3cc>
 8000890:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <main+0x23c>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008b5 	.word	0x080008b5
 800089c:	08000a29 	.word	0x08000a29
 80008a0:	080008e9 	.word	0x080008e9
 80008a4:	08000a29 	.word	0x08000a29
 80008a8:	080008f3 	.word	0x080008f3
 80008ac:	0800094d 	.word	0x0800094d
 80008b0:	08000a1f 	.word	0x08000a1f
			{
			case 22:
				motor_speed[0] = command_content;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <main+0x2d4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <main+0x2e8>)
 80008ba:	6013      	str	r3, [r2, #0]
				if (is_run_CyberGear)
				{
//					CyberGear_ControlSpeed(&my_cyber[0],
//										   (float)motor_speed[0]);
				}
				if (motor_speed[0] > 5)
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <main+0x2e8>)
 80008be:	edd3 7a00 	vldr	s15, [r3]
 80008c2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80008c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ce:	dd05      	ble.n	80008dc <main+0x280>
				{
					HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port,
 80008d0:	2201      	movs	r2, #1
 80008d2:	2108      	movs	r1, #8
 80008d4:	481c      	ldr	r0, [pc, #112]	; (8000948 <main+0x2ec>)
 80008d6:	f001 fce9 	bl	80022ac <HAL_GPIO_WritePin>
				else
				{
					HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port,
									  BUILDIN_LED_Pin, 0);
				}
				break;
 80008da:	e0a5      	b.n	8000a28 <main+0x3cc>
					HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port,
 80008dc:	2200      	movs	r2, #0
 80008de:	2108      	movs	r1, #8
 80008e0:	4819      	ldr	r0, [pc, #100]	; (8000948 <main+0x2ec>)
 80008e2:	f001 fce3 	bl	80022ac <HAL_GPIO_WritePin>
				break;
 80008e6:	e09f      	b.n	8000a28 <main+0x3cc>

			case 24:
				motor_speed[1] = command_content;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <main+0x2d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a15      	ldr	r2, [pc, #84]	; (8000944 <main+0x2e8>)
 80008ee:	6053      	str	r3, [r2, #4]
				if (is_run_CyberGear)
				{
//					CyberGear_ControlSpeed(&my_cyber[1],
//										   (float)motor_speed[1]);
				}
				break;
 80008f0:	e09a      	b.n	8000a28 <main+0x3cc>

			case 26:
				motor_speed[2] = command_content;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <main+0x2d4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <main+0x2e8>)
 80008f8:	6093      	str	r3, [r2, #8]
				if (is_run_CyberGear)
				{
//					CyberGear_ControlSpeed(&my_cyber[2],
//										   (float)motor_speed[2]);
				}
				break;
 80008fa:	e095      	b.n	8000a28 <main+0x3cc>
 80008fc:	20000030 	.word	0x20000030
 8000900:	20000474 	.word	0x20000474
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004
 800090c:	200001b4 	.word	0x200001b4
 8000910:	080012a5 	.word	0x080012a5
 8000914:	08005904 	.word	0x08005904
 8000918:	200000a4 	.word	0x200000a4
 800091c:	20000528 	.word	0x20000528
 8000920:	200004e0 	.word	0x200004e0
 8000924:	20000514 	.word	0x20000514
 8000928:	20000534 	.word	0x20000534
 800092c:	20000536 	.word	0x20000536
 8000930:	20000538 	.word	0x20000538
 8000934:	20000500 	.word	0x20000500
 8000938:	2000053c 	.word	0x2000053c
 800093c:	20000535 	.word	0x20000535
 8000940:	20000002 	.word	0x20000002
 8000944:	20000504 	.word	0x20000504
 8000948:	48000400 	.word	0x48000400

			case 27:
				debug_2 = 1000;
 800094c:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <main+0x3f4>)
 800094e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000952:	801a      	strh	r2, [r3, #0]
				debug_current_line = __LINE__;
 8000954:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <main+0x3f8>)
 8000956:	f240 124f 	movw	r2, #335	; 0x14f
 800095a:	801a      	strh	r2, [r3, #0]
				for (int i = 1; i < 3; i++)
 800095c:	2301      	movs	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e059      	b.n	8000a16 <main+0x3ba>
				{
					debug_1 = i;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <main+0x3fc>)
 8000968:	801a      	strh	r2, [r3, #0]
					if (is_run_CyberGear)
					{
						debug_current_line = __LINE__;
 800096a:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <main+0x3f8>)
 800096c:	f240 1255 	movw	r2, #341	; 0x155
 8000970:	801a      	strh	r2, [r3, #0]
						CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0,
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	22b0      	movs	r2, #176	; 0xb0
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <main+0x400>)
 800097c:	1898      	adds	r0, r3, r2
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	3370      	adds	r3, #112	; 0x70
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <main+0x404>)
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2300      	movs	r3, #0
 800098c:	4935      	ldr	r1, [pc, #212]	; (8000a64 <main+0x408>)
 800098e:	f7ff fc92 	bl	80002b6 <CyberGear_Init>
									   HAL_Delay);
						debug_current_line = __LINE__;
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <main+0x3f8>)
 8000994:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000998:	801a      	strh	r2, [r3, #0]
						CyberGear_ResetMotor(&my_cyber[i]);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	22b0      	movs	r2, #176	; 0xb0
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <main+0x400>)
 80009a4:	4413      	add	r3, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd60 	bl	800046c <CyberGear_ResetMotor>
						debug_current_line = __LINE__;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <main+0x3f8>)
 80009ae:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80009b2:	801a      	strh	r2, [r3, #0]
						CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	22b0      	movs	r2, #176	; 0xb0
 80009b8:	fb02 f303 	mul.w	r3, r2, r3
 80009bc:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <main+0x400>)
 80009be:	4413      	add	r3, r2
 80009c0:	2102      	movs	r1, #2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcb2 	bl	800032c <CyberGear_SetMode>
						debug_current_line = __LINE__;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <main+0x3f8>)
 80009ca:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 80009ce:	801a      	strh	r2, [r3, #0]
						CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 4.0f);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	22b0      	movs	r2, #176	; 0xb0
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <main+0x400>)
 80009da:	4413      	add	r3, r2
 80009dc:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80009e0:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80009e4:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc82 	bl	80002f2 <CyberGear_SetConfig>
						debug_current_line = __LINE__;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <main+0x3f8>)
 80009f0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80009f4:	801a      	strh	r2, [r3, #0]
						CyberGear_EnableMotor(&my_cyber[i]);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	22b0      	movs	r2, #176	; 0xb0
 80009fa:	fb02 f303 	mul.w	r3, r2, r3
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <main+0x400>)
 8000a00:	4413      	add	r3, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd14 	bl	8000430 <CyberGear_EnableMotor>
						debug_current_line = __LINE__;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <main+0x3f8>)
 8000a0a:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8000a0e:	801a      	strh	r2, [r3, #0]
				for (int i = 1; i < 3; i++)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	dda2      	ble.n	8000962 <main+0x306>
					}
				}
				break;
 8000a1c:	e004      	b.n	8000a28 <main+0x3cc>

			case 28:
				motor_speed[3] = command_content;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <main+0x40c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <main+0x410>)
 8000a24:	60d3      	str	r3, [r2, #12]
				if (is_run_CyberGear)
				{
//					CyberGear_ControlSpeed(&my_cyber[3],
//										   (float)motor_speed[3]);
				}
				break;
 8000a26:	bf00      	nop
//			CyberGear_pos[0] = my_cyber[0].cyberfeedback.feedback_pos;
//			CyberGear_pos[1] = my_cyber[1].cyberfeedback.feedback_pos;
//			CyberGear_pos[2] = my_cyber[2].cyberfeedback.feedback_pos;
//			CyberGear_pos[3] = my_cyber[3].cyberfeedback.feedback_pos;

					HAL_Delay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fc3b 	bl	80012a4 <HAL_Delay>
		}

		uart_prev_count_past = uart_prev_count;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <main+0x414>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <main+0x418>)
 8000a34:	701a      	strb	r2, [r3, #0]

		end_time = HAL_GetTick();
 8000a36:	f000 fc29 	bl	800128c <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <main+0x41c>)
 8000a3e:	6013      	str	r3, [r2, #0]
		cycle_time = end_time - begin_time;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <main+0x41c>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <main+0x420>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <main+0x424>)
 8000a4c:	6013      	str	r3, [r2, #0]
	{
 8000a4e:	e67d      	b.n	800074c <main+0xf0>
 8000a50:	20000002 	.word	0x20000002
 8000a54:	20000004 	.word	0x20000004
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	200001b4 	.word	0x200001b4
 8000a60:	080012a5 	.word	0x080012a5
 8000a64:	20000474 	.word	0x20000474
 8000a68:	20000538 	.word	0x20000538
 8000a6c:	20000504 	.word	0x20000504
 8000a70:	20000534 	.word	0x20000534
 8000a74:	20000535 	.word	0x20000535
 8000a78:	2000052c 	.word	0x2000052c
 8000a7c:	20000528 	.word	0x20000528
 8000a80:	20000530 	.word	0x20000530

08000a84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	; 0x58
 8000a88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a8e:	2228      	movs	r2, #40	; 0x28
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 feef 	bl	8005876 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000acc:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fc00 	bl	80022dc <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000ae2:	f000 f98f 	bl	8000e04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fc28 	bl	8003358 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000b0e:	f000 f979 	bl	8000e04 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fe50 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8000b2a:	f000 f96b 	bl	8000e04 <Error_Handler>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	; 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_CAN_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b56:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000b5a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b62:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b8a:	f000 fbaf 	bl	80012ec <HAL_CAN_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8000b94:	f000 f936 	bl	8000e04 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000030 	.word	0x20000030
 8000ba0:	40006400 	.word	0x40006400

08000ba4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	222c      	movs	r2, #44	; 0x2c
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 fe50 	bl	8005876 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000bd6:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000bd8:	4a39      	ldr	r2, [pc, #228]	; (8000cc0 <MX_TIM1_Init+0x11c>)
 8000bda:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bee:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c02:	482e      	ldr	r0, [pc, #184]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000c04:	f002 ff04 	bl	8003a10 <HAL_TIM_PWM_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8000c0e:	f000 f8f9 	bl	8000e04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4825      	ldr	r0, [pc, #148]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000c26:	f003 fb7d 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000c30:	f000 f8e8 	bl	8000e04 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c34:	2360      	movs	r3, #96	; 0x60
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c54:	2200      	movs	r2, #0
 8000c56:	4619      	mov	r1, r3
 8000c58:	4818      	ldr	r0, [pc, #96]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000c5a:	f002 ff31 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8000c64:	f000 f8ce 	bl	8000e04 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000c9e:	f003 fbaf 	bl	8004400 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x108>
	{
		Error_Handler();
 8000ca8:	f000 f8ac 	bl	8000e04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <MX_TIM1_Init+0x118>)
 8000cae:	f000 f937 	bl	8000f20 <HAL_TIM_MspPostInit>
}
 8000cb2:	bf00      	nop
 8000cb4:	3758      	adds	r7, #88	; 0x58
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000058 	.word	0x20000058
 8000cc0:	40012c00 	.word	0x40012c00

08000cc4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000ccc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <MX_USART2_UART_Init+0x5c>)
 8000cd2:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000ce8:	220c      	movs	r2, #12
 8000cea:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_USART2_UART_Init+0x54>)
 8000d06:	f003 fbf3 	bl	80044f0 <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART2_UART_Init+0x50>
	{
		Error_Handler();
 8000d10:	f000 f878 	bl	8000e04 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000a4 	.word	0x200000a4
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	0007a120 	.word	0x0007a120

08000d24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_DMA_Init+0x48>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_DMA_Init+0x48>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DMA_Init+0x48>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2010      	movs	r0, #16
 8000d48:	f000 fef5 	bl	8001b36 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d4c:	2010      	movs	r0, #16
 8000d4e:	f000 ff0e 	bl	8001b6e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2011      	movs	r0, #17
 8000d58:	f000 feed 	bl	8001b36 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d5c:	2011      	movs	r0, #17
 8000d5e:	f000 ff06 	bl	8001b6e <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6153      	str	r3, [r2, #20]
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_GPIO_Init+0x8c>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <MX_GPIO_Init+0x90>)
 8000dd4:	f001 fa6a 	bl	80022ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0x90>)
 8000df0:	f001 f8ea 	bl	8001fc8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000400 	.word	0x48000400

08000e04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_MspInit+0x44>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_MspInit+0x44>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_MspInit+0x44>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x44>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x44>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x44>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_CAN_MspInit+0x80>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d129      	bne.n	8000ece <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_CAN_MspInit+0x84>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_CAN_MspInit+0x84>)
 8000e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_CAN_MspInit+0x84>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_CAN_MspInit+0x84>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_CAN_MspInit+0x84>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_CAN_MspInit+0x84>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f001 f87d 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40006400 	.word	0x40006400
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_TIM_PWM_MspInit+0x38>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10b      	bne.n	8000f0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_PWM_MspInit+0x3c>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <HAL_TIM_PWM_MspInit+0x3c>)
 8000ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000efc:	6193      	str	r3, [r2, #24]
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40012c00 	.word	0x40012c00
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <HAL_TIM_MspPostInit+0x68>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d11d      	bne.n	8000f7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f001 f825 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a42      	ldr	r2, [pc, #264]	; (80010b8 <HAL_UART_MspInit+0x128>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d17d      	bne.n	80010ae <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <HAL_UART_MspInit+0x12c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a41      	ldr	r2, [pc, #260]	; (80010bc <HAL_UART_MspInit+0x12c>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_UART_MspInit+0x12c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <HAL_UART_MspInit+0x12c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <HAL_UART_MspInit+0x12c>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <HAL_UART_MspInit+0x12c>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fe2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f000 ffe1 	bl	8001fc8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_UART_MspInit+0x130>)
 8001008:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <HAL_UART_MspInit+0x134>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UART_MspInit+0x130>)
 800100e:	2210      	movs	r2, #16
 8001010:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_UART_MspInit+0x130>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <HAL_UART_MspInit+0x130>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_UART_MspInit+0x130>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_UART_MspInit+0x130>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_UART_MspInit+0x130>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_UART_MspInit+0x130>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001036:	4822      	ldr	r0, [pc, #136]	; (80010c0 <HAL_UART_MspInit+0x130>)
 8001038:	f000 fdb7 	bl	8001baa <HAL_DMA_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001042:	f7ff fedf 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_UART_MspInit+0x130>)
 800104a:	671a      	str	r2, [r3, #112]	; 0x70
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_UART_MspInit+0x130>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_UART_MspInit+0x13c>)
 8001056:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_UART_MspInit+0x138>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_UART_MspInit+0x138>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001078:	2220      	movs	r2, #32
 800107a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_UART_MspInit+0x138>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001084:	f000 fd91 	bl	8001baa <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800108e:	f7ff feb9 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_UART_MspInit+0x138>)
 8001096:	675a      	str	r2, [r3, #116]	; 0x74
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_UART_MspInit+0x138>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2026      	movs	r0, #38	; 0x26
 80010a4:	f000 fd47 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a8:	2026      	movs	r0, #38	; 0x26
 80010aa:	f000 fd60 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40004400 	.word	0x40004400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	2000012c 	.word	0x2000012c
 80010c4:	40020080 	.word	0x40020080
 80010c8:	20000170 	.word	0x20000170
 80010cc:	4002006c 	.word	0x4002006c

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f8a2 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Channel6_IRQHandler+0x10>)
 800112a:	f000 fe5b 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000170 	.word	0x20000170

08001138 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Channel7_IRQHandler+0x10>)
 800113e:	f000 fe51 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000012c 	.word	0x2000012c

0800114c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <USART2_IRQHandler+0x10>)
 8001152:	f003 fadb 	bl	800470c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000a4 	.word	0x200000a4

08001160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff ffea 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 fb69 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff fa51 	bl	800065c <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011c8:	08005968 	.word	0x08005968
  ldr r2, =_sbss
 80011cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011d0:	20000544 	.word	0x20000544

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 fc99 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe0c 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fcb5 	bl	8001b92 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001240:	f000 fc79 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000008 	.word	0x20000008
 800125c:	20000010 	.word	0x20000010
 8001260:	2000000c 	.word	0x2000000c

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000010 	.word	0x20000010
 8001288:	20000540 	.word	0x20000540

0800128c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000540 	.word	0x20000540

080012a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000010 	.word	0x20000010

080012ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0ed      	b.n	80014da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fda4 	bl	8000e58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff ffb4 	bl	800128c <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff ffb0 	bl	800128c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0c5      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0e5      	beq.n	8001328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0202 	bic.w	r2, r2, #2
 800136a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff ff8e 	bl	800128c <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001372:	e012      	b.n	800139a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001374:	f7ff ff8a 	bl	800128c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b0a      	cmp	r3, #10
 8001380:	d90b      	bls.n	800139a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2205      	movs	r2, #5
 8001392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e09f      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e5      	bne.n	8001374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e1b      	ldrb	r3, [r3, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7e5b      	ldrb	r3, [r3, #25]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d108      	bne.n	80013ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e007      	b.n	80013fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e9b      	ldrb	r3, [r3, #26]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e007      	b.n	8001426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0220 	bic.w	r2, r2, #32
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7edb      	ldrb	r3, [r3, #27]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0210 	bic.w	r2, r2, #16
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e007      	b.n	8001450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0210 	orr.w	r2, r2, #16
 800144e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0208 	bic.w	r2, r2, #8
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7f5b      	ldrb	r3, [r3, #29]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0204 	orr.w	r2, r2, #4
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	ea42 0103 	orr.w	r1, r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014fa:	7cfb      	ldrb	r3, [r7, #19]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d003      	beq.n	8001508 <HAL_CAN_ConfigFilter+0x26>
 8001500:	7cfb      	ldrb	r3, [r7, #19]
 8001502:	2b02      	cmp	r3, #2
 8001504:	f040 80aa 	bne.w	800165c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d123      	bne.n	800158a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001564:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3248      	adds	r2, #72	; 0x48
 800156a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800157e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001580:	6979      	ldr	r1, [r7, #20]
 8001582:	3348      	adds	r3, #72	; 0x48
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d122      	bne.n	80015d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	431a      	orrs	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3248      	adds	r2, #72	; 0x48
 80015b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	3348      	adds	r3, #72	; 0x48
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015f2:	e007      	b.n	8001604 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800161e:	e007      	b.n	8001630 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800164e:	f023 0201 	bic.w	r2, r3, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e006      	b.n	800166a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d12e      	bne.n	80016e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016a2:	f7ff fdf3 	bl	800128c <HAL_GetTick>
 80016a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a8:	e012      	b.n	80016d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016aa:	f7ff fdef 	bl	800128c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	d90b      	bls.n	80016d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2205      	movs	r2, #5
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e012      	b.n	80016f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1e5      	bne.n	80016aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e006      	b.n	80016f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016fe:	b480      	push	{r7}
 8001700:	b089      	sub	sp, #36	; 0x24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d003      	beq.n	800172a <HAL_CAN_AddTxMessage+0x2c>
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b02      	cmp	r3, #2
 8001726:	f040 80ad 	bne.w	8001884 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8095 	beq.w	8001874 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	0e1b      	lsrs	r3, r3, #24
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001754:	2201      	movs	r2, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	409a      	lsls	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	6809      	ldr	r1, [r1, #0]
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3318      	adds	r3, #24
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	440b      	add	r3, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e00f      	b.n	80017a2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800178c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001792:	68f9      	ldr	r1, [r7, #12]
 8001794:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001796:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3318      	adds	r3, #24
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	440b      	add	r3, r1
 80017a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3318      	adds	r3, #24
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	440b      	add	r3, r1
 80017b2:	3304      	adds	r3, #4
 80017b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	7d1b      	ldrb	r3, [r3, #20]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d111      	bne.n	80017e2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3318      	adds	r3, #24
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3318      	adds	r3, #24
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3307      	adds	r3, #7
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	061a      	lsls	r2, r3, #24
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3306      	adds	r3, #6
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3305      	adds	r3, #5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4313      	orrs	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	3204      	adds	r2, #4
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	4610      	mov	r0, r2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	6811      	ldr	r1, [r2, #0]
 800180a:	ea43 0200 	orr.w	r2, r3, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	440b      	add	r3, r1
 8001814:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001818:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3303      	adds	r3, #3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	061a      	lsls	r2, r3, #24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3302      	adds	r3, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4313      	orrs	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4610      	mov	r0, r2
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	ea43 0200 	orr.w	r2, r3, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	440b      	add	r3, r1
 800184a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800184e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3318      	adds	r3, #24
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	6811      	ldr	r1, [r2, #0]
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3318      	adds	r3, #24
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	440b      	add	r3, r1
 800186e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e00e      	b.n	8001892 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e006      	b.n	8001892 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d002      	beq.n	80018be <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d11d      	bne.n	80018fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d002      	beq.n	8001926 <HAL_CAN_ActivateNotification+0x1e>
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d109      	bne.n	800193a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6959      	ldr	r1, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e006      	b.n	8001948 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab4:	f3bf 8f4f 	dsb	sy
}
 8001ab8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <__NVIC_SystemReset+0x24>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ac2:	4904      	ldr	r1, [pc, #16]	; (8001ad4 <__NVIC_SystemReset+0x24>)
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_SystemReset+0x28>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aca:	f3bf 8f4f 	dsb	sy
}
 8001ace:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <__NVIC_SystemReset+0x20>
 8001ad4:	e000ed00 	.word	0xe000ed00
 8001ad8:	05fa0004 	.word	0x05fa0004

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b00:	f7ff ff78 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff13 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff28 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff78 	bl	8001a48 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff47 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff1b 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001b8e:	f7ff ff8f 	bl	8001ab0 <__NVIC_SystemReset>

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff9e 	bl	8001adc <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e037      	b.n	8001c30 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f9b8 	bl	8001f88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}  
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Start_IT+0x20>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e04a      	b.n	8001cee <HAL_DMA_Start_IT+0xb6>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d13a      	bne.n	8001ce0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f94b 	bl	8001f2a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 020e 	orr.w	r2, r2, #14
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e00f      	b.n	8001cce <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 020a 	orr.w	r2, r2, #10
 8001cbc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0204 	bic.w	r2, r2, #4
 8001ccc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e005      	b.n	8001cec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e020      	b.n	8001d5c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020e 	bic.w	r2, r2, #14
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d005      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e027      	b.n	8001dda <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020e 	bic.w	r2, r2, #14
 8001d98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
    } 
  }
  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2204      	movs	r2, #4
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d024      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x72>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01f      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d06a      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	e065      	b.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d02c      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0xdc>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d027      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10b      	bne.n	8001e96 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 020a 	bic.w	r2, r2, #10
 8001e8c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d035      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001ebe:	e030      	b.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d028      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d023      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 020e 	bic.w	r2, r2, #14
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
    }
  }
}  
 8001f20:	e7ff      	b.n	8001f22 <HAL_DMA_IRQHandler+0x13e>
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d108      	bne.n	8001f6a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f68:	e007      	b.n	8001f7a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	60da      	str	r2, [r3, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <DMA_CalcBaseAndBitshift+0x34>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x38>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	009a      	lsls	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	bffdfff8 	.word	0xbffdfff8
 8001fc0:	cccccccd 	.word	0xcccccccd
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e14e      	b.n	8002276 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8140 	beq.w	8002270 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x40>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 809a 	beq.w	8002270 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b55      	ldr	r3, [pc, #340]	; (8002294 <HAL_GPIO_Init+0x2cc>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a54      	ldr	r2, [pc, #336]	; (8002294 <HAL_GPIO_Init+0x2cc>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_GPIO_Init+0x2cc>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002154:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800217e:	d013      	beq.n	80021a8 <HAL_GPIO_Init+0x1e0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a46      	ldr	r2, [pc, #280]	; (800229c <HAL_GPIO_Init+0x2d4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_Init+0x1dc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a45      	ldr	r2, [pc, #276]	; (80022a0 <HAL_GPIO_Init+0x2d8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1d8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a44      	ldr	r2, [pc, #272]	; (80022a4 <HAL_GPIO_Init+0x2dc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_Init+0x1d4>
 8002198:	2303      	movs	r3, #3
 800219a:	e006      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 800219c:	2305      	movs	r3, #5
 800219e:	e004      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 80021a8:	2300      	movs	r3, #0
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	f002 0203 	and.w	r2, r2, #3
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	4093      	lsls	r3, r2
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ba:	4937      	ldr	r1, [pc, #220]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002216:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002240:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	f47f aea9 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 8002286:	bf00      	nop
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	48000400 	.word	0x48000400
 80022a0:	48000800 	.word	0x48000800
 80022a4:	48000c00 	.word	0x48000c00
 80022a8:	40010400 	.word	0x40010400

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f001 b823 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 817d 	beq.w	8002612 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002318:	4bbc      	ldr	r3, [pc, #752]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b04      	cmp	r3, #4
 8002322:	d00c      	beq.n	800233e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002324:	4bb9      	ldr	r3, [pc, #740]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d15c      	bne.n	80023ea <HAL_RCC_OscConfig+0x10e>
 8002330:	4bb6      	ldr	r3, [pc, #728]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d155      	bne.n	80023ea <HAL_RCC_OscConfig+0x10e>
 800233e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002342:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002352:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x94>
 800236a:	4ba8      	ldr	r3, [pc, #672]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0xc0>
 8002370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002374:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002388:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800238c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002398:	4b9c      	ldr	r3, [pc, #624]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023a8:	fa92 f2a2 	rbit	r2, r2
 80023ac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80023b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023b4:	fab2 f282 	clz	r2, r2
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f042 0220 	orr.w	r2, r2, #32
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f002 021f 	and.w	r2, r2, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 811f 	beq.w	8002610 <HAL_RCC_OscConfig+0x334>
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8116 	bne.w	8002610 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f000 bfaf 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x12e>
 80023fc:	4b83      	ldr	r3, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a82      	ldr	r2, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e036      	b.n	8002478 <HAL_RCC_OscConfig+0x19c>
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x158>
 800241a:	4b7c      	ldr	r3, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7b      	ldr	r2, [pc, #492]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b79      	ldr	r3, [pc, #484]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a78      	ldr	r2, [pc, #480]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e021      	b.n	8002478 <HAL_RCC_OscConfig+0x19c>
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x184>
 8002446:	4b71      	ldr	r3, [pc, #452]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a70      	ldr	r2, [pc, #448]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6d      	ldr	r2, [pc, #436]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x19c>
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a66      	ldr	r2, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002478:	4b64      	ldr	r3, [pc, #400]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f023 020f 	bic.w	r2, r3, #15
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	495f      	ldr	r1, [pc, #380]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800248e:	4313      	orrs	r3, r2
 8002490:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d059      	beq.n	8002556 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fef3 	bl	800128c <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe feee 	bl	800128c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d902      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	f000 bf43 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 80024c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80024d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x218>
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e015      	b.n	8002520 <HAL_RCC_OscConfig+0x244>
 80024f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002510:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x330>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002524:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002528:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002534:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f002 021f 	and.w	r2, r2, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ab      	beq.n	80024ac <HAL_RCC_OscConfig+0x1d0>
 8002554:	e05d      	b.n	8002612 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fe99 	bl	800128c <HAL_GetTick>
 800255a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fe94 	bl	800128c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d902      	bls.n	8002576 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f000 bee9 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800258a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2cc>
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e015      	b.n	80025d4 <HAL_RCC_OscConfig+0x2f8>
 80025a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80025dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025e0:	fa92 f2a2 	rbit	r2, r2
 80025e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80025e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80025ec:	fab2 f282 	clz	r2, r2
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f002 021f 	and.w	r2, r2, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ab      	bne.n	8002560 <HAL_RCC_OscConfig+0x284>
 8002608:	e003      	b.n	8002612 <HAL_RCC_OscConfig+0x336>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 817d 	beq.w	8002922 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002628:	4ba6      	ldr	r3, [pc, #664]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002634:	4ba3      	ldr	r3, [pc, #652]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d172      	bne.n	8002726 <HAL_RCC_OscConfig+0x44a>
 8002640:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d16c      	bne.n	8002726 <HAL_RCC_OscConfig+0x44a>
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800265e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0x3a0>
 8002676:	4b93      	ldr	r3, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x3c8>
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002694:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026a0:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2202      	movs	r2, #2
 80026a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCC_OscConfig+0x410>
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f000 be2e 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	21f8      	movs	r1, #248	; 0xf8
 8002702:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800270a:	fa91 f1a1 	rbit	r1, r1
 800270e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002712:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002716:	fab1 f181 	clz	r1, r1
 800271a:	b2c9      	uxtb	r1, r1
 800271c:	408b      	lsls	r3, r1
 800271e:	4969      	ldr	r1, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002724:	e0fd      	b.n	8002922 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8088 	beq.w	8002848 <HAL_RCC_OscConfig+0x56c>
 8002738:	2301      	movs	r3, #1
 800273a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800274a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2301      	movs	r3, #1
 8002762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fd92 	bl	800128c <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fd8d 	bl	800128c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	f000 bde2 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002784:	2302      	movs	r3, #2
 8002786:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002796:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4d8>
 80027ae:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e013      	b.n	80027dc <HAL_RCC_OscConfig+0x500>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2202      	movs	r2, #2
 80027de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80027e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80027ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0af      	beq.n	800276e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	21f8      	movs	r1, #248	; 0xf8
 8002824:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800282c:	fa91 f1a1 	rbit	r1, r1
 8002830:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002834:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002838:	fab1 f181 	clz	r1, r1
 800283c:	b2c9      	uxtb	r1, r1
 800283e:	408b      	lsls	r3, r1
 8002840:	4920      	ldr	r1, [pc, #128]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
 8002846:	e06c      	b.n	8002922 <HAL_RCC_OscConfig+0x646>
 8002848:	2301      	movs	r3, #1
 800284a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800285a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fd0a 	bl	800128c <HAL_GetTick>
 8002878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fd05 	bl	800128c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	f000 bd5a 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d104      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5ec>
 80028be:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <HAL_RCC_OscConfig+0x5e8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e015      	b.n	80028f0 <HAL_RCC_OscConfig+0x614>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80028ec:	4bc8      	ldr	r3, [pc, #800]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2202      	movs	r2, #2
 80028f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80028f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028fa:	fa92 f2a2 	rbit	r2, r2
 80028fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002902:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ad      	bne.n	800287e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8110 	beq.w	8002b58 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d079      	beq.n	8002a3c <HAL_RCC_OscConfig+0x760>
 8002948:	2301      	movs	r3, #1
 800294a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800295a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4bab      	ldr	r3, [pc, #684]	; (8002c14 <HAL_RCC_OscConfig+0x938>)
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	2301      	movs	r3, #1
 8002970:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe fc8b 	bl	800128c <HAL_GetTick>
 8002976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe fc86 	bl	800128c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d902      	bls.n	8002992 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	f000 bcdb 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029d0:	2202      	movs	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 80029ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029f8:	2102      	movs	r1, #2
 80029fa:	6019      	str	r1, [r3, #0]
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f1a3 	rbit	r1, r3
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a12:	6019      	str	r1, [r3, #0]
  return result;
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0a0      	beq.n	800297c <HAL_RCC_OscConfig+0x6a0>
 8002a3a:	e08d      	b.n	8002b58 <HAL_RCC_OscConfig+0x87c>
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a5e:	601a      	str	r2, [r3, #0]
  return result;
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x938>)
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fc05 	bl	800128c <HAL_GetTick>
 8002a82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fc00 	bl	800128c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f000 bc55 	b.w	8003348 <HAL_RCC_OscConfig+0x106c>
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002aca:	2202      	movs	r2, #2
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002aee:	2202      	movs	r2, #2
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b16:	2102      	movs	r1, #2
 8002b18:	6019      	str	r1, [r3, #0]
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f1a3 	rbit	r1, r3
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b30:	6019      	str	r1, [r3, #0]
  return result;
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d197      	bne.n	8002a88 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 81a1 	beq.w	8002eb0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d116      	bne.n	8002bae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ba6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fb61 	bl	800128c <HAL_GetTick>
 8002bca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	e009      	b.n	8002be4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe fb5c 	bl	800128c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e3b1      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_RCC_OscConfig+0x93c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_OscConfig+0x940>
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a02      	ldr	r2, [pc, #8]	; (8002c10 <HAL_RCC_OscConfig+0x934>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	e03c      	b.n	8002c88 <HAL_RCC_OscConfig+0x9ac>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	10908120 	.word	0x10908120
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x96a>
 8002c2c:	4bc1      	ldr	r3, [pc, #772]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4ac0      	ldr	r2, [pc, #768]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	4bbe      	ldr	r3, [pc, #760]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4abd      	ldr	r2, [pc, #756]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	e020      	b.n	8002c88 <HAL_RCC_OscConfig+0x9ac>
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x994>
 8002c56:	4bb7      	ldr	r3, [pc, #732]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4ab6      	ldr	r2, [pc, #728]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	4bb4      	ldr	r3, [pc, #720]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4ab3      	ldr	r2, [pc, #716]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0x9ac>
 8002c70:	4bb0      	ldr	r3, [pc, #704]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4aaf      	ldr	r2, [pc, #700]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	4bad      	ldr	r3, [pc, #692]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4aac      	ldr	r2, [pc, #688]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8081 	beq.w	8002d9c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe faf7 	bl	800128c <HAL_GetTick>
 8002c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe faf2 	bl	800128c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e345      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ce8:	2202      	movs	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0xa4c>
 8002d22:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	e013      	b.n	8002d50 <HAL_RCC_OscConfig+0xa74>
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d54:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d58:	2102      	movs	r1, #2
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	fa92 f1a2 	rbit	r1, r2
 8002d6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d6e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d72:	6011      	str	r1, [r2, #0]
  return result;
 8002d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d78:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d084      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x9c8>
 8002d9a:	e07f      	b.n	8002e9c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fa76 	bl	800128c <HAL_GetTick>
 8002da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe fa71 	bl	800128c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e2c4      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fa93 f2a3 	rbit	r2, r3
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e04:	601a      	str	r2, [r3, #0]
  return result;
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_OscConfig+0xb4e>
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	e013      	b.n	8002e52 <HAL_RCC_OscConfig+0xb76>
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e32:	2202      	movs	r2, #2
 8002e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	6011      	str	r1, [r2, #0]
 8002e5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fa92 f1a2 	rbit	r1, r2
 8002e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e74:	6011      	str	r1, [r2, #0]
  return result;
 8002e76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	fab2 f282 	clz	r2, r2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f002 021f 	and.w	r2, r2, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d184      	bne.n	8002da6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8242 	beq.w	8003346 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCC_OscConfig+0xc58>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	f000 8213 	beq.w	80032f6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	f040 8162 	bne.w	80031a6 <HAL_RCC_OscConfig+0xeca>
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f06:	601a      	str	r2, [r3, #0]
  return result;
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe f9b0 	bl	800128c <HAL_GetTick>
 8002f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f30:	e00c      	b.n	8002f4c <HAL_RCC_OscConfig+0xc70>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe f9a8 	bl	800128c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1fd      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f70:	601a      	str	r2, [r3, #0]
  return result;
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <HAL_RCC_OscConfig+0xcba>
 8002f90:	4bb0      	ldr	r3, [pc, #704]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	e027      	b.n	8002fe6 <HAL_RCC_OscConfig+0xd0a>
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	4b9c      	ldr	r3, [pc, #624]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ff2:	6011      	str	r1, [r2, #0]
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	fa92 f1a2 	rbit	r1, r2
 8003002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003006:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800300a:	6011      	str	r1, [r2, #0]
  return result;
 800300c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003010:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d182      	bne.n	8002f38 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	430b      	orrs	r3, r1
 8003054:	497f      	ldr	r1, [pc, #508]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003062:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800307e:	601a      	str	r2, [r3, #0]
  return result;
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003088:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	2301      	movs	r3, #1
 800309e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe f8f4 	bl	800128c <HAL_GetTick>
 80030a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a8:	e009      	b.n	80030be <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe f8ef 	bl	800128c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e144      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030e2:	601a      	str	r2, [r3, #0]
  return result;
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0xe2c>
 8003102:	4b54      	ldr	r3, [pc, #336]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e027      	b.n	8003158 <HAL_RCC_OscConfig+0xe7c>
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003160:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	fa92 f1a2 	rbit	r1, r2
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800317c:	6011      	str	r1, [r2, #0]
  return result;
 800317e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003182:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d082      	beq.n	80030aa <HAL_RCC_OscConfig+0xdce>
 80031a4:	e0cf      	b.n	8003346 <HAL_RCC_OscConfig+0x106a>
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031ca:	601a      	str	r2, [r3, #0]
  return result;
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe f84e 	bl	800128c <HAL_GetTick>
 80031f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e009      	b.n	800320a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe f849 	bl	800128c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e09e      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fa93 f2a3 	rbit	r2, r3
 8003226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800322e:	601a      	str	r2, [r3, #0]
  return result;
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003238:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d104      	bne.n	8003258 <HAL_RCC_OscConfig+0xf7c>
 800324e:	4b01      	ldr	r3, [pc, #4]	; (8003254 <HAL_RCC_OscConfig+0xf78>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e029      	b.n	80032a8 <HAL_RCC_OscConfig+0xfcc>
 8003254:	40021000 	.word	0x40021000
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x1078>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fa92 f1a2 	rbit	r1, r2
 80032c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032cc:	6011      	str	r1, [r2, #0]
  return result;
 80032ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d180      	bne.n	80031f6 <HAL_RCC_OscConfig+0xf1a>
 80032f4:	e027      	b.n	8003346 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01e      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_OscConfig+0x1078>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003312:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003316:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	429a      	cmp	r2, r3
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800332a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800332e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b09e      	sub	sp, #120	; 0x78
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e162      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d910      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b8d      	ldr	r3, [pc, #564]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 0207 	bic.w	r2, r3, #7
 8003386:	498b      	ldr	r1, [pc, #556]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b89      	ldr	r3, [pc, #548]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e14a      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	497f      	ldr	r1, [pc, #508]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80dc 	beq.w	8003584 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d13c      	bne.n	800344e <HAL_RCC_ClockConfig+0xf6>
 80033d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_ClockConfig+0xa6>
 80033f8:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	e00f      	b.n	800341e <HAL_RCC_ClockConfig+0xc6>
 80033fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003402:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	667b      	str	r3, [r7, #100]	; 0x64
 800340c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003410:	663b      	str	r3, [r7, #96]	; 0x60
 8003412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800341a:	4b67      	ldr	r3, [pc, #412]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003422:	65ba      	str	r2, [r7, #88]	; 0x58
 8003424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800342c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d17b      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0f3      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d13c      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x178>
 8003456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_ClockConfig+0x128>
 800347a:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e00f      	b.n	80034a0 <HAL_RCC_ClockConfig+0x148>
 8003480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	647b      	str	r3, [r7, #68]	; 0x44
 800348e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80034a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f042 0220 	orr.w	r2, r2, #32
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f002 021f 	and.w	r2, r2, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d13a      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b2      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
 80034d0:	2302      	movs	r3, #2
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x1a0>
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e00d      	b.n	8003514 <HAL_RCC_ClockConfig+0x1bc>
 80034f8:	2302      	movs	r3, #2
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	2302      	movs	r3, #2
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2202      	movs	r2, #2
 8003516:	61ba      	str	r2, [r7, #24]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	617a      	str	r2, [r7, #20]
  return result;
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f042 0220 	orr.w	r2, r2, #32
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f002 021f 	and.w	r2, r2, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e079      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	491a      	ldr	r1, [pc, #104]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003554:	f7fd fe9a 	bl	800128c <HAL_GetTick>
 8003558:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fd fe96 	bl	800128c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e061      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 020c 	and.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d1eb      	bne.n	800355c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d214      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4906      	ldr	r1, [pc, #24]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <HAL_RCC_ClockConfig+0x25c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e040      	b.n	8003636 <HAL_RCC_ClockConfig+0x2de>
 80035b4:	40022000 	.word	0x40022000
 80035b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	491a      	ldr	r1, [pc, #104]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4912      	ldr	r1, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035fa:	f000 f829 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80035fe:	4601      	mov	r1, r0
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCC_ClockConfig+0x2e8>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003608:	22f0      	movs	r2, #240	; 0xf0
 800360a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	60fa      	str	r2, [r7, #12]
  return result;
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	40d3      	lsrs	r3, r2
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x2ec>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	fa21 f303 	lsr.w	r3, r1, r3
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <HAL_RCC_ClockConfig+0x2f0>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_ClockConfig+0x2f4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fde8 	bl	8001204 <HAL_InitTick>
  
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3778      	adds	r7, #120	; 0x78
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	08005928 	.word	0x08005928
 8003648:	20000008 	.word	0x20000008
 800364c:	2000000c 	.word	0x2000000c

08003650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b08b      	sub	sp, #44	; 0x2c
 8003654:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc0>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x30>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x36>
 800367e:	e03c      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003682:	623b      	str	r3, [r7, #32]
      break;
 8003684:	e03c      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800368c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003690:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	607a      	str	r2, [r7, #4]
  return result;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	40d3      	lsrs	r3, r2
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	220f      	movs	r2, #15
 80036b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	fa92 f2a2 	rbit	r2, r2
 80036bc:	60fa      	str	r2, [r7, #12]
  return result;
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	40d3      	lsrs	r3, r2
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <HAL_RCC_GetSysClockFreq+0xcc>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	e004      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	623b      	str	r3, [r7, #32]
      break;
 80036f8:	e002      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036fc:	623b      	str	r3, [r7, #32]
      break;
 80036fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003700:	6a3b      	ldr	r3, [r7, #32]
}
 8003702:	4618      	mov	r0, r3
 8003704:	372c      	adds	r7, #44	; 0x2c
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	007a1200 	.word	0x007a1200
 8003718:	08005940 	.word	0x08005940
 800371c:	08005950 	.word	0x08005950
 8003720:	003d0900 	.word	0x003d0900

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000008 	.word	0x20000008

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003742:	f7ff ffef 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003746:	4601      	mov	r1, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003750:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003754:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	fa92 f2a2 	rbit	r2, r2
 800375c:	603a      	str	r2, [r7, #0]
  return result;
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	fab2 f282 	clz	r2, r2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	40d3      	lsrs	r3, r2
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_RCC_GetPCLK1Freq+0x40>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	08005938 	.word	0x08005938

08003780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003786:	f7ff ffcd 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 800378a:	4601      	mov	r1, r0
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003794:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003798:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	fa92 f2a2 	rbit	r2, r2
 80037a0:	603a      	str	r2, [r7, #0]
  return result;
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	40d3      	lsrs	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	08005938 	.word	0x08005938

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b092      	sub	sp, #72	; 0x48
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80cd 	beq.w	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e8:	4b86      	ldr	r3, [pc, #536]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b83      	ldr	r3, [pc, #524]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a82      	ldr	r2, [pc, #520]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	61d3      	str	r3, [r2, #28]
 8003800:	4b80      	ldr	r3, [pc, #512]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b7d      	ldr	r3, [pc, #500]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a79      	ldr	r2, [pc, #484]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fd fd2f 	bl	800128c <HAL_GetTick>
 800382e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fd fd2b 	bl	800128c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0db      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b70      	ldr	r3, [pc, #448]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003850:	4b6c      	ldr	r3, [pc, #432]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d07d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800386a:	429a      	cmp	r2, r3
 800386c:	d076      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800386e:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	4b5e      	ldr	r3, [pc, #376]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2301      	movs	r3, #1
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b55      	ldr	r3, [pc, #340]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	2300      	movs	r3, #0
 80038be:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038c0:	4a50      	ldr	r2, [pc, #320]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d045      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fcdc 	bl	800128c <HAL_GetTick>
 80038d4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d6:	e00a      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d8:	f7fd fcd8 	bl	800128c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e086      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80038ee:	2302      	movs	r3, #2
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	2302      	movs	r3, #2
 80038fc:	623b      	str	r3, [r7, #32]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	61fb      	str	r3, [r7, #28]
  return result;
 8003906:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f043 0302 	orr.w	r3, r3, #2
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d102      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	e007      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003922:	2302      	movs	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2202      	movs	r2, #2
 8003934:	613a      	str	r2, [r7, #16]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	60fa      	str	r2, [r7, #12]
  return result;
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f002 021f 	and.w	r2, r2, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0bd      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800395c:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4926      	ldr	r1, [pc, #152]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800396a:	4313      	orrs	r3, r2
 800396c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800396e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f023 0203 	bic.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	491a      	ldr	r1, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800399c:	4313      	orrs	r3, r2
 800399e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f023 0210 	bic.w	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4912      	ldr	r1, [pc, #72]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	490b      	ldr	r1, [pc, #44]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3748      	adds	r7, #72	; 0x48
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	10908100 	.word	0x10908100

08003a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e049      	b.n	8003ab6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fa52 	bl	8000ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 f94a 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0ff      	b.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b14      	cmp	r3, #20
 8003aea:	f200 80f0 	bhi.w	8003cce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b49 	.word	0x08003b49
 8003af8:	08003ccf 	.word	0x08003ccf
 8003afc:	08003ccf 	.word	0x08003ccf
 8003b00:	08003ccf 	.word	0x08003ccf
 8003b04:	08003b89 	.word	0x08003b89
 8003b08:	08003ccf 	.word	0x08003ccf
 8003b0c:	08003ccf 	.word	0x08003ccf
 8003b10:	08003ccf 	.word	0x08003ccf
 8003b14:	08003bcb 	.word	0x08003bcb
 8003b18:	08003ccf 	.word	0x08003ccf
 8003b1c:	08003ccf 	.word	0x08003ccf
 8003b20:	08003ccf 	.word	0x08003ccf
 8003b24:	08003c0b 	.word	0x08003c0b
 8003b28:	08003ccf 	.word	0x08003ccf
 8003b2c:	08003ccf 	.word	0x08003ccf
 8003b30:	08003ccf 	.word	0x08003ccf
 8003b34:	08003c4d 	.word	0x08003c4d
 8003b38:	08003ccf 	.word	0x08003ccf
 8003b3c:	08003ccf 	.word	0x08003ccf
 8003b40:	08003ccf 	.word	0x08003ccf
 8003b44:	08003c8d 	.word	0x08003c8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f942 	bl	8003dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
      break;
 8003b86:	e0a5      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f9a8 	bl	8003ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6999      	ldr	r1, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]
      break;
 8003bc8:	e084      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fa07 	bl	8003fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0208 	orr.w	r2, r2, #8
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0204 	bic.w	r2, r2, #4
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	61da      	str	r2, [r3, #28]
      break;
 8003c08:	e064      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fa65 	bl	80040e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69d9      	ldr	r1, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	61da      	str	r2, [r3, #28]
      break;
 8003c4a:	e043      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 faa8 	bl	80041a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0208 	orr.w	r2, r2, #8
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c8a:	e023      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fae6 	bl	8004264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a32      	ldr	r2, [pc, #200]	; (8003dc4 <TIM_Base_SetConfig+0xdc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x28>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x28>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a2f      	ldr	r2, [pc, #188]	; (8003dc8 <TIM_Base_SetConfig+0xe0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <TIM_Base_SetConfig+0xdc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <TIM_Base_SetConfig+0x6a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d00f      	beq.n	8003d52 <TIM_Base_SetConfig+0x6a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <TIM_Base_SetConfig+0xe0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0x6a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <TIM_Base_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0x6a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <TIM_Base_SetConfig+0xe8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0x6a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <TIM_Base_SetConfig+0xec>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <TIM_Base_SetConfig+0xdc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_Base_SetConfig+0xc0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <TIM_Base_SetConfig+0xe4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_Base_SetConfig+0xc0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <TIM_Base_SetConfig+0xe8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0xc0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <TIM_Base_SetConfig+0xec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800

08003dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0201 	bic.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 0302 	bic.w	r3, r3, #2
 8003e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_OC1_SetConfig+0xfc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_OC1_SetConfig+0x78>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <TIM_OC1_SetConfig+0x100>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_OC1_SetConfig+0x78>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_OC1_SetConfig+0x104>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_OC1_SetConfig+0x78>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <TIM_OC1_SetConfig+0x108>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10c      	bne.n	8003e6a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0308 	bic.w	r3, r3, #8
 8003e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <TIM_OC1_SetConfig+0xfc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <TIM_OC1_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <TIM_OC1_SetConfig+0x100>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <TIM_OC1_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a17      	ldr	r2, [pc, #92]	; (8003edc <TIM_OC1_SetConfig+0x104>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <TIM_OC1_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <TIM_OC1_SetConfig+0x108>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d111      	bne.n	8003eae <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	621a      	str	r2, [r3, #32]
}
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800

08003ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0210 	bic.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <TIM_OC2_SetConfig+0xf0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10d      	bne.n	8003f64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <TIM_OC2_SetConfig+0xf0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_OC2_SetConfig+0xa0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <TIM_OC2_SetConfig+0xf4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_OC2_SetConfig+0xa0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <TIM_OC2_SetConfig+0xf8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC2_SetConfig+0xa0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <TIM_OC2_SetConfig+0xfc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d113      	bne.n	8003fac <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40014400 	.word	0x40014400
 8003fe0:	40014800 	.word	0x40014800

08003fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <TIM_OC3_SetConfig+0xec>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10d      	bne.n	8004062 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800404c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004060:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <TIM_OC3_SetConfig+0xec>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_OC3_SetConfig+0x9e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <TIM_OC3_SetConfig+0xf0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_OC3_SetConfig+0x9e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_OC3_SetConfig+0xf4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_OC3_SetConfig+0x9e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <TIM_OC3_SetConfig+0xf8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d113      	bne.n	80040aa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800412e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_OC4_SetConfig+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC4_SetConfig+0x7c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a15      	ldr	r2, [pc, #84]	; (800419c <TIM_OC4_SetConfig+0xbc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC4_SetConfig+0x7c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <TIM_OC4_SetConfig+0xc0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC4_SetConfig+0x7c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <TIM_OC4_SetConfig+0xc4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d109      	bne.n	8004170 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40014000 	.word	0x40014000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800

080041a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a15      	ldr	r2, [pc, #84]	; (8004254 <TIM_OC5_SetConfig+0xac>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_OC5_SetConfig+0x72>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <TIM_OC5_SetConfig+0xb0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_OC5_SetConfig+0x72>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <TIM_OC5_SetConfig+0xb4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC5_SetConfig+0x72>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <TIM_OC5_SetConfig+0xb8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d109      	bne.n	800422e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800

08004264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	051b      	lsls	r3, r3, #20
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a16      	ldr	r2, [pc, #88]	; (8004314 <TIM_OC6_SetConfig+0xb0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00b      	beq.n	80042d8 <TIM_OC6_SetConfig+0x74>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <TIM_OC6_SetConfig+0xb4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_OC6_SetConfig+0x74>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a14      	ldr	r2, [pc, #80]	; (800431c <TIM_OC6_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC6_SetConfig+0x74>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <TIM_OC6_SetConfig+0xbc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d109      	bne.n	80042ec <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40014000 	.word	0x40014000
 800431c:	40014400 	.word	0x40014400
 8004320:	40014800 	.word	0x40014800

08004324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004338:	2302      	movs	r3, #2
 800433a:	e054      	b.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d108      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800436c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d009      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a11      	ldr	r2, [pc, #68]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40014000 	.word	0x40014000

08004400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004418:	2302      	movs	r3, #2
 800441a:	e060      	b.n	80044de <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a14      	ldr	r2, [pc, #80]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d115      	bne.n	80044cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	051b      	lsls	r3, r3, #20
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e040      	b.n	8004584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fd3c 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fbfc 	bl	8004d2c <UART_SetConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e022      	b.n	8004584 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fd26 	bl	8004f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fdad 	bl	80050dc <UART_CheckIdleState>
 8004582:	4603      	mov	r3, r0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d165      	bne.n	800466e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_UART_Transmit_DMA+0x22>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e05e      	b.n	8004670 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2221      	movs	r2, #33	; 0x21
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d027      	beq.n	800462e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <HAL_UART_Transmit_DMA+0xec>)
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a24      	ldr	r2, [pc, #144]	; (800467c <HAL_UART_Transmit_DMA+0xf0>)
 80045ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a23      	ldr	r2, [pc, #140]	; (8004680 <HAL_UART_Transmit_DMA+0xf4>)
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	2200      	movs	r2, #0
 80045fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	4619      	mov	r1, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3328      	adds	r3, #40	; 0x28
 800460e:	461a      	mov	r2, r3
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	f7fd fb11 	bl	8001c38 <HAL_DMA_Start_IT>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2210      	movs	r2, #16
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e020      	b.n	8004670 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2240      	movs	r2, #64	; 0x40
 8004634:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3308      	adds	r3, #8
 800463c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	623a      	str	r2, [r7, #32]
 8004658:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	69f9      	ldr	r1, [r7, #28]
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	61bb      	str	r3, [r7, #24]
   return(result);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e5      	bne.n	8004636 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3728      	adds	r7, #40	; 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08005551 	.word	0x08005551
 800467c:	080055e5 	.word	0x080055e5
 8004680:	08005765 	.word	0x08005765

08004684 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	2b20      	cmp	r3, #32
 800469a:	d132      	bne.n	8004702 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Receive_DMA+0x24>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e02b      	b.n	8004704 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d018      	beq.n	80046f2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	613b      	str	r3, [r7, #16]
   return(result);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	69f9      	ldr	r1, [r7, #28]
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	461a      	mov	r2, r3
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fdff 	bl	80052fc <UART_Start_Receive_DMA>
 80046fe:	4603      	mov	r3, r0
 8004700:	e000      	b.n	8004704 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	; 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b0ba      	sub	sp, #232	; 0xe8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004732:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004736:	f640 030f 	movw	r3, #2063	; 0x80f
 800473a:	4013      	ands	r3, r2
 800473c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d115      	bne.n	8004774 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 82ab 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
      }
      return;
 8004772:	e2a5      	b.n	8004cc0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8117 	beq.w	80049ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800478a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800478e:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_UART_IRQHandler+0x298>)
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 810a 	beq.w	80049ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d011      	beq.n	80047c8 <HAL_UART_IRQHandler+0xbc>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d011      	beq.n	80047f8 <HAL_UART_IRQHandler+0xec>
 80047d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2202      	movs	r2, #2
 80047e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d011      	beq.n	8004828 <HAL_UART_IRQHandler+0x11c>
 8004804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2204      	movs	r2, #4
 8004816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481e:	f043 0202 	orr.w	r2, r3, #2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d017      	beq.n	8004864 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004844:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2208      	movs	r2, #8
 8004852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485a:	f043 0208 	orr.w	r2, r3, #8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <HAL_UART_IRQHandler+0x18a>
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8211 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d005      	beq.n	80048ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04f      	beq.n	800498e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fdca 	bl	8005488 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d141      	bne.n	8004986 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800492e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800493a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1d9      	bne.n	8004902 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	2b00      	cmp	r3, #0
 8004954:	d013      	beq.n	800497e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <HAL_UART_IRQHandler+0x29c>)
 800495c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd fa00 	bl	8001d68 <HAL_DMA_Abort_IT>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004978:	4610      	mov	r0, r2
 800497a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e00f      	b.n	800499e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f9be 	bl	8004d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e00b      	b.n	800499e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9ba 	bl	8004d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e007      	b.n	800499e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9b6 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800499c:	e192      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499e:	bf00      	nop
    return;
 80049a0:	e190      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5b8>
 80049a2:	bf00      	nop
 80049a4:	04000120 	.word	0x04000120
 80049a8:	080057e3 	.word	0x080057e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	f040 814b 	bne.w	8004c4c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8144 	beq.w	8004c4c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 813d 	beq.w	8004c4c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	f040 80b5 	bne.w	8004b54 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8164 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f080 815c 	bcs.w	8004cc8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	f000 8086 	beq.w	8004b32 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1da      	bne.n	8004a26 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3308      	adds	r3, #8
 8004acc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ad0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ad2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e3      	bne.n	8004aac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e4      	bne.n	8004af2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd f8e2 	bl	8001cf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8e1 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b52:	e0b9      	b.n	8004cc8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80ab 	beq.w	8004ccc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80a6 	beq.w	8004ccc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e4      	bne.n	8004b80 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bda:	633a      	str	r2, [r7, #48]	; 0x30
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e3      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0310 	bic.w	r3, r3, #16
 8004c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	617b      	str	r3, [r7, #20]
   return(result);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e4      	bne.n	8004c02 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f865 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c4a:	e03f      	b.n	8004ccc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <HAL_UART_IRQHandler+0x56a>
 8004c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fdf7 	bl	8005862 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c74:	e02d      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00e      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
    }
    return;
 8004c9e:	e017      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fda8 	bl	800580e <UART_EndTransmit_IT>
    return;
 8004cbe:	e008      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cc0:	bf00      	nop
 8004cc2:	e006      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004cc4:	bf00      	nop
 8004cc6:	e004      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cc8:	bf00      	nop
 8004cca:	e002      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004cd0:	bf00      	nop
  }

}
 8004cd2:	37e8      	adds	r7, #232	; 0xe8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b8a      	ldr	r3, [pc, #552]	; (8004f80 <UART_SetConfig+0x254>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6979      	ldr	r1, [r7, #20]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a78      	ldr	r2, [pc, #480]	; (8004f84 <UART_SetConfig+0x258>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d120      	bne.n	8004dea <UART_SetConfig+0xbe>
 8004da8:	4b77      	ldr	r3, [pc, #476]	; (8004f88 <UART_SetConfig+0x25c>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d817      	bhi.n	8004de4 <UART_SetConfig+0xb8>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <UART_SetConfig+0x90>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004dd9 	.word	0x08004dd9
 8004dc4:	08004ddf 	.word	0x08004ddf
 8004dc8:	08004dd3 	.word	0x08004dd3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e01d      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e01a      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e017      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004dde:	2308      	movs	r3, #8
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e014      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004de4:	2310      	movs	r3, #16
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e011      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a67      	ldr	r2, [pc, #412]	; (8004f8c <UART_SetConfig+0x260>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d102      	bne.n	8004dfa <UART_SetConfig+0xce>
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a64      	ldr	r2, [pc, #400]	; (8004f90 <UART_SetConfig+0x264>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d102      	bne.n	8004e0a <UART_SetConfig+0xde>
 8004e04:	2300      	movs	r3, #0
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e001      	b.n	8004e0e <UART_SetConfig+0xe2>
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e16:	d15a      	bne.n	8004ece <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d827      	bhi.n	8004e6e <UART_SetConfig+0x142>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <UART_SetConfig+0xf8>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e49 	.word	0x08004e49
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e6f 	.word	0x08004e6f
 8004e34:	08004e5f 	.word	0x08004e5f
 8004e38:	08004e6f 	.word	0x08004e6f
 8004e3c:	08004e6f 	.word	0x08004e6f
 8004e40:	08004e6f 	.word	0x08004e6f
 8004e44:	08004e67 	.word	0x08004e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7fe fc78 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8004e4c:	61b8      	str	r0, [r7, #24]
        break;
 8004e4e:	e013      	b.n	8004e78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e50:	f7fe fc96 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8004e54:	61b8      	str	r0, [r7, #24]
        break;
 8004e56:	e00f      	b.n	8004e78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e58:	4b4e      	ldr	r3, [pc, #312]	; (8004f94 <UART_SetConfig+0x268>)
 8004e5a:	61bb      	str	r3, [r7, #24]
        break;
 8004e5c:	e00c      	b.n	8004e78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5e:	f7fe fbf7 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8004e62:	61b8      	str	r0, [r7, #24]
        break;
 8004e64:	e008      	b.n	8004e78 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6a:	61bb      	str	r3, [r7, #24]
        break;
 8004e6c:	e004      	b.n	8004e78 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77bb      	strb	r3, [r7, #30]
        break;
 8004e76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d074      	beq.n	8004f68 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	005a      	lsls	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d916      	bls.n	8004ec8 <UART_SetConfig+0x19c>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d212      	bcs.n	8004ec8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f023 030f 	bic.w	r3, r3, #15
 8004eaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	89fb      	ldrh	r3, [r7, #14]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	89fa      	ldrh	r2, [r7, #14]
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	e04f      	b.n	8004f68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	77bb      	strb	r3, [r7, #30]
 8004ecc:	e04c      	b.n	8004f68 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ece:	7ffb      	ldrb	r3, [r7, #31]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d828      	bhi.n	8004f26 <UART_SetConfig+0x1fa>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0x1b0>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f17 	.word	0x08004f17
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fe fc1c 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8004f04:	61b8      	str	r0, [r7, #24]
        break;
 8004f06:	e013      	b.n	8004f30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7fe fc3a 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	61b8      	str	r0, [r7, #24]
        break;
 8004f0e:	e00f      	b.n	8004f30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <UART_SetConfig+0x268>)
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e00c      	b.n	8004f30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe fb9b 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61b8      	str	r0, [r7, #24]
        break;
 8004f1c:	e008      	b.n	8004f30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f22:	61bb      	str	r3, [r7, #24]
        break;
 8004f24:	e004      	b.n	8004f30 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	085a      	lsrs	r2, r3, #1
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	441a      	add	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b0f      	cmp	r3, #15
 8004f4e:	d909      	bls.n	8004f64 <UART_SetConfig+0x238>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f56:	d205      	bcs.n	8004f64 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e001      	b.n	8004f68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	efff69f3 	.word	0xefff69f3
 8004f84:	40013800 	.word	0x40013800
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40004400 	.word	0x40004400
 8004f90:	40004800 	.word	0x40004800
 8004f94:	007a1200 	.word	0x007a1200

08004f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01a      	beq.n	80050ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005096:	d10a      	bne.n	80050ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b098      	sub	sp, #96	; 0x60
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ec:	f7fc f8ce 	bl	800128c <HAL_GetTick>
 80050f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d12e      	bne.n	800515e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f88c 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d021      	beq.n	800515e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512e:	653b      	str	r3, [r7, #80]	; 0x50
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
 800513a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800513e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e062      	b.n	8005224 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d149      	bne.n	8005200 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005174:	2200      	movs	r2, #0
 8005176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f856 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03c      	beq.n	8005200 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	623b      	str	r3, [r7, #32]
   return(result);
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
 80051a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e6      	bne.n	8005186 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d8:	61fa      	str	r2, [r7, #28]
 80051da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	617b      	str	r3, [r7, #20]
   return(result);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e011      	b.n	8005224 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3758      	adds	r7, #88	; 0x58
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523c:	e049      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005244:	d045      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005246:	f7fc f821 	bl	800128c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <UART_WaitOnFlagUntilTimeout+0x30>
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e048      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d031      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d110      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f8ff 	bl	8005488 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2208      	movs	r2, #8
 800528e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e029      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ac:	d111      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f8e5 	bl	8005488 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e00f      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d0a6      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b096      	sub	sp, #88	; 0x58
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2222      	movs	r2, #34	; 0x22
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532c:	2b00      	cmp	r3, #0
 800532e:	d028      	beq.n	8005382 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005334:	4a3e      	ldr	r2, [pc, #248]	; (8005430 <UART_Start_Receive_DMA+0x134>)
 8005336:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	4a3d      	ldr	r2, [pc, #244]	; (8005434 <UART_Start_Receive_DMA+0x138>)
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005344:	4a3c      	ldr	r2, [pc, #240]	; (8005438 <UART_Start_Receive_DMA+0x13c>)
 8005346:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534c:	2200      	movs	r2, #0
 800534e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3324      	adds	r3, #36	; 0x24
 800535a:	4619      	mov	r1, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	461a      	mov	r2, r3
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	f7fc fc68 	bl	8001c38 <HAL_DMA_Start_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2210      	movs	r2, #16
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e051      	b.n	8005426 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539e:	657b      	str	r3, [r7, #84]	; 0x54
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053dc:	637a      	str	r2, [r7, #52]	; 0x34
 80053de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005410:	623a      	str	r2, [r7, #32]
 8005412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	69f9      	ldr	r1, [r7, #28]
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	61bb      	str	r3, [r7, #24]
   return(result);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3758      	adds	r7, #88	; 0x58
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	08005601 	.word	0x08005601
 8005434:	08005727 	.word	0x08005727
 8005438:	08005765 	.word	0x08005765

0800543c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e6      	bne.n	8005444 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800547c:	bf00      	nop
 800547e:	3724      	adds	r7, #36	; 0x24
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b095      	sub	sp, #84	; 0x54
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ae:	643b      	str	r3, [r7, #64]	; 0x40
 80054b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e6      	bne.n	8005490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d118      	bne.n	8005530 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	60bb      	str	r3, [r7, #8]
   return(result);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f023 0310 	bic.w	r3, r3, #16
 8005512:	647b      	str	r3, [r7, #68]	; 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	613b      	str	r3, [r7, #16]
   return(result);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005544:	bf00      	nop
 8005546:	3754      	adds	r7, #84	; 0x54
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b20      	cmp	r3, #32
 8005564:	d037      	beq.n	80055d6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	623b      	str	r3, [r7, #32]
   return(result);
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800558e:	633a      	str	r2, [r7, #48]	; 0x30
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	69b9      	ldr	r1, [r7, #24]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	617b      	str	r3, [r7, #20]
   return(result);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e6      	bne.n	80055a2 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055d4:	e002      	b.n	80055dc <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80055d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80055d8:	f7fb f820 	bl	800061c <HAL_UART_TxCpltCallback>
}
 80055dc:	bf00      	nop
 80055de:	3740      	adds	r7, #64	; 0x40
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fb70 	bl	8004cd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b09c      	sub	sp, #112	; 0x70
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b20      	cmp	r3, #32
 8005614:	d071      	beq.n	80056fa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005618:	2200      	movs	r2, #0
 800561a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800561e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005632:	66bb      	str	r3, [r7, #104]	; 0x68
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800563c:	65bb      	str	r3, [r7, #88]	; 0x58
 800563e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	667b      	str	r3, [r7, #100]	; 0x64
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005670:	647a      	str	r2, [r7, #68]	; 0x44
 8005672:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	623b      	str	r3, [r7, #32]
   return(result);
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569a:	663b      	str	r3, [r7, #96]	; 0x60
 800569c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056a4:	633a      	str	r2, [r7, #48]	; 0x30
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d118      	bne.n	80056fa <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f023 0310 	bic.w	r3, r3, #16
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	69b9      	ldr	r1, [r7, #24]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	617b      	str	r3, [r7, #20]
   return(result);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	2200      	movs	r2, #0
 80056fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800570e:	4619      	mov	r1, r3
 8005710:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005712:	f7ff faff 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005716:	e002      	b.n	800571e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005718:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800571a:	f7fa ff8f 	bl	800063c <HAL_UART_RxCpltCallback>
}
 800571e:	bf00      	nop
 8005720:	3770      	adds	r7, #112	; 0x70
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	2b01      	cmp	r3, #1
 8005740:	d109      	bne.n	8005756 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	b29b      	uxth	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fae0 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005754:	e002      	b.n	800575c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fac8 	bl	8004cec <HAL_UART_RxHalfCpltCallback>
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005776:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d109      	bne.n	80057a2 <UART_DMAError+0x3e>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b21      	cmp	r3, #33	; 0x21
 8005792:	d106      	bne.n	80057a2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800579c:	6978      	ldr	r0, [r7, #20]
 800579e:	f7ff fe4d 	bl	800543c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d109      	bne.n	80057c4 <UART_DMAError+0x60>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b22      	cmp	r3, #34	; 0x22
 80057b4:	d106      	bne.n	80057c4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80057be:	6978      	ldr	r0, [r7, #20]
 80057c0:	f7ff fe62 	bl	8005488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ca:	f043 0210 	orr.w	r2, r3, #16
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057d4:	6978      	ldr	r0, [r7, #20]
 80057d6:	f7ff fa93 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fa7d 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b088      	sub	sp, #32
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	60bb      	str	r3, [r7, #8]
   return(result);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	613b      	str	r3, [r7, #16]
   return(result);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fa fee1 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800585a:	bf00      	nop
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <memset>:
 8005876:	4402      	add	r2, r0
 8005878:	4603      	mov	r3, r0
 800587a:	4293      	cmp	r3, r2
 800587c:	d100      	bne.n	8005880 <memset+0xa>
 800587e:	4770      	bx	lr
 8005880:	f803 1b01 	strb.w	r1, [r3], #1
 8005884:	e7f9      	b.n	800587a <memset+0x4>
	...

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4d0d      	ldr	r5, [pc, #52]	; (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	; (80058c4 <__libc_init_array+0x3c>)
 800588e:	1b64      	subs	r4, r4, r5
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2600      	movs	r6, #0
 8005894:	42a6      	cmp	r6, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4d0b      	ldr	r5, [pc, #44]	; (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	; (80058cc <__libc_init_array+0x44>)
 800589c:	f000 f826 	bl	80058ec <_init>
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2600      	movs	r6, #0
 80058a6:	42a6      	cmp	r6, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b0:	4798      	blx	r3
 80058b2:	3601      	adds	r6, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ba:	4798      	blx	r3
 80058bc:	3601      	adds	r6, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	08005960 	.word	0x08005960
 80058c4:	08005960 	.word	0x08005960
 80058c8:	08005960 	.word	0x08005960
 80058cc:	08005964 	.word	0x08005964

080058d0 <memcpy>:
 80058d0:	440a      	add	r2, r1
 80058d2:	4291      	cmp	r1, r2
 80058d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058d8:	d100      	bne.n	80058dc <memcpy+0xc>
 80058da:	4770      	bx	lr
 80058dc:	b510      	push	{r4, lr}
 80058de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e6:	4291      	cmp	r1, r2
 80058e8:	d1f9      	bne.n	80058de <memcpy+0xe>
 80058ea:	bd10      	pop	{r4, pc}

080058ec <_init>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr

080058f8 <_fini>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr
