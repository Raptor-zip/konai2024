
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005884  08005884  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005884  08005884  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800588c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000000c  08005898  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08005898  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d1a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002774  00000000  00000000  00032d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00035510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6d  00000000  00000000  000364a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c216  00000000  00000000  0003710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001273b  00000000  00000000  00053323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a79b0  00000000  00000000  00065a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041f0  00000000  00000000  0010d410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00111600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005810 	.word	0x08005810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005810 	.word	0x08005810

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	; 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f005 facc 	bl	80057f4 <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	; 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f9a6 	bl	80005fa <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	; 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8cd 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	; 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8ac 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	; 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f888 	bl	80004ea <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	; 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	; 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f864 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_ControlSpeed>:
void CyberGear_CurrentControlPram(CyberGear_Typedef *cyber, float kp, float ki,
		float gain);
void CyberGear_ControlSpeed(CyberGear_Typedef *cyber, float target_speed) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	ed87 0a00 	vstr	s0, [r7]
	cyber->cybermotion.velocity = target_speed;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
	union float_binary b_speed;
	b_speed.data = make_float_writedata(target_speed, V_MIN, V_MAX);
 8000442:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8000446:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 800044a:	ed97 0a00 	vldr	s0, [r7]
 800044e:	f7ff febb 	bl	80001c8 <make_float_writedata>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700A, b_speed.bin);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	461a      	mov	r2, r3
 8000460:	f247 010a 	movw	r1, #28682	; 0x700a
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f840 	bl	80004ea <CyberGear_WriteIndexParam>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af02      	add	r7, sp, #8
 8000478:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	b29a      	uxth	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7959      	ldrb	r1, [r3, #5]
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	460b      	mov	r3, r1
 8000494:	2103      	movs	r1, #3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff fec0 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80004a2:	200a      	movs	r0, #10
 80004a4:	4798      	blx	r3
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af02      	add	r7, sp, #8
 80004b4:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7959      	ldrb	r1, [r3, #5]
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	460b      	mov	r3, r1
 80004d0:	2104      	movs	r1, #4
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff fea2 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80004de:	200a      	movs	r0, #10
 80004e0:	4798      	blx	r3
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b08a      	sub	sp, #40	; 0x28
 80004ee:	af02      	add	r7, sp, #8
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	460b      	mov	r3, r1
 80004f4:	607a      	str	r2, [r7, #4]
 80004f6:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 8000504:	7d3b      	ldrb	r3, [r7, #20]
 8000506:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 8000508:	7d7b      	ldrb	r3, [r7, #21]
 800050a:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	789b      	ldrb	r3, [r3, #2]
 800051c:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	78db      	ldrb	r3, [r3, #3]
 8000522:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	b29a      	uxth	r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	7959      	ldrb	r1, [r3, #5]
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	460b      	mov	r3, r1
 8000536:	2112      	movs	r1, #18
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff fe6f 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000544:	2001      	movs	r0, #1
 8000546:	4798      	blx	r3
}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2200      	movs	r2, #0
 8000568:	639a      	str	r2, [r3, #56]	; 0x38
	ecan->filter.FilterIdLow = 0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	641a      	str	r2, [r3, #64]	; 0x40
	ecan->filter.FilterMaskIdLow = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	645a      	str	r2, [r3, #68]	; 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	649a      	str	r2, [r3, #72]	; 0x48

	if (can_nuumber == 1)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d103      	bne.n	8000590 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	64da      	str	r2, [r3, #76]	; 0x4c
 800058e:	e002      	b.n	8000596 <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	220e      	movs	r2, #14
 8000594:	64da      	str	r2, [r3, #76]	; 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	651a      	str	r2, [r3, #80]	; 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2201      	movs	r2, #1
 80005a0:	655a      	str	r2, [r3, #84]	; 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	659a      	str	r2, [r3, #88]	; 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	220e      	movs	r2, #14
 80005ac:	65da      	str	r2, [r3, #92]	; 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3338      	adds	r3, #56	; 0x38
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f000 ff0a 	bl	80013d2 <HAL_CAN_ConfigFilter>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <Easy_CAN6_Start+0x78>
		Error_Handler();
 80005c4:	f000 fb96 	bl	8000cf4 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f912 	bl	80017f8 <HAL_CAN_ActivateNotification>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 80005da:	f000 fb8b 	bl	8000cf4 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 ffbf 	bl	8001566 <HAL_CAN_Start>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005ee:	f001 fa44 	bl	8001a7a <HAL_NVIC_SystemReset>

}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2204      	movs	r2, #4
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
	ecan->TxHeader.DLC = size;
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 800062c:	e000      	b.n	8000630 <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 800062e:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f8aa 	bl	800178e <HAL_CAN_GetTxMailboxesFreeLevel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f6      	beq.n	800062e <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f103 0120 	add.w	r1, r3, #32
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	f000 ffcd 	bl	80015ee <HAL_CAN_AddTxMessage>

}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[1], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_UART_TxCpltCallback+0x1c>)
 8000666:	2220      	movs	r2, #32
 8000668:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2000009c 	.word	0x2000009c

0800067c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <HAL_UART_RxCpltCallback+0x1c>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000504 	.word	0x20000504

0800069c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a2:	f000 fd11 	bl	80010c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a6:	f000 f965 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006aa:	f000 fad9 	bl	8000c60 <MX_GPIO_Init>
	MX_DMA_Init();
 80006ae:	f000 fab1 	bl	8000c14 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80006b2:	f000 fa7f 	bl	8000bb4 <MX_USART2_UART_Init>
	MX_CAN_Init();
 80006b6:	f000 f9b7 	bl	8000a28 <MX_CAN_Init>
	MX_TIM1_Init();
 80006ba:	f000 f9eb 	bl	8000a94 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 80006be:	2202      	movs	r2, #2
 80006c0:	499b      	ldr	r1, [pc, #620]	; (8000930 <main+0x294>)
 80006c2:	489c      	ldr	r0, [pc, #624]	; (8000934 <main+0x298>)
 80006c4:	f7ff ff44 	bl	8000550 <Easy_CAN6_Start>

	for (int i = 0; i < 4; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e03d      	b.n	800074a <main+0xae>
		if (is_run_CyberGear) {
			CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	22b0      	movs	r2, #176	; 0xb0
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	4a98      	ldr	r2, [pc, #608]	; (8000938 <main+0x29c>)
 80006d8:	1898      	adds	r0, r3, r2
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	3370      	adds	r3, #112	; 0x70
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b96      	ldr	r3, [pc, #600]	; (800093c <main+0x2a0>)
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	4992      	ldr	r1, [pc, #584]	; (8000934 <main+0x298>)
 80006ea:	f7ff fde4 	bl	80002b6 <CyberGear_Init>
			CyberGear_ResetMotor(&my_cyber[i]);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	22b0      	movs	r2, #176	; 0xb0
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	4a90      	ldr	r2, [pc, #576]	; (8000938 <main+0x29c>)
 80006f8:	4413      	add	r3, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fed7 	bl	80004ae <CyberGear_ResetMotor>
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	22b0      	movs	r2, #176	; 0xb0
 8000704:	fb02 f303 	mul.w	r3, r2, r3
 8000708:	4a8b      	ldr	r2, [pc, #556]	; (8000938 <main+0x29c>)
 800070a:	4413      	add	r3, r2
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fe0c 	bl	800032c <CyberGear_SetMode>
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	22b0      	movs	r2, #176	; 0xb0
 8000718:	fb02 f303 	mul.w	r3, r2, r3
 800071c:	4a86      	ldr	r2, [pc, #536]	; (8000938 <main+0x29c>)
 800071e:	4413      	add	r3, r2
 8000720:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 8000724:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8000728:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fde0 	bl	80002f2 <CyberGear_SetConfig>
			CyberGear_EnableMotor(&my_cyber[i]);
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	22b0      	movs	r2, #176	; 0xb0
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a7f      	ldr	r2, [pc, #508]	; (8000938 <main+0x29c>)
 800073c:	4413      	add	r3, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fe97 	bl	8000472 <CyberGear_EnableMotor>
	for (int i = 0; i < 4; i++) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b03      	cmp	r3, #3
 800074e:	ddbe      	ble.n	80006ce <main+0x32>
		}
	}
	HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fd1f 	bl	8001194 <HAL_Delay>

	HAL_UART_Transmit_DMA(&huart2,
 8000756:	2221      	movs	r2, #33	; 0x21
 8000758:	4979      	ldr	r1, [pc, #484]	; (8000940 <main+0x2a4>)
 800075a:	487a      	ldr	r0, [pc, #488]	; (8000944 <main+0x2a8>)
 800075c:	f003 fea8 	bl	80044b0 <HAL_UART_Transmit_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 8000760:	2108      	movs	r1, #8
 8000762:	4879      	ldr	r0, [pc, #484]	; (8000948 <main+0x2ac>)
 8000764:	f001 fd32 	bl	80021cc <HAL_GPIO_TogglePin>

		debug = HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 8000768:	2207      	movs	r2, #7
 800076a:	4978      	ldr	r1, [pc, #480]	; (800094c <main+0x2b0>)
 800076c:	4875      	ldr	r0, [pc, #468]	; (8000944 <main+0x2a8>)
 800076e:	f003 ff1b 	bl	80045a8 <HAL_UART_Receive_DMA>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b76      	ldr	r3, [pc, #472]	; (8000950 <main+0x2b4>)
 8000778:	701a      	strb	r2, [r3, #0]
//		debug = HAL_UART_Receive(&huart2, rcvBuffer, 7, 1000);

			buf[0] = (unsigned char)rcvBuffer[1];
 800077a:	4b74      	ldr	r3, [pc, #464]	; (800094c <main+0x2b0>)
 800077c:	785a      	ldrb	r2, [r3, #1]
 800077e:	4b75      	ldr	r3, [pc, #468]	; (8000954 <main+0x2b8>)
 8000780:	701a      	strb	r2, [r3, #0]
			buf[1] = (unsigned char)rcvBuffer[2];
 8000782:	4b72      	ldr	r3, [pc, #456]	; (800094c <main+0x2b0>)
 8000784:	789a      	ldrb	r2, [r3, #2]
 8000786:	4b73      	ldr	r3, [pc, #460]	; (8000954 <main+0x2b8>)
 8000788:	705a      	strb	r2, [r3, #1]
			buf[2] = (unsigned char)rcvBuffer[3];
 800078a:	4b70      	ldr	r3, [pc, #448]	; (800094c <main+0x2b0>)
 800078c:	78da      	ldrb	r2, [r3, #3]
 800078e:	4b71      	ldr	r3, [pc, #452]	; (8000954 <main+0x2b8>)
 8000790:	709a      	strb	r2, [r3, #2]
			buf[3] = (unsigned char)rcvBuffer[4];
 8000792:	4b6e      	ldr	r3, [pc, #440]	; (800094c <main+0x2b0>)
 8000794:	791a      	ldrb	r2, [r3, #4]
 8000796:	4b6f      	ldr	r3, [pc, #444]	; (8000954 <main+0x2b8>)
 8000798:	70da      	strb	r2, [r3, #3]
			buf[4] = (unsigned char)rcvBuffer[5];
 800079a:	4b6c      	ldr	r3, [pc, #432]	; (800094c <main+0x2b0>)
 800079c:	795a      	ldrb	r2, [r3, #5]
 800079e:	4b6d      	ldr	r3, [pc, #436]	; (8000954 <main+0x2b8>)
 80007a0:	711a      	strb	r2, [r3, #4]
			buf[5] = (unsigned char)rcvBuffer[6];
 80007a2:	4b6a      	ldr	r3, [pc, #424]	; (800094c <main+0x2b0>)
 80007a4:	799a      	ldrb	r2, [r3, #6]
 80007a6:	4b6b      	ldr	r3, [pc, #428]	; (8000954 <main+0x2b8>)
 80007a8:	715a      	strb	r2, [r3, #5]
			buf[6] = (unsigned char)rcvBuffer[0];
 80007aa:	4b68      	ldr	r3, [pc, #416]	; (800094c <main+0x2b0>)
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	4b69      	ldr	r3, [pc, #420]	; (8000954 <main+0x2b8>)
 80007b0:	719a      	strb	r2, [r3, #6]
 80007b2:	4b68      	ldr	r3, [pc, #416]	; (8000954 <main+0x2b8>)
 80007b4:	781a      	ldrb	r2, [r3, #0]
//			memcpy(buf, &rcvBuffer[1], sizeof(buf));
//		}else{
//			memcpy(buf, &rcvBuffer[0], sizeof(buf));
//		}

		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
 80007b6:	4b68      	ldr	r3, [pc, #416]	; (8000958 <main+0x2bc>)
 80007b8:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[2];
 80007ba:	4b66      	ldr	r3, [pc, #408]	; (8000954 <main+0x2b8>)
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	723b      	strb	r3, [r7, #8]
		reversed_bytes[1] = buf[1];
 80007c0:	4b64      	ldr	r3, [pc, #400]	; (8000954 <main+0x2b8>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	727b      	strb	r3, [r7, #9]
 80007c6:	893a      	ldrh	r2, [r7, #8]
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 80007c8:	4b64      	ldr	r3, [pc, #400]	; (800095c <main+0x2c0>)
 80007ca:	801a      	strh	r2, [r3, #0]
 80007cc:	4b61      	ldr	r3, [pc, #388]	; (8000954 <main+0x2b8>)
 80007ce:	f8d3 3003 	ldr.w	r3, [r3, #3]

		uint8_t _temp_command_content[4];
		memcpy(_temp_command_content, &buf[3], sizeof(float));
 80007d2:	607b      	str	r3, [r7, #4]
		// バイト列を逆順にコピー
		for (int j = 0; j < 4; j++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	e00f      	b.n	80007fa <main+0x15e>
			reversed_bytes[j] = _temp_command_content[3 - j];
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	f1c3 0303 	rsb	r3, r3, #3
 80007e0:	3318      	adds	r3, #24
 80007e2:	443b      	add	r3, r7
 80007e4:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80007e8:	f107 0208 	add.w	r2, r7, #8
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	3301      	adds	r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	ddec      	ble.n	80007da <main+0x13e>
 8000800:	68bb      	ldr	r3, [r7, #8]
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 8000802:	4a57      	ldr	r2, [pc, #348]	; (8000960 <main+0x2c4>)
 8000804:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

		switch (command_id) {
 8000806:	4b55      	ldr	r3, [pc, #340]	; (800095c <main+0x2c0>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	3b16      	subs	r3, #22
 800080c:	2b06      	cmp	r3, #6
 800080e:	f200 808a 	bhi.w	8000926 <main+0x28a>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <main+0x17c>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000835 	.word	0x08000835
 800081c:	08000927 	.word	0x08000927
 8000820:	0800084f 	.word	0x0800084f
 8000824:	08000927 	.word	0x08000927
 8000828:	08000869 	.word	0x08000869
 800082c:	08000883 	.word	0x08000883
 8000830:	0800090d 	.word	0x0800090d
		case 22:
			motor_speed[0] = command_content;
 8000834:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <main+0x2c4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a4a      	ldr	r2, [pc, #296]	; (8000964 <main+0x2c8>)
 800083a:	6013      	str	r3, [r2, #0]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[0], (float) motor_speed[0]);
 800083c:	4b49      	ldr	r3, [pc, #292]	; (8000964 <main+0x2c8>)
 800083e:	edd3 7a00 	vldr	s15, [r3]
 8000842:	eeb0 0a67 	vmov.f32	s0, s15
 8000846:	483c      	ldr	r0, [pc, #240]	; (8000938 <main+0x29c>)
 8000848:	f7ff fdf2 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 800084c:	e06b      	b.n	8000926 <main+0x28a>

		case 24:
			motor_speed[1] = command_content;
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <main+0x2c4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a44      	ldr	r2, [pc, #272]	; (8000964 <main+0x2c8>)
 8000854:	6053      	str	r3, [r2, #4]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[1], (float) motor_speed[1]);
 8000856:	4b43      	ldr	r3, [pc, #268]	; (8000964 <main+0x2c8>)
 8000858:	edd3 7a01 	vldr	s15, [r3, #4]
 800085c:	eeb0 0a67 	vmov.f32	s0, s15
 8000860:	4841      	ldr	r0, [pc, #260]	; (8000968 <main+0x2cc>)
 8000862:	f7ff fde5 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000866:	e05e      	b.n	8000926 <main+0x28a>

		case 26:
			motor_speed[2] = command_content;
 8000868:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <main+0x2c4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a3d      	ldr	r2, [pc, #244]	; (8000964 <main+0x2c8>)
 800086e:	6093      	str	r3, [r2, #8]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[2], (float) motor_speed[2]);
 8000870:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <main+0x2c8>)
 8000872:	edd3 7a02 	vldr	s15, [r3, #8]
 8000876:	eeb0 0a67 	vmov.f32	s0, s15
 800087a:	483c      	ldr	r0, [pc, #240]	; (800096c <main+0x2d0>)
 800087c:	f7ff fdd8 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000880:	e051      	b.n	8000926 <main+0x28a>

		case 27:
			for (int i = 0; i < 4; i++) {
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e03d      	b.n	8000904 <main+0x268>
				if (is_run_CyberGear) {
					CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	22b0      	movs	r2, #176	; 0xb0
 800088c:	fb02 f303 	mul.w	r3, r2, r3
 8000890:	4a29      	ldr	r2, [pc, #164]	; (8000938 <main+0x29c>)
 8000892:	1898      	adds	r0, r3, r2
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3370      	adds	r3, #112	; 0x70
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <main+0x2a0>)
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	4924      	ldr	r1, [pc, #144]	; (8000934 <main+0x298>)
 80008a4:	f7ff fd07 	bl	80002b6 <CyberGear_Init>
					CyberGear_ResetMotor(&my_cyber[i]);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	22b0      	movs	r2, #176	; 0xb0
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <main+0x29c>)
 80008b2:	4413      	add	r3, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fdfa 	bl	80004ae <CyberGear_ResetMotor>
					CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	22b0      	movs	r2, #176	; 0xb0
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <main+0x29c>)
 80008c4:	4413      	add	r3, r2
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd2f 	bl	800032c <CyberGear_SetMode>
					CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	22b0      	movs	r2, #176	; 0xb0
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <main+0x29c>)
 80008d8:	4413      	add	r3, r2
 80008da:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 80008de:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80008e2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fd03 	bl	80002f2 <CyberGear_SetConfig>
					CyberGear_EnableMotor(&my_cyber[i]);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	22b0      	movs	r2, #176	; 0xb0
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <main+0x29c>)
 80008f6:	4413      	add	r3, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fdba 	bl	8000472 <CyberGear_EnableMotor>
			for (int i = 0; i < 4; i++) {
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b03      	cmp	r3, #3
 8000908:	ddbe      	ble.n	8000888 <main+0x1ec>
				}
			}
			break;
 800090a:	e00c      	b.n	8000926 <main+0x28a>

		case 28:
			motor_speed[3] = command_content;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <main+0x2c4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <main+0x2c8>)
 8000912:	60d3      	str	r3, [r2, #12]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[3], (float) motor_speed[3]);
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <main+0x2c8>)
 8000916:	edd3 7a03 	vldr	s15, [r3, #12]
 800091a:	eeb0 0a67 	vmov.f32	s0, s15
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <main+0x2d4>)
 8000920:	f7ff fd86 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000924:	bf00      	nop
		}

		HAL_Delay(9);
 8000926:	2009      	movs	r0, #9
 8000928:	f000 fc34 	bl	8001194 <HAL_Delay>
	while (1) {
 800092c:	e718      	b.n	8000760 <main+0xc4>
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028
 8000934:	20000470 	.word	0x20000470
 8000938:	200001b0 	.word	0x200001b0
 800093c:	08001195 	.word	0x08001195
 8000940:	08005828 	.word	0x08005828
 8000944:	2000009c 	.word	0x2000009c
 8000948:	48000400 	.word	0x48000400
 800094c:	20000508 	.word	0x20000508
 8000950:	200001ac 	.word	0x200001ac
 8000954:	200004e8 	.word	0x200004e8
 8000958:	200004fc 	.word	0x200004fc
 800095c:	200004fe 	.word	0x200004fe
 8000960:	20000500 	.word	0x20000500
 8000964:	200004d8 	.word	0x200004d8
 8000968:	20000260 	.word	0x20000260
 800096c:	20000310 	.word	0x20000310
 8000970:	200003c0 	.word	0x200003c0

08000974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b096      	sub	sp, #88	; 0x58
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800097a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800097e:	2228      	movs	r2, #40	; 0x28
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f004 ff09 	bl	800579a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80009bc:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fc1a 	bl	8002200 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x62>
		Error_Handler();
 80009d2:	f000 f98f 	bl	8000cf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fc42 	bl	800327c <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x8e>
		Error_Handler();
 80009fe:	f000 f979 	bl	8000cf4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fe6a 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xaa>
		Error_Handler();
 8000a1a:	f000 f96b 	bl	8000cf4 <Error_Handler>
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3758      	adds	r7, #88	; 0x58
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <MX_CAN_Init+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a46:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000a4a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a52:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_CAN_Init+0x64>)
 8000a7a:	f000 fbaf 	bl	80011dc <HAL_CAN_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_CAN_Init+0x60>
		Error_Handler();
 8000a84:	f000 f936 	bl	8000cf4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000028 	.word	0x20000028
 8000a90:	40006400 	.word	0x40006400

08000a94 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	; 0x58
 8000a98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000aa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	222c      	movs	r2, #44	; 0x2c
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fe6a 	bl	800579a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <MX_TIM1_Init+0x118>)
 8000ac8:	4a39      	ldr	r2, [pc, #228]	; (8000bb0 <MX_TIM1_Init+0x11c>)
 8000aca:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <MX_TIM1_Init+0x118>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <MX_TIM1_Init+0x118>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MX_TIM1_Init+0x118>)
 8000ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <MX_TIM1_Init+0x118>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	; (8000bac <MX_TIM1_Init+0x118>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <MX_TIM1_Init+0x118>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000af2:	482e      	ldr	r0, [pc, #184]	; (8000bac <MX_TIM1_Init+0x118>)
 8000af4:	f002 ff1e 	bl	8003934 <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000afe:	f000 f8f9 	bl	8000cf4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b12:	4619      	mov	r1, r3
 8000b14:	4825      	ldr	r0, [pc, #148]	; (8000bac <MX_TIM1_Init+0x118>)
 8000b16:	f003 fb97 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b20:	f000 f8e8 	bl	8000cf4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b24:	2360      	movs	r3, #96	; 0x60
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000b40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_TIM1_Init+0x118>)
 8000b4a:	f002 ff4b 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000b54:	f000 f8ce 	bl	8000cf4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b70:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM1_Init+0x118>)
 8000b8e:	f003 fbc9 	bl	8004324 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000b98:	f000 f8ac 	bl	8000cf4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM1_Init+0x118>)
 8000b9e:	f000 f937 	bl	8000e10 <HAL_TIM_MspPostInit>
}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000050 	.word	0x20000050
 8000bb0:	40012c00 	.word	0x40012c00

08000bb4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bbc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <MX_USART2_UART_Init+0x5c>)
 8000bc2:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bd8:	220c      	movs	r2, #12
 8000bda:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bf6:	f003 fc0d 	bl	8004414 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART2_UART_Init+0x50>
		Error_Handler();
 8000c00:	f000 f878 	bl	8000cf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000009c 	.word	0x2000009c
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	0007a120 	.word	0x0007a120

08000c14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_DMA_Init+0x48>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MX_DMA_Init+0x48>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_DMA_Init+0x48>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2010      	movs	r0, #16
 8000c38:	f000 fef5 	bl	8001a26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c3c:	2010      	movs	r0, #16
 8000c3e:	f000 ff0e 	bl	8001a5e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2011      	movs	r0, #17
 8000c48:	f000 feed 	bl	8001a26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c4c:	2011      	movs	r0, #17
 8000c4e:	f000 ff06 	bl	8001a5e <HAL_NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <MX_GPIO_Init+0x90>)
 8000cc4:	f001 fa6a 	bl	800219c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_GPIO_Init+0x90>)
 8000ce0:	f001 f8ea 	bl	8001eb8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_CAN_MspInit+0x80>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d129      	bne.n	8000dbe <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_CAN_MspInit+0x84>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_CAN_MspInit+0x84>)
 8000d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_CAN_MspInit+0x84>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_CAN_MspInit+0x84>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <HAL_CAN_MspInit+0x84>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_CAN_MspInit+0x84>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000dac:	2309      	movs	r3, #9
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f001 f87d 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40006400 	.word	0x40006400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_TIM_PWM_MspInit+0x38>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_TIM_MspPostInit+0x68>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d11d      	bne.n	8000e6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f001 f825 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40012c00 	.word	0x40012c00
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <HAL_UART_MspInit+0x128>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d17d      	bne.n	8000f9e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea2:	4b42      	ldr	r3, [pc, #264]	; (8000fac <HAL_UART_MspInit+0x12c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a41      	ldr	r2, [pc, #260]	; (8000fac <HAL_UART_MspInit+0x12c>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <HAL_UART_MspInit+0x12c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <HAL_UART_MspInit+0x12c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a3b      	ldr	r2, [pc, #236]	; (8000fac <HAL_UART_MspInit+0x12c>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <HAL_UART_MspInit+0x12c>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ed2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f000 ffe1 	bl	8001eb8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000ef8:	4a2e      	ldr	r2, [pc, #184]	; (8000fb4 <HAL_UART_MspInit+0x134>)
 8000efa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f02:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f28:	f000 fdb7 	bl	8001a9a <HAL_DMA_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000f32:	f7ff fedf 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f3a:	671a      	str	r2, [r3, #112]	; 0x70
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <HAL_UART_MspInit+0x130>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_UART_MspInit+0x13c>)
 8000f46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f74:	f000 fd91 	bl	8001a9a <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000f7e:	f7ff feb9 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f86:	675a      	str	r2, [r3, #116]	; 0x74
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_UART_MspInit+0x138>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2026      	movs	r0, #38	; 0x26
 8000f94:	f000 fd47 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f98:	2026      	movs	r0, #38	; 0x26
 8000f9a:	f000 fd60 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	20000124 	.word	0x20000124
 8000fb4:	40020080 	.word	0x40020080
 8000fb8:	20000168 	.word	0x20000168
 8000fbc:	4002006c 	.word	0x4002006c

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f8a2 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DMA1_Channel6_IRQHandler+0x10>)
 800101a:	f000 fe5b 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000168 	.word	0x20000168

08001028 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DMA1_Channel7_IRQHandler+0x10>)
 800102e:	f000 fe51 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000124 	.word	0x20000124

0800103c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <USART2_IRQHandler+0x10>)
 8001042:	f003 faf5 	bl	8004630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000009c 	.word	0x2000009c

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	; (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f004 fb83 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff faf9 	bl	800069c <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b8:	0800588c 	.word	0x0800588c
  ldr r2, =_sbss
 80010bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c0:	2000052c 	.word	0x2000052c

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 fc99 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fe0c 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fcb5 	bl	8001a82 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f000 fc79 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	20000528 	.word	0x20000528

0800117c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000528 	.word	0x20000528

08001194 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff ffee 	bl	800117c <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011ba:	bf00      	nop
 80011bc:	f7ff ffde 	bl	800117c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0ed      	b.n	80013ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fda4 	bl	8000d48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff ffb4 	bl	800117c <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001216:	e012      	b.n	800123e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001218:	f7ff ffb0 	bl	800117c <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b0a      	cmp	r3, #10
 8001224:	d90b      	bls.n	800123e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2205      	movs	r2, #5
 8001236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0c5      	b.n	80013ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0e5      	beq.n	8001218 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0202 	bic.w	r2, r2, #2
 800125a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff ff8e 	bl	800117c <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff ff8a 	bl	800117c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e09f      	b.n	80013ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e5      	bne.n	8001264 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e1b      	ldrb	r3, [r3, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7e5b      	ldrb	r3, [r3, #25]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e9b      	ldrb	r3, [r3, #26]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e007      	b.n	8001316 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0220 	bic.w	r2, r2, #32
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7edb      	ldrb	r3, [r3, #27]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0210 	bic.w	r2, r2, #16
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e007      	b.n	8001340 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0210 	orr.w	r2, r2, #16
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7f1b      	ldrb	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d108      	bne.n	800135a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0208 	orr.w	r2, r2, #8
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0208 	bic.w	r2, r2, #8
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7f5b      	ldrb	r3, [r3, #29]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0204 	orr.w	r2, r2, #4
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	ea42 0103 	orr.w	r1, r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b087      	sub	sp, #28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013ea:	7cfb      	ldrb	r3, [r7, #19]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d003      	beq.n	80013f8 <HAL_CAN_ConfigFilter+0x26>
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	f040 80aa 	bne.w	800154c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	2201      	movs	r2, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d123      	bne.n	800147a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	401a      	ands	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001454:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3248      	adds	r2, #72	; 0x48
 800145a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800146e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001470:	6979      	ldr	r1, [r7, #20]
 8001472:	3348      	adds	r3, #72	; 0x48
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d122      	bne.n	80014c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	431a      	orrs	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3248      	adds	r2, #72	; 0x48
 80014a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	3348      	adds	r3, #72	; 0x48
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014e2:	e007      	b.n	80014f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800150e:	e007      	b.n	8001520 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d107      	bne.n	8001538 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800153e:	f023 0201 	bic.w	r2, r3, #1
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	e006      	b.n	800155a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d12e      	bne.n	80015d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001592:	f7ff fdf3 	bl	800117c <HAL_GetTick>
 8001596:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001598:	e012      	b.n	80015c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800159a:	f7ff fdef 	bl	800117c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	d90b      	bls.n	80015c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2205      	movs	r2, #5
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e012      	b.n	80015e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e5      	bne.n	800159a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e006      	b.n	80015e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001602:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d003      	beq.n	800161a <HAL_CAN_AddTxMessage+0x2c>
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	2b02      	cmp	r3, #2
 8001616:	f040 80ad 	bne.w	8001774 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10a      	bne.n	800163a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800162a:	2b00      	cmp	r3, #0
 800162c:	d105      	bne.n	800163a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8095 	beq.w	8001764 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	0e1b      	lsrs	r3, r3, #24
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001644:	2201      	movs	r2, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	409a      	lsls	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	6809      	ldr	r1, [r1, #0]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3318      	adds	r3, #24
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	440b      	add	r3, r1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e00f      	b.n	8001692 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800167c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001686:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3318      	adds	r3, #24
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	440b      	add	r3, r1
 8001690:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3318      	adds	r3, #24
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	440b      	add	r3, r1
 80016a2:	3304      	adds	r3, #4
 80016a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	7d1b      	ldrb	r3, [r3, #20]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d111      	bne.n	80016d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3318      	adds	r3, #24
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	6811      	ldr	r1, [r2, #0]
 80016c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3318      	adds	r3, #24
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	440b      	add	r3, r1
 80016ce:	3304      	adds	r3, #4
 80016d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3307      	adds	r3, #7
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3306      	adds	r3, #6
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3305      	adds	r3, #5
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	4313      	orrs	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	3204      	adds	r2, #4
 80016f2:	7812      	ldrb	r2, [r2, #0]
 80016f4:	4610      	mov	r0, r2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	ea43 0200 	orr.w	r2, r3, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	440b      	add	r3, r1
 8001704:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001708:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3303      	adds	r3, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3302      	adds	r3, #2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	4313      	orrs	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	4610      	mov	r0, r2
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	6811      	ldr	r1, [r2, #0]
 8001730:	ea43 0200 	orr.w	r2, r3, r0
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	440b      	add	r3, r1
 800173a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800173e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3318      	adds	r3, #24
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	6811      	ldr	r1, [r2, #0]
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3318      	adds	r3, #24
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	440b      	add	r3, r1
 800175e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e00e      	b.n	8001782 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e006      	b.n	8001782 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
  }
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d002      	beq.n	80017ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d11d      	bne.n	80017ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d002      	beq.n	8001816 <HAL_CAN_ActivateNotification+0x1e>
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d109      	bne.n	800182a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6959      	ldr	r1, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e006      	b.n	8001838 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
  }
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <__NVIC_SystemReset+0x24>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019b2:	4904      	ldr	r1, [pc, #16]	; (80019c4 <__NVIC_SystemReset+0x24>)
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_SystemReset+0x28>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ba:	f3bf 8f4f 	dsb	sy
}
 80019be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <__NVIC_SystemReset+0x20>
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	05fa0004 	.word	0x05fa0004

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f7ff ff78 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff13 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff28 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff78 	bl	8001938 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff47 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff1b 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001a7e:	f7ff ff8f 	bl	80019a0 <__NVIC_SystemReset>

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff9e 	bl	80019cc <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e037      	b.n	8001b20 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ac6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001aca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f9b8 	bl	8001e78 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}  
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Start_IT+0x20>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e04a      	b.n	8001bde <HAL_DMA_Start_IT+0xb6>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d13a      	bne.n	8001bd0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f94b 	bl	8001e1a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 020e 	orr.w	r2, r2, #14
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e00f      	b.n	8001bbe <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 020a 	orr.w	r2, r2, #10
 8001bac:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0204 	bic.w	r2, r2, #4
 8001bbc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e005      	b.n	8001bdc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e020      	b.n	8001c4c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 020e 	bic.w	r2, r2, #14
 8001c18:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d005      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e027      	b.n	8001cca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 020e 	bic.w	r2, r2, #14
 8001c88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
    } 
  }
  return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d024      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x72>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01f      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0204 	bic.w	r2, r2, #4
 8001d22:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d06a      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d44:	e065      	b.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d02c      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xdc>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d027      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020a 	bic.w	r2, r2, #10
 8001d7c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2102      	movs	r1, #2
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d035      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001dae:	e030      	b.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2208      	movs	r2, #8
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d028      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d023      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 020e 	bic.w	r2, r2, #14
 8001dd8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
    }
  }
}  
 8001e10:	e7ff      	b.n	8001e12 <HAL_DMA_IRQHandler+0x13e>
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d108      	bne.n	8001e5a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e58:	e007      	b.n	8001e6a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	60da      	str	r2, [r3, #12]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <DMA_CalcBaseAndBitshift+0x34>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <DMA_CalcBaseAndBitshift+0x38>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	009a      	lsls	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	bffdfff8 	.word	0xbffdfff8
 8001eb0:	cccccccd 	.word	0xcccccccd
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e14e      	b.n	8002166 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8140 	beq.w	8002160 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d005      	beq.n	8001ef8 <HAL_GPIO_Init+0x40>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d130      	bne.n	8001f5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0201 	and.w	r2, r3, #1
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d017      	beq.n	8001f96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d123      	bne.n	8001fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	6939      	ldr	r1, [r7, #16]
 8001fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0203 	and.w	r2, r3, #3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 809a 	beq.w	8002160 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_GPIO_Init+0x2cc>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x2cc>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_GPIO_Init+0x2cc>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002044:	4a50      	ldr	r2, [pc, #320]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206e:	d013      	beq.n	8002098 <HAL_GPIO_Init+0x1e0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_GPIO_Init+0x2d4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_Init+0x1dc>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a45      	ldr	r2, [pc, #276]	; (8002190 <HAL_GPIO_Init+0x2d8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x1d8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a44      	ldr	r2, [pc, #272]	; (8002194 <HAL_GPIO_Init+0x2dc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_Init+0x1d4>
 8002088:	2303      	movs	r3, #3
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x1e2>
 800208c:	2305      	movs	r3, #5
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x1e2>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x1e2>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x1e2>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020aa:	4937      	ldr	r1, [pc, #220]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020dc:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002106:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <HAL_GPIO_Init+0x2e0>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f aea9 	bne.w	8001ec8 <HAL_GPIO_Init+0x10>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43d9      	mvns	r1, r3
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	400b      	ands	r3, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002206:	af00      	add	r7, sp, #0
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002210:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f001 b823 	b.w	800326c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 817d 	beq.w	8002536 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800223c:	4bbc      	ldr	r3, [pc, #752]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b04      	cmp	r3, #4
 8002246:	d00c      	beq.n	8002262 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002248:	4bb9      	ldr	r3, [pc, #740]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d15c      	bne.n	800230e <HAL_RCC_OscConfig+0x10e>
 8002254:	4bb6      	ldr	r3, [pc, #728]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002260:	d155      	bne.n	800230e <HAL_RCC_OscConfig+0x10e>
 8002262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002266:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002276:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x94>
 800228e:	4ba8      	ldr	r3, [pc, #672]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e015      	b.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 8002294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002298:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022bc:	4b9c      	ldr	r3, [pc, #624]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022d8:	fab2 f282 	clz	r2, r2
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f042 0220 	orr.w	r2, r2, #32
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f002 021f 	and.w	r2, r2, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 811f 	beq.w	8002534 <HAL_RCC_OscConfig+0x334>
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 8116 	bne.w	8002534 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f000 bfaf 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x12e>
 8002320:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a82      	ldr	r2, [pc, #520]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e036      	b.n	800239c <HAL_RCC_OscConfig+0x19c>
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x158>
 800233e:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7b      	ldr	r2, [pc, #492]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b79      	ldr	r3, [pc, #484]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a78      	ldr	r2, [pc, #480]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e021      	b.n	800239c <HAL_RCC_OscConfig+0x19c>
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x184>
 800236a:	4b71      	ldr	r3, [pc, #452]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a70      	ldr	r2, [pc, #448]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6d      	ldr	r2, [pc, #436]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x19c>
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a69      	ldr	r2, [pc, #420]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b67      	ldr	r3, [pc, #412]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a66      	ldr	r2, [pc, #408]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f023 020f 	bic.w	r2, r3, #15
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	495f      	ldr	r1, [pc, #380]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d059      	beq.n	800247a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fed9 	bl	800117c <HAL_GetTick>
 80023ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fed4 	bl	800117c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d902      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	f000 bf43 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
 80023e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x218>
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	e015      	b.n	8002444 <HAL_RCC_OscConfig+0x244>
 8002418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800241c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800242c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002430:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002434:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002448:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800244c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002458:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f002 021f 	and.w	r2, r2, #31
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f202 	lsl.w	r2, r1, r2
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ab      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1d0>
 8002478:	e05d      	b.n	8002536 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe fe7f 	bl	800117c <HAL_GetTick>
 800247e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fe7a 	bl	800117c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d902      	bls.n	800249a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	f000 bee9 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
 800249a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_OscConfig+0x2cc>
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e015      	b.n	80024f8 <HAL_RCC_OscConfig+0x2f8>
 80024cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_RCC_OscConfig+0x330>)
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002500:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800250c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ab      	bne.n	8002484 <HAL_RCC_OscConfig+0x284>
 800252c:	e003      	b.n	8002536 <HAL_RCC_OscConfig+0x336>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 817d 	beq.w	8002846 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800254c:	4ba6      	ldr	r3, [pc, #664]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002558:	4ba3      	ldr	r3, [pc, #652]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d172      	bne.n	800264a <HAL_RCC_OscConfig+0x44a>
 8002564:	4ba0      	ldr	r3, [pc, #640]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d16c      	bne.n	800264a <HAL_RCC_OscConfig+0x44a>
 8002570:	2302      	movs	r3, #2
 8002572:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002582:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0x3a0>
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e013      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c8>
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2202      	movs	r2, #2
 80025ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025d2:	fa92 f2a2 	rbit	r2, r2
 80025d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCC_OscConfig+0x410>
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d002      	beq.n	8002610 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f000 be2e 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	21f8      	movs	r1, #248	; 0xf8
 8002626:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800262e:	fa91 f1a1 	rbit	r1, r1
 8002632:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002636:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800263a:	fab1 f181 	clz	r1, r1
 800263e:	b2c9      	uxtb	r1, r1
 8002640:	408b      	lsls	r3, r1
 8002642:	4969      	ldr	r1, [pc, #420]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002648:	e0fd      	b.n	8002846 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8088 	beq.w	800276c <HAL_RCC_OscConfig+0x56c>
 800265c:	2301      	movs	r3, #1
 800265e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800266e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800267c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	461a      	mov	r2, r3
 8002684:	2301      	movs	r3, #1
 8002686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fd78 	bl	800117c <HAL_GetTick>
 800268c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002692:	f7fe fd73 	bl	800117c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f000 bde2 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e013      	b.n	8002700 <HAL_RCC_OscConfig+0x500>
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026ea:	2302      	movs	r3, #2
 80026ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2202      	movs	r2, #2
 8002702:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002706:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800270a:	fa92 f2a2 	rbit	r2, r2
 800270e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002712:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002716:	fab2 f282 	clz	r2, r2
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f042 0220 	orr.w	r2, r2, #32
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f002 021f 	and.w	r2, r2, #31
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0af      	beq.n	8002692 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	21f8      	movs	r1, #248	; 0xf8
 8002748:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002750:	fa91 f1a1 	rbit	r1, r1
 8002754:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002758:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800275c:	fab1 f181 	clz	r1, r1
 8002760:	b2c9      	uxtb	r1, r1
 8002762:	408b      	lsls	r3, r1
 8002764:	4920      	ldr	r1, [pc, #128]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
 800276a:	e06c      	b.n	8002846 <HAL_RCC_OscConfig+0x646>
 800276c:	2301      	movs	r3, #1
 800276e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800277e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fcf0 	bl	800117c <HAL_GetTick>
 800279c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fceb 	bl	800117c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f000 bd5a 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d104      	bne.n	80027ec <HAL_RCC_OscConfig+0x5ec>
 80027e2:	4b01      	ldr	r3, [pc, #4]	; (80027e8 <HAL_RCC_OscConfig+0x5e8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0x614>
 80027e8:	40021000 	.word	0x40021000
 80027ec:	2302      	movs	r3, #2
 80027ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027fe:	2302      	movs	r3, #2
 8002800:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002804:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002810:	4bc8      	ldr	r3, [pc, #800]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2202      	movs	r2, #2
 8002816:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800281a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800281e:	fa92 f2a2 	rbit	r2, r2
 8002822:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002826:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800282a:	fab2 f282 	clz	r2, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f002 021f 	and.w	r2, r2, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ad      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8110 	beq.w	8002a7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <HAL_RCC_OscConfig+0x760>
 800286c:	2301      	movs	r3, #1
 800286e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800287e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4bab      	ldr	r3, [pc, #684]	; (8002b38 <HAL_RCC_OscConfig+0x938>)
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	2301      	movs	r3, #1
 8002894:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7fe fc71 	bl	800117c <HAL_GetTick>
 800289a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe fc6c 	bl	800117c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d902      	bls.n	80028b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f000 bcdb 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028d0:	2202      	movs	r2, #2
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800290e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002910:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800291c:	2102      	movs	r1, #2
 800291e:	6019      	str	r1, [r3, #0]
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f1a3 	rbit	r1, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002936:	6019      	str	r1, [r3, #0]
  return result;
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0a0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x6a0>
 800295e:	e08d      	b.n	8002a7c <HAL_RCC_OscConfig+0x87c>
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002982:	601a      	str	r2, [r3, #0]
  return result;
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800298c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x938>)
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	461a      	mov	r2, r3
 800299e:	2300      	movs	r3, #0
 80029a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe fbeb 	bl	800117c <HAL_GetTick>
 80029a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe fbe6 	bl	800117c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d902      	bls.n	80029c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	f000 bc55 	b.w	800326c <HAL_RCC_OscConfig+0x106c>
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029ca:	2202      	movs	r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f2a3 	rbit	r2, r3
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ee:	2202      	movs	r2, #2
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a12:	2202      	movs	r2, #2
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	fa93 f2a3 	rbit	r2, r3
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	6019      	str	r1, [r3, #0]
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f1a3 	rbit	r1, r3
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a54:	6019      	str	r1, [r3, #0]
  return result;
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d197      	bne.n	80029ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 81a1 	beq.w	8002dd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a98:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	61d3      	str	r3, [r2, #28]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002aca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCC_OscConfig+0x93c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11a      	bne.n	8002b14 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x93c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <HAL_RCC_OscConfig+0x93c>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fb47 	bl	800117c <HAL_GetTick>
 8002aee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	e009      	b.n	8002b08 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af4:	f7fe fb42 	bl	800117c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e3b1      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_RCC_OscConfig+0x93c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ef      	beq.n	8002af4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10d      	bne.n	8002b40 <HAL_RCC_OscConfig+0x940>
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a02      	ldr	r2, [pc, #8]	; (8002b34 <HAL_RCC_OscConfig+0x934>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e03c      	b.n	8002bac <HAL_RCC_OscConfig+0x9ac>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	10908120 	.word	0x10908120
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x96a>
 8002b50:	4bc1      	ldr	r3, [pc, #772]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4ac0      	ldr	r2, [pc, #768]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	4bbe      	ldr	r3, [pc, #760]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4abd      	ldr	r2, [pc, #756]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	e020      	b.n	8002bac <HAL_RCC_OscConfig+0x9ac>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x994>
 8002b7a:	4bb7      	ldr	r3, [pc, #732]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4ab6      	ldr	r2, [pc, #728]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	4bb4      	ldr	r3, [pc, #720]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4ab3      	ldr	r2, [pc, #716]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0x9ac>
 8002b94:	4bb0      	ldr	r3, [pc, #704]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4aaf      	ldr	r2, [pc, #700]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	4bad      	ldr	r3, [pc, #692]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4aac      	ldr	r2, [pc, #688]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8081 	beq.w	8002cc0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fadd 	bl	800117c <HAL_GetTick>
 8002bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fad8 	bl	800117c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e345      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002be8:	2202      	movs	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fa93 f2a3 	rbit	r2, r3
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c26:	601a      	str	r2, [r3, #0]
  return result;
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_OscConfig+0xa4c>
 8002c46:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	e013      	b.n	8002c74 <HAL_RCC_OscConfig+0xa74>
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c54:	2202      	movs	r2, #2
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	6011      	str	r1, [r2, #0]
 8002c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	fa92 f1a2 	rbit	r1, r2
 8002c8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c96:	6011      	str	r1, [r2, #0]
  return result;
 8002c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d084      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x9c8>
 8002cbe:	e07f      	b.n	8002dc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fa5c 	bl	800117c <HAL_GetTick>
 8002cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe fa57 	bl	800117c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e2c4      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d28:	601a      	str	r2, [r3, #0]
  return result;
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0xb4e>
 8002d48:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	e013      	b.n	8002d76 <HAL_RCC_OscConfig+0xb76>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d7e:	2102      	movs	r1, #2
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	fa92 f1a2 	rbit	r1, r2
 8002d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d98:	6011      	str	r1, [r2, #0]
  return result;
 8002d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f002 021f 	and.w	r2, r2, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d184      	bne.n	8002cca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8242 	beq.w	800326a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <HAL_RCC_OscConfig+0xc58>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	f000 8213 	beq.w	800321a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	f040 8162 	bne.w	80030ca <HAL_RCC_OscConfig+0xeca>
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	461a      	mov	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f996 	bl	800117c <HAL_GetTick>
 8002e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e54:	e00c      	b.n	8002e70 <HAL_RCC_OscConfig+0xc70>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe f98e 	bl	800117c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1fd      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e94:	601a      	str	r2, [r3, #0]
  return result;
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_OscConfig+0xcba>
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	e027      	b.n	8002f0a <HAL_RCC_OscConfig+0xd0a>
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4b9c      	ldr	r3, [pc, #624]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f16:	6011      	str	r1, [r2, #0]
 8002f18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	fa92 f1a2 	rbit	r1, r2
 8002f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f2e:	6011      	str	r1, [r2, #0]
  return result;
 8002f30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d182      	bne.n	8002e5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	497f      	ldr	r1, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe f8da 	bl	800117c <HAL_GetTick>
 8002fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	e009      	b.n	8002fe2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe f8d5 	bl	800117c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e144      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003006:	601a      	str	r2, [r3, #0]
  return result;
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003010:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0xe2c>
 8003026:	4b54      	ldr	r3, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	e027      	b.n	800307c <HAL_RCC_OscConfig+0xe7c>
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	fa93 f2a3 	rbit	r2, r3
 8003048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800305a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003080:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	fa92 f1a2 	rbit	r1, r2
 8003098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030a0:	6011      	str	r1, [r2, #0]
  return result;
 80030a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	fab2 f282 	clz	r2, r2
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f042 0220 	orr.w	r2, r2, #32
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f002 021f 	and.w	r2, r2, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f202 	lsl.w	r2, r1, r2
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d082      	beq.n	8002fce <HAL_RCC_OscConfig+0xdce>
 80030c8:	e0cf      	b.n	800326a <HAL_RCC_OscConfig+0x106a>
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030ee:	601a      	str	r2, [r3, #0]
  return result;
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe f834 	bl	800117c <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	e009      	b.n	800312e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe f82f 	bl	800117c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e09e      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003152:	601a      	str	r2, [r3, #0]
  return result;
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800315c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d104      	bne.n	800317c <HAL_RCC_OscConfig+0xf7c>
 8003172:	4b01      	ldr	r3, [pc, #4]	; (8003178 <HAL_RCC_OscConfig+0xf78>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e029      	b.n	80031cc <HAL_RCC_OscConfig+0xfcc>
 8003178:	40021000 	.word	0x40021000
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fa93 f2a3 	rbit	r2, r3
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCC_OscConfig+0x1078>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	fa92 f1a2 	rbit	r1, r2
 80031e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031f0:	6011      	str	r1, [r2, #0]
  return result;
 80031f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	f002 021f 	and.w	r2, r2, #31
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d180      	bne.n	800311a <HAL_RCC_OscConfig+0xf1a>
 8003218:	e027      	b.n	800326a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e01e      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_RCC_OscConfig+0x1078>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003236:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800323a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	429a      	cmp	r2, r3
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800324e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003252:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000

0800327c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b09e      	sub	sp, #120	; 0x78
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e162      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d910      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b8d      	ldr	r3, [pc, #564]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	498b      	ldr	r1, [pc, #556]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e14a      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	497f      	ldr	r1, [pc, #508]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80dc 	beq.w	80034a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d13c      	bne.n	8003372 <HAL_RCC_ClockConfig+0xf6>
 80032f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <HAL_RCC_ClockConfig+0xa6>
 800331c:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	e00f      	b.n	8003342 <HAL_RCC_ClockConfig+0xc6>
 8003322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	667b      	str	r3, [r7, #100]	; 0x64
 8003330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003334:	663b      	str	r3, [r7, #96]	; 0x60
 8003336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333e:	4b67      	ldr	r3, [pc, #412]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003346:	65ba      	str	r2, [r7, #88]	; 0x58
 8003348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800334a:	fa92 f2a2 	rbit	r2, r2
 800334e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003352:	fab2 f282 	clz	r2, r2
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f042 0220 	orr.w	r2, r2, #32
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f002 021f 	and.w	r2, r2, #31
 8003362:	2101      	movs	r1, #1
 8003364:	fa01 f202 	lsl.w	r2, r1, r2
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d17b      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0f3      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d13c      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x178>
 800337a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d102      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x128>
 800339e:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e00f      	b.n	80033c4 <HAL_RCC_ClockConfig+0x148>
 80033a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
 80033b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b6:	643b      	str	r3, [r7, #64]	; 0x40
 80033b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c0:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80033ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033cc:	fa92 f2a2 	rbit	r2, r2
 80033d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f042 0220 	orr.w	r2, r2, #32
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f002 021f 	and.w	r2, r2, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d13a      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b2      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
 80033f4:	2302      	movs	r3, #2
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <HAL_RCC_ClockConfig+0x1a0>
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	e00d      	b.n	8003438 <HAL_RCC_ClockConfig+0x1bc>
 800341c:	2302      	movs	r3, #2
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	2302      	movs	r3, #2
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2202      	movs	r2, #2
 800343a:	61ba      	str	r2, [r7, #24]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	fa92 f2a2 	rbit	r2, r2
 8003442:	617a      	str	r2, [r7, #20]
  return result;
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	fab2 f282 	clz	r2, r2
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f042 0220 	orr.w	r2, r2, #32
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f002 021f 	and.w	r2, r2, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e079      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	491a      	ldr	r1, [pc, #104]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fd fe80 	bl	800117c <HAL_GetTick>
 800347c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fd fe7c 	bl	800117c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e061      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d214      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4906      	ldr	r1, [pc, #24]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e040      	b.n	800355a <HAL_RCC_ClockConfig+0x2de>
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_RCC_ClockConfig+0x2e8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	491a      	ldr	r1, [pc, #104]	; (8003564 <HAL_RCC_ClockConfig+0x2e8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x2e8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4912      	ldr	r1, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x2e8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800351e:	f000 f829 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003522:	4601      	mov	r1, r0
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_RCC_ClockConfig+0x2e8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352c:	22f0      	movs	r2, #240	; 0xf0
 800352e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	fa92 f2a2 	rbit	r2, r2
 8003536:	60fa      	str	r2, [r7, #12]
  return result;
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	40d3      	lsrs	r3, r2
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x2ec>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
 8003546:	fa21 f303 	lsr.w	r3, r1, r3
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_RCC_ClockConfig+0x2f0>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_RCC_ClockConfig+0x2f4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fdce 	bl	80010f4 <HAL_InitTick>
  
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3778      	adds	r7, #120	; 0x78
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	0800584c 	.word	0x0800584c
 800356c:	20000000 	.word	0x20000000
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	b08b      	sub	sp, #44	; 0x2c
 8003578:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b04      	cmp	r3, #4
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x30>
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x36>
 80035a2:	e03c      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a6:	623b      	str	r3, [r7, #32]
      break;
 80035a8:	e03c      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	fa92 f2a2 	rbit	r2, r2
 80035bc:	607a      	str	r2, [r7, #4]
  return result;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	fab2 f282 	clz	r2, r2
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	40d3      	lsrs	r3, r2
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_RCC_GetSysClockFreq+0xc8>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	220f      	movs	r2, #15
 80035d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	60fa      	str	r2, [r7, #12]
  return result;
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	40d3      	lsrs	r3, r2
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	fbb2 f2f3 	udiv	r2, r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	e004      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	623b      	str	r3, [r7, #32]
      break;
 800361c:	e002      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003620:	623b      	str	r3, [r7, #32]
      break;
 8003622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003624:	6a3b      	ldr	r3, [r7, #32]
}
 8003626:	4618      	mov	r0, r3
 8003628:	372c      	adds	r7, #44	; 0x2c
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	007a1200 	.word	0x007a1200
 800363c:	08005864 	.word	0x08005864
 8003640:	08005874 	.word	0x08005874
 8003644:	003d0900 	.word	0x003d0900

08003648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_RCC_GetHCLKFreq+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003666:	f7ff ffef 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 800366a:	4601      	mov	r1, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003674:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003678:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	603a      	str	r2, [r7, #0]
  return result;
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	40d3      	lsrs	r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	0800585c 	.word	0x0800585c

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036aa:	f7ff ffcd 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 80036ae:	4601      	mov	r1, r0
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	fa92 f2a2 	rbit	r2, r2
 80036c4:	603a      	str	r2, [r7, #0]
  return result;
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	fab2 f282 	clz	r2, r2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	40d3      	lsrs	r3, r2
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800585c 	.word	0x0800585c

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b092      	sub	sp, #72	; 0x48
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80cd 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370c:	4b86      	ldr	r3, [pc, #536]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b83      	ldr	r3, [pc, #524]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a82      	ldr	r2, [pc, #520]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b80      	ldr	r3, [pc, #512]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b7d      	ldr	r3, [pc, #500]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b7a      	ldr	r3, [pc, #488]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a79      	ldr	r2, [pc, #484]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fd fd15 	bl	800117c <HAL_GetTick>
 8003752:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd fd11 	bl	800117c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b64      	cmp	r3, #100	; 0x64
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0db      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b70      	ldr	r3, [pc, #448]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003774:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d07d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378e:	429a      	cmp	r2, r3
 8003790:	d076      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	461a      	mov	r2, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037e4:	4a50      	ldr	r2, [pc, #320]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d045      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fcc2 	bl	800117c <HAL_GetTick>
 80037f8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fd fcbe 	bl	800117c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e086      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003812:	2302      	movs	r3, #2
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	2302      	movs	r3, #2
 8003820:	623b      	str	r3, [r7, #32]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	61fb      	str	r3, [r7, #28]
  return result;
 800382a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0302 	orr.w	r3, r3, #2
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d102      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	e007      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003846:	2302      	movs	r3, #2
 8003848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	4b35      	ldr	r3, [pc, #212]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2202      	movs	r2, #2
 8003858:	613a      	str	r2, [r7, #16]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	fa92 f2a2 	rbit	r2, r2
 8003860:	60fa      	str	r2, [r7, #12]
  return result;
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	fab2 f282 	clz	r2, r2
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f002 021f 	and.w	r2, r2, #31
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f202 	lsl.w	r2, r1, r2
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0bd      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4926      	ldr	r1, [pc, #152]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003892:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4a22      	ldr	r2, [pc, #136]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	491a      	ldr	r1, [pc, #104]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f023 0210 	bic.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4912      	ldr	r1, [pc, #72]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	490b      	ldr	r1, [pc, #44]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391a:	4313      	orrs	r3, r2
 800391c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3748      	adds	r7, #72	; 0x48
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	40007000 	.word	0x40007000
 8003930:	10908100 	.word	0x10908100

08003934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e049      	b.n	80039da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fa38 	bl	8000dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 f94a 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ff      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b14      	cmp	r3, #20
 8003a0e:	f200 80f0 	bhi.w	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	08003bf3 	.word	0x08003bf3
 8003a20:	08003bf3 	.word	0x08003bf3
 8003a24:	08003bf3 	.word	0x08003bf3
 8003a28:	08003aad 	.word	0x08003aad
 8003a2c:	08003bf3 	.word	0x08003bf3
 8003a30:	08003bf3 	.word	0x08003bf3
 8003a34:	08003bf3 	.word	0x08003bf3
 8003a38:	08003aef 	.word	0x08003aef
 8003a3c:	08003bf3 	.word	0x08003bf3
 8003a40:	08003bf3 	.word	0x08003bf3
 8003a44:	08003bf3 	.word	0x08003bf3
 8003a48:	08003b2f 	.word	0x08003b2f
 8003a4c:	08003bf3 	.word	0x08003bf3
 8003a50:	08003bf3 	.word	0x08003bf3
 8003a54:	08003bf3 	.word	0x08003bf3
 8003a58:	08003b71 	.word	0x08003b71
 8003a5c:	08003bf3 	.word	0x08003bf3
 8003a60:	08003bf3 	.word	0x08003bf3
 8003a64:	08003bf3 	.word	0x08003bf3
 8003a68:	08003bb1 	.word	0x08003bb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f942 	bl	8003cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	619a      	str	r2, [r3, #24]
      break;
 8003aaa:	e0a5      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f9a8 	bl	8003e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6999      	ldr	r1, [r3, #24]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	619a      	str	r2, [r3, #24]
      break;
 8003aec:	e084      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fa07 	bl	8003f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0208 	orr.w	r2, r2, #8
 8003b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0204 	bic.w	r2, r2, #4
 8003b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	61da      	str	r2, [r3, #28]
      break;
 8003b2c:	e064      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fa65 	bl	8004004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69d9      	ldr	r1, [r3, #28]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	021a      	lsls	r2, r3, #8
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	61da      	str	r2, [r3, #28]
      break;
 8003b6e:	e043      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 faa8 	bl	80040cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0208 	orr.w	r2, r2, #8
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0204 	bic.w	r2, r2, #4
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bae:	e023      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fae6 	bl	8004188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bf0:	e002      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a32      	ldr	r2, [pc, #200]	; (8003ce8 <TIM_Base_SetConfig+0xdc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_Base_SetConfig+0x28>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2a:	d003      	beq.n	8003c34 <TIM_Base_SetConfig+0x28>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <TIM_Base_SetConfig+0xe0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <TIM_Base_SetConfig+0xdc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_Base_SetConfig+0x6a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d00f      	beq.n	8003c76 <TIM_Base_SetConfig+0x6a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <TIM_Base_SetConfig+0xe0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0x6a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x6a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x6a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <TIM_Base_SetConfig+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <TIM_Base_SetConfig+0xdc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_Base_SetConfig+0xc0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_Base_SetConfig+0xc0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0xc0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <TIM_Base_SetConfig+0xec>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d103      	bne.n	8003cd4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0302 	bic.w	r3, r3, #2
 8003d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <TIM_OC1_SetConfig+0xfc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_OC1_SetConfig+0x78>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <TIM_OC1_SetConfig+0x100>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_OC1_SetConfig+0x78>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <TIM_OC1_SetConfig+0x104>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_OC1_SetConfig+0x78>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <TIM_OC1_SetConfig+0x108>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10c      	bne.n	8003d8e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0308 	bic.w	r3, r3, #8
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <TIM_OC1_SetConfig+0xfc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00b      	beq.n	8003dae <TIM_OC1_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <TIM_OC1_SetConfig+0x100>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <TIM_OC1_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <TIM_OC1_SetConfig+0x104>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d003      	beq.n	8003dae <TIM_OC1_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <TIM_OC1_SetConfig+0x108>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d111      	bne.n	8003dd2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0210 	bic.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0320 	bic.w	r3, r3, #32
 8003e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <TIM_OC2_SetConfig+0xf0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10d      	bne.n	8003e88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <TIM_OC2_SetConfig+0xf0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_OC2_SetConfig+0xa0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <TIM_OC2_SetConfig+0xf4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_OC2_SetConfig+0xa0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <TIM_OC2_SetConfig+0xf8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC2_SetConfig+0xa0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <TIM_OC2_SetConfig+0xfc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d113      	bne.n	8003ed0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <TIM_OC3_SetConfig+0xec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10d      	bne.n	8003f86 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f84:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1a      	ldr	r2, [pc, #104]	; (8003ff4 <TIM_OC3_SetConfig+0xec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x9e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <TIM_OC3_SetConfig+0xf0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x9e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <TIM_OC3_SetConfig+0xf4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x9e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <TIM_OC3_SetConfig+0xf8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d113      	bne.n	8003fce <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800

08004004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <TIM_OC4_SetConfig+0xb8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_OC4_SetConfig+0x7c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <TIM_OC4_SetConfig+0xbc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_OC4_SetConfig+0x7c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <TIM_OC4_SetConfig+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC4_SetConfig+0x7c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <TIM_OC4_SetConfig+0xc4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800

080040cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a15      	ldr	r2, [pc, #84]	; (8004178 <TIM_OC5_SetConfig+0xac>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00b      	beq.n	800413e <TIM_OC5_SetConfig+0x72>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a14      	ldr	r2, [pc, #80]	; (800417c <TIM_OC5_SetConfig+0xb0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_OC5_SetConfig+0x72>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <TIM_OC5_SetConfig+0xb4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_OC5_SetConfig+0x72>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <TIM_OC5_SetConfig+0xb8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d109      	bne.n	8004152 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	621a      	str	r2, [r3, #32]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	051b      	lsls	r3, r3, #20
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <TIM_OC6_SetConfig+0xb0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00b      	beq.n	80041fc <TIM_OC6_SetConfig+0x74>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a15      	ldr	r2, [pc, #84]	; (800423c <TIM_OC6_SetConfig+0xb4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_OC6_SetConfig+0x74>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a14      	ldr	r2, [pc, #80]	; (8004240 <TIM_OC6_SetConfig+0xb8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_OC6_SetConfig+0x74>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a13      	ldr	r2, [pc, #76]	; (8004244 <TIM_OC6_SetConfig+0xbc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d109      	bne.n	8004210 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800

08004248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800425c:	2302      	movs	r3, #2
 800425e:	e054      	b.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a24      	ldr	r2, [pc, #144]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004290:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00e      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d009      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a11      	ldr	r2, [pc, #68]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800433c:	2302      	movs	r3, #2
 800433e:	e060      	b.n	8004402 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a14      	ldr	r2, [pc, #80]	; (8004410 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d115      	bne.n	80043f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	051b      	lsls	r3, r3, #20
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40012c00 	.word	0x40012c00

08004414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e040      	b.n	80044a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc fd22 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fbfc 	bl	8004c50 <UART_SetConfig>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e022      	b.n	80044a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fd26 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fdad 	bl	8005000 <UART_CheckIdleState>
 80044a6:	4603      	mov	r3, r0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d165      	bne.n	8004592 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_UART_Transmit_DMA+0x22>
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e05e      	b.n	8004594 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2221      	movs	r2, #33	; 0x21
 80044f8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d027      	beq.n	8004552 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a25      	ldr	r2, [pc, #148]	; (800459c <HAL_UART_Transmit_DMA+0xec>)
 8004508:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <HAL_UART_Transmit_DMA+0xf0>)
 8004510:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_UART_Transmit_DMA+0xf4>)
 8004518:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	2200      	movs	r2, #0
 8004520:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	4619      	mov	r1, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3328      	adds	r3, #40	; 0x28
 8004532:	461a      	mov	r2, r3
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	f7fd faf7 	bl	8001b28 <HAL_DMA_Start_IT>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2210      	movs	r2, #16
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e020      	b.n	8004594 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2240      	movs	r2, #64	; 0x40
 8004558:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	613b      	str	r3, [r7, #16]
   return(result);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457a:	623a      	str	r2, [r7, #32]
 800457c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	69f9      	ldr	r1, [r7, #28]
 8004580:	6a3a      	ldr	r2, [r7, #32]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	61bb      	str	r3, [r7, #24]
   return(result);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3728      	adds	r7, #40	; 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	08005475 	.word	0x08005475
 80045a0:	08005509 	.word	0x08005509
 80045a4:	08005689 	.word	0x08005689

080045a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d132      	bne.n	8004626 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_UART_Receive_DMA+0x24>
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e02b      	b.n	8004628 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	461a      	mov	r2, r3
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fdff 	bl	8005220 <UART_Start_Receive_DMA>
 8004622:	4603      	mov	r3, r0
 8004624:	e000      	b.n	8004628 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0ba      	sub	sp, #232	; 0xe8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800465a:	f640 030f 	movw	r3, #2063	; 0x80f
 800465e:	4013      	ands	r3, r2
 8004660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00f      	beq.n	8004698 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 82ab 	beq.w	8004be4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      }
      return;
 8004696:	e2a5      	b.n	8004be4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8117 	beq.w	80048d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046b2:	4b85      	ldr	r3, [pc, #532]	; (80048c8 <HAL_UART_IRQHandler+0x298>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 810a 	beq.w	80048d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <HAL_UART_IRQHandler+0xbc>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00b      	beq.n	80046ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d011      	beq.n	800471c <HAL_UART_IRQHandler+0xec>
 80046f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2202      	movs	r2, #2
 800470a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d011      	beq.n	800474c <HAL_UART_IRQHandler+0x11c>
 8004728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2204      	movs	r2, #4
 800473a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	f043 0202 	orr.w	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d017      	beq.n	8004788 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004768:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2208      	movs	r2, #8
 8004776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477e:	f043 0208 	orr.w	r2, r3, #8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <HAL_UART_IRQHandler+0x18a>
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8211 	beq.w	8004be8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d005      	beq.n	8004812 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800480a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d04f      	beq.n	80048b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fdca 	bl	80053ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d141      	bne.n	80048aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800483c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800485e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800486a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1d9      	bne.n	8004826 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	2b00      	cmp	r3, #0
 8004878:	d013      	beq.n	80048a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_UART_IRQHandler+0x29c>)
 8004880:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd f9e6 	bl	8001c58 <HAL_DMA_Abort_IT>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d017      	beq.n	80048c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800489c:	4610      	mov	r0, r2
 800489e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	e00f      	b.n	80048c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9be 	bl	8004c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	e00b      	b.n	80048c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9ba 	bl	8004c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	e007      	b.n	80048c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9b6 	bl	8004c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80048c0:	e192      	b.n	8004be8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c2:	bf00      	nop
    return;
 80048c4:	e190      	b.n	8004be8 <HAL_UART_IRQHandler+0x5b8>
 80048c6:	bf00      	nop
 80048c8:	04000120 	.word	0x04000120
 80048cc:	08005707 	.word	0x08005707

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 814b 	bne.w	8004b70 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8144 	beq.w	8004b70 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 813d 	beq.w	8004b70 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2210      	movs	r2, #16
 80048fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	f040 80b5 	bne.w	8004a78 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800491a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8164 	beq.w	8004bec <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800492a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800492e:	429a      	cmp	r2, r3
 8004930:	f080 815c 	bcs.w	8004bec <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800493a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b20      	cmp	r3, #32
 8004946:	f000 8086 	beq.w	8004a56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800495e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004978:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004980:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800498c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1da      	bne.n	800494a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e1      	bne.n	8004994 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e3      	bne.n	80049d0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e4      	bne.n	8004a16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd f8c8 	bl	8001be6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8e1 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a76:	e0b9      	b.n	8004bec <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80ab 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80a6 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e4      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004afe:	633a      	str	r2, [r7, #48]	; 0x30
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e3      	bne.n	8004ada <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	617b      	str	r3, [r7, #20]
   return(result);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e4      	bne.n	8004b26 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f865 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b6e:	e03f      	b.n	8004bf0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <HAL_UART_IRQHandler+0x56a>
 8004b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fdf7 	bl	8005786 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b98:	e02d      	b.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01c      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
    }
    return;
 8004bc2:	e017      	b.n	8004bf4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00c      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fda8 	bl	8005732 <UART_EndTransmit_IT>
    return;
 8004be2:	e008      	b.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004be4:	bf00      	nop
 8004be6:	e006      	b.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004be8:	bf00      	nop
 8004bea:	e004      	b.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bec:	bf00      	nop
 8004bee:	e002      	b.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bf0:	bf00      	nop
 8004bf2:	e000      	b.n	8004bf6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004bf4:	bf00      	nop
  }

}
 8004bf6:	37e8      	adds	r7, #232	; 0xe8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b8a      	ldr	r3, [pc, #552]	; (8004ea4 <UART_SetConfig+0x254>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a78      	ldr	r2, [pc, #480]	; (8004ea8 <UART_SetConfig+0x258>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d120      	bne.n	8004d0e <UART_SetConfig+0xbe>
 8004ccc:	4b77      	ldr	r3, [pc, #476]	; (8004eac <UART_SetConfig+0x25c>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d817      	bhi.n	8004d08 <UART_SetConfig+0xb8>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x90>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004d03 	.word	0x08004d03
 8004cec:	08004cf7 	.word	0x08004cf7
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e01d      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e01a      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e017      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004d02:	2308      	movs	r3, #8
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e014      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e011      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a67      	ldr	r2, [pc, #412]	; (8004eb0 <UART_SetConfig+0x260>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d102      	bne.n	8004d1e <UART_SetConfig+0xce>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e009      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a64      	ldr	r2, [pc, #400]	; (8004eb4 <UART_SetConfig+0x264>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d102      	bne.n	8004d2e <UART_SetConfig+0xde>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e001      	b.n	8004d32 <UART_SetConfig+0xe2>
 8004d2e:	2310      	movs	r3, #16
 8004d30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d15a      	bne.n	8004df2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d827      	bhi.n	8004d92 <UART_SetConfig+0x142>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0xf8>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d93 	.word	0x08004d93
 8004d58:	08004d83 	.word	0x08004d83
 8004d5c:	08004d93 	.word	0x08004d93
 8004d60:	08004d93 	.word	0x08004d93
 8004d64:	08004d93 	.word	0x08004d93
 8004d68:	08004d8b 	.word	0x08004d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fe fc78 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8004d70:	61b8      	str	r0, [r7, #24]
        break;
 8004d72:	e013      	b.n	8004d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7fe fc96 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004d78:	61b8      	str	r0, [r7, #24]
        break;
 8004d7a:	e00f      	b.n	8004d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d7c:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <UART_SetConfig+0x268>)
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e00c      	b.n	8004d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d82:	f7fe fbf7 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8004d86:	61b8      	str	r0, [r7, #24]
        break;
 8004d88:	e008      	b.n	8004d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	61bb      	str	r3, [r7, #24]
        break;
 8004d90:	e004      	b.n	8004d9c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	77bb      	strb	r3, [r7, #30]
        break;
 8004d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d074      	beq.n	8004e8c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d916      	bls.n	8004dec <UART_SetConfig+0x19c>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d212      	bcs.n	8004dec <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f023 030f 	bic.w	r3, r3, #15
 8004dce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	89fb      	ldrh	r3, [r7, #14]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	89fa      	ldrh	r2, [r7, #14]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e04f      	b.n	8004e8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77bb      	strb	r3, [r7, #30]
 8004df0:	e04c      	b.n	8004e8c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d828      	bhi.n	8004e4a <UART_SetConfig+0x1fa>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x1b0>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fc1c 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e013      	b.n	8004e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fe fc3a 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <UART_SetConfig+0x268>)
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e00c      	b.n	8004e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fe fb9b 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8004e3e:	61b8      	str	r0, [r7, #24]
        break;
 8004e40:	e008      	b.n	8004e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	61bb      	str	r3, [r7, #24]
        break;
 8004e48:	e004      	b.n	8004e54 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	77bb      	strb	r3, [r7, #30]
        break;
 8004e52:	bf00      	nop
    }

    if (pclk != 0U)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	085a      	lsrs	r2, r3, #1
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d909      	bls.n	8004e88 <UART_SetConfig+0x238>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7a:	d205      	bcs.n	8004e88 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e001      	b.n	8004e8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	efff69f3 	.word	0xefff69f3
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	40004400 	.word	0x40004400
 8004eb4:	40004800 	.word	0x40004800
 8004eb8:	007a1200 	.word	0x007a1200

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fba:	d10a      	bne.n	8004fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b098      	sub	sp, #96	; 0x60
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fc f8b4 	bl	800117c <HAL_GetTick>
 8005014:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d12e      	bne.n	8005082 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f88c 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	653b      	str	r3, [r7, #80]	; 0x50
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e062      	b.n	8005148 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d149      	bne.n	8005124 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f856 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d03c      	beq.n	8005124 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	623b      	str	r3, [r7, #32]
   return(result);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	617b      	str	r3, [r7, #20]
   return(result);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e011      	b.n	8005148 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3758      	adds	r7, #88	; 0x58
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	e049      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005168:	d045      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fc f807 	bl	800117c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <UART_WaitOnFlagUntilTimeout+0x30>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e048      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d031      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d110      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2208      	movs	r2, #8
 80051a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f8ff 	bl	80053ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2208      	movs	r2, #8
 80051b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e029      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d0:	d111      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f8e5 	bl	80053ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00f      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d0a6      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b096      	sub	sp, #88	; 0x58
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2222      	movs	r2, #34	; 0x22
 8005248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005250:	2b00      	cmp	r3, #0
 8005252:	d028      	beq.n	80052a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	4a3e      	ldr	r2, [pc, #248]	; (8005354 <UART_Start_Receive_DMA+0x134>)
 800525a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	4a3d      	ldr	r2, [pc, #244]	; (8005358 <UART_Start_Receive_DMA+0x138>)
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	4a3c      	ldr	r2, [pc, #240]	; (800535c <UART_Start_Receive_DMA+0x13c>)
 800526a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005270:	2200      	movs	r2, #0
 8005272:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3324      	adds	r3, #36	; 0x24
 800527e:	4619      	mov	r1, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	461a      	mov	r2, r3
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	f7fc fc4e 	bl	8001b28 <HAL_DMA_Start_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2210      	movs	r2, #16
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e051      	b.n	800534a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d018      	beq.n	80052e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c2:	657b      	str	r3, [r7, #84]	; 0x54
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ce:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e6      	bne.n	80052ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	653b      	str	r3, [r7, #80]	; 0x50
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005300:	637a      	str	r2, [r7, #52]	; 0x34
 8005302:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e5      	bne.n	80052e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	613b      	str	r3, [r7, #16]
   return(result);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800532a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005334:	623a      	str	r2, [r7, #32]
 8005336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	69f9      	ldr	r1, [r7, #28]
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	61bb      	str	r3, [r7, #24]
   return(result);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3758      	adds	r7, #88	; 0x58
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	08005525 	.word	0x08005525
 8005358:	0800564b 	.word	0x0800564b
 800535c:	08005689 	.word	0x08005689

08005360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	60bb      	str	r3, [r7, #8]
   return(result);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	613b      	str	r3, [r7, #16]
   return(result);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80053a0:	bf00      	nop
 80053a2:	3724      	adds	r7, #36	; 0x24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b095      	sub	sp, #84	; 0x54
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d2:	643b      	str	r3, [r7, #64]	; 0x40
 80053d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e6      	bne.n	80053b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3308      	adds	r3, #8
 80053ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541e:	2b01      	cmp	r3, #1
 8005420:	d118      	bne.n	8005454 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6979      	ldr	r1, [r7, #20]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	613b      	str	r3, [r7, #16]
   return(result);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005468:	bf00      	nop
 800546a:	3754      	adds	r7, #84	; 0x54
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b090      	sub	sp, #64	; 0x40
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b20      	cmp	r3, #32
 8005488:	d037      	beq.n	80054fa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	2200      	movs	r2, #0
 800548e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	623b      	str	r3, [r7, #32]
   return(result);
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3308      	adds	r3, #8
 80054b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b2:	633a      	str	r2, [r7, #48]	; 0x30
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	69b9      	ldr	r1, [r7, #24]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	617b      	str	r3, [r7, #20]
   return(result);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e6      	bne.n	80054c6 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054f8:	e002      	b.n	8005500 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80054fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80054fc:	f7fb f8ae 	bl	800065c <HAL_UART_TxCpltCallback>
}
 8005500:	bf00      	nop
 8005502:	3740      	adds	r7, #64	; 0x40
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff fb70 	bl	8004bfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b09c      	sub	sp, #112	; 0x70
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b20      	cmp	r3, #32
 8005538:	d071      	beq.n	800561e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800553a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553c:	2200      	movs	r2, #0
 800553e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005556:	66bb      	str	r3, [r7, #104]	; 0x68
 8005558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005560:	65bb      	str	r3, [r7, #88]	; 0x58
 8005562:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800556e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	667b      	str	r3, [r7, #100]	; 0x64
 800558c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005594:	647a      	str	r2, [r7, #68]	; 0x44
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800559a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	623b      	str	r3, [r7, #32]
   return(result);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	663b      	str	r3, [r7, #96]	; 0x60
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3308      	adds	r3, #8
 80055c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055c8:	633a      	str	r2, [r7, #48]	; 0x30
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d118      	bne.n	800561e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0310 	bic.w	r3, r3, #16
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	617b      	str	r3, [r7, #20]
   return(result);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e6      	bne.n	80055ec <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800561e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005620:	2200      	movs	r2, #0
 8005622:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005628:	2b01      	cmp	r3, #1
 800562a:	d107      	bne.n	800563c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800562c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005632:	4619      	mov	r1, r3
 8005634:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005636:	f7ff faff 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800563a:	e002      	b.n	8005642 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800563c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800563e:	f7fb f81d 	bl	800067c <HAL_UART_RxCpltCallback>
}
 8005642:	bf00      	nop
 8005644:	3770      	adds	r7, #112	; 0x70
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	2b01      	cmp	r3, #1
 8005664:	d109      	bne.n	800567a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	b29b      	uxth	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff fae0 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005678:	e002      	b.n	8005680 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff fac8 	bl	8004c10 <HAL_UART_RxHalfCpltCallback>
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b80      	cmp	r3, #128	; 0x80
 80056b0:	d109      	bne.n	80056c6 <UART_DMAError+0x3e>
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b21      	cmp	r3, #33	; 0x21
 80056b6:	d106      	bne.n	80056c6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80056c0:	6978      	ldr	r0, [r7, #20]
 80056c2:	f7ff fe4d 	bl	8005360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d109      	bne.n	80056e8 <UART_DMAError+0x60>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b22      	cmp	r3, #34	; 0x22
 80056d8:	d106      	bne.n	80056e8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7ff fe62 	bl	80053ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ee:	f043 0210 	orr.w	r2, r3, #16
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056f8:	6978      	ldr	r0, [r7, #20]
 80056fa:	f7ff fa93 	bl	8004c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056fe:	bf00      	nop
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fa7d 	bl	8004c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b088      	sub	sp, #32
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60bb      	str	r3, [r7, #8]
   return(result);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	613b      	str	r3, [r7, #16]
   return(result);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e6      	bne.n	800573a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fa ff6f 	bl	800065c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577e:	bf00      	nop
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <memset>:
 800579a:	4402      	add	r2, r0
 800579c:	4603      	mov	r3, r0
 800579e:	4293      	cmp	r3, r2
 80057a0:	d100      	bne.n	80057a4 <memset+0xa>
 80057a2:	4770      	bx	lr
 80057a4:	f803 1b01 	strb.w	r1, [r3], #1
 80057a8:	e7f9      	b.n	800579e <memset+0x4>
	...

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4d0d      	ldr	r5, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2600      	movs	r6, #0
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4d0b      	ldr	r5, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f000 f826 	bl	8005810 <_init>
 80057c4:	1b64      	subs	r4, r4, r5
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2600      	movs	r6, #0
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	4798      	blx	r3
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	4798      	blx	r3
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08005884 	.word	0x08005884
 80057e8:	08005884 	.word	0x08005884
 80057ec:	08005884 	.word	0x08005884
 80057f0:	08005888 	.word	0x08005888

080057f4 <memcpy>:
 80057f4:	440a      	add	r2, r1
 80057f6:	4291      	cmp	r1, r2
 80057f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	4770      	bx	lr
 8005800:	b510      	push	{r4, lr}
 8005802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580a:	4291      	cmp	r1, r2
 800580c:	d1f9      	bne.n	8005802 <memcpy+0xe>
 800580e:	bd10      	pop	{r4, pc}

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
