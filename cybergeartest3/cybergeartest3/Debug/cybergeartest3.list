
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800582c  0800582c  0000682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005888  08005888  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005888  08005888  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005888  08005888  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00006888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005890  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000010  080058a0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  080058a0  00007530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d3a  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002797  00000000  00000000  00019d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6d  00000000  00000000  0001d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c237  00000000  00000000  0001e115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012857  00000000  00000000  0003a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7a35  00000000  00000000  0004cba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f45d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f4  00000000  00000000  000f461c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f8810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005814 	.word	0x08005814

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005814 	.word	0x08005814

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	@ 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f005 face 	bl	80057f8 <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	@ 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f9a9 	bl	8000600 <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	@ 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8cf 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	@ 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8ae 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	@ 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f88a 	bl	80004ee <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	@ 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	@ 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f866 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_ControlSpeed>:
void CyberGear_CurrentControlPram(CyberGear_Typedef *cyber, float kp, float ki,
		float gain);
void CyberGear_ControlSpeed(CyberGear_Typedef *cyber, float target_speed) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	ed87 0a00 	vstr	s0, [r7]
	cyber->cybermotion.velocity = target_speed;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
	union float_binary b_speed;
	b_speed.data = make_float_writedata(target_speed, V_MIN, V_MAX);
 8000442:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000446:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 800044a:	ed97 0a00 	vldr	s0, [r7]
 800044e:	f7ff febb 	bl	80001c8 <make_float_writedata>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700A, b_speed.bin);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	461a      	mov	r2, r3
 8000460:	f247 010a 	movw	r1, #28682	@ 0x700a
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f842 	bl	80004ee <CyberGear_WriteIndexParam>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af02      	add	r7, sp, #8
 8000478:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795a      	ldrb	r2, [r3, #5]
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	4613      	mov	r3, r2
 8000494:	460a      	mov	r2, r1
 8000496:	2103      	movs	r1, #3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff febf 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80004a4:	200a      	movs	r0, #10
 80004a6:	4798      	blx	r3
}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795a      	ldrb	r2, [r3, #5]
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	4613      	mov	r3, r2
 80004d2:	460a      	mov	r2, r1
 80004d4:	2104      	movs	r1, #4
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff fea0 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80004e2:	200a      	movs	r0, #10
 80004e4:	4798      	blx	r3
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b08a      	sub	sp, #40	@ 0x28
 80004f2:	af02      	add	r7, sp, #8
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	460b      	mov	r3, r1
 80004f8:	607a      	str	r2, [r7, #4]
 80004fa:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 8000504:	897b      	ldrh	r3, [r7, #10]
 8000506:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 8000508:	7d3b      	ldrb	r3, [r7, #20]
 800050a:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 800050c:	7d7b      	ldrb	r3, [r7, #21]
 800050e:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	795a      	ldrb	r2, [r3, #5]
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4613      	mov	r3, r2
 800053a:	460a      	mov	r2, r1
 800053c:	2112      	movs	r1, #18
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f7ff fe6c 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800054a:	2001      	movs	r0, #1
 800054c:	4798      	blx	r3
}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	4613      	mov	r3, r2
 8000562:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	639a      	str	r2, [r3, #56]	@ 0x38
	ecan->filter.FilterIdLow = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	63da      	str	r2, [r3, #60]	@ 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	641a      	str	r2, [r3, #64]	@ 0x40
	ecan->filter.FilterMaskIdLow = 0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	645a      	str	r2, [r3, #68]	@ 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	649a      	str	r2, [r3, #72]	@ 0x48

	if (can_nuumber == 1)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d103      	bne.n	8000596 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000594:	e002      	b.n	800059c <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	220e      	movs	r2, #14
 800059a:	64da      	str	r2, [r3, #76]	@ 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	651a      	str	r2, [r3, #80]	@ 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	655a      	str	r2, [r3, #84]	@ 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2201      	movs	r2, #1
 80005ac:	659a      	str	r2, [r3, #88]	@ 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	220e      	movs	r2, #14
 80005b2:	65da      	str	r2, [r3, #92]	@ 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3338      	adds	r3, #56	@ 0x38
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f000 ff09 	bl	80013d6 <HAL_CAN_ConfigFilter>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <Easy_CAN6_Start+0x78>
		Error_Handler();
 80005ca:	f000 fb8f 	bl	8000cec <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2102      	movs	r1, #2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f911 	bl	80017fc <HAL_CAN_ActivateNotification>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 80005e0:	f000 fb84 	bl	8000cec <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ffbe 	bl	800156a <HAL_CAN_Start>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005f4:	f001 fa43 	bl	8001a7e <HAL_NVIC_SystemReset>

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2204      	movs	r2, #4
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
	ecan->TxHeader.DLC = size;
 8000624:	78fa      	ldrb	r2, [r7, #3]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000632:	e000      	b.n	8000636 <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 8000634:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f8a9 	bl	8001792 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f6      	beq.n	8000634 <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f103 0120 	add.w	r1, r3, #32
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	f000 ffcc 	bl	80015f2 <HAL_CAN_AddTxMessage>

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[1], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800066c:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <HAL_UART_TxCpltCallback+0x1c>)
 800066e:	2220      	movs	r2, #32
 8000670:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000a0 	.word	0x200000a0

08000684 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <HAL_UART_RxCpltCallback+0x1c>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000508 	.word	0x20000508

080006a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006aa:	f000 fd0f 	bl	80010cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ae:	f000 f95d 	bl	800096c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b2:	f000 fad1 	bl	8000c58 <MX_GPIO_Init>
	MX_DMA_Init();
 80006b6:	f000 faa9 	bl	8000c0c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80006ba:	f000 fa77 	bl	8000bac <MX_USART2_UART_Init>
	MX_CAN_Init();
 80006be:	f000 f9af 	bl	8000a20 <MX_CAN_Init>
	MX_TIM1_Init();
 80006c2:	f000 f9e3 	bl	8000a8c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 80006c6:	2202      	movs	r2, #2
 80006c8:	4995      	ldr	r1, [pc, #596]	@ (8000920 <main+0x27c>)
 80006ca:	4896      	ldr	r0, [pc, #600]	@ (8000924 <main+0x280>)
 80006cc:	f7ff ff43 	bl	8000556 <Easy_CAN6_Start>

	for (int i = 0; i < 4; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e03d      	b.n	8000752 <main+0xae>
		if (is_run_CyberGear) {
			CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	22b0      	movs	r2, #176	@ 0xb0
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a92      	ldr	r2, [pc, #584]	@ (8000928 <main+0x284>)
 80006e0:	1898      	adds	r0, r3, r2
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3370      	adds	r3, #112	@ 0x70
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b90      	ldr	r3, [pc, #576]	@ (800092c <main+0x288>)
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	498c      	ldr	r1, [pc, #560]	@ (8000924 <main+0x280>)
 80006f2:	f7ff fde0 	bl	80002b6 <CyberGear_Init>
			CyberGear_ResetMotor(&my_cyber[i]);
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	22b0      	movs	r2, #176	@ 0xb0
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4a8a      	ldr	r2, [pc, #552]	@ (8000928 <main+0x284>)
 8000700:	4413      	add	r3, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fed4 	bl	80004b0 <CyberGear_ResetMotor>
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	22b0      	movs	r2, #176	@ 0xb0
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	4a85      	ldr	r2, [pc, #532]	@ (8000928 <main+0x284>)
 8000712:	4413      	add	r3, r2
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fe08 	bl	800032c <CyberGear_SetMode>
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	22b0      	movs	r2, #176	@ 0xb0
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4a80      	ldr	r2, [pc, #512]	@ (8000928 <main+0x284>)
 8000726:	4413      	add	r3, r2
 8000728:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 800072c:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000730:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fddc 	bl	80002f2 <CyberGear_SetConfig>
			CyberGear_EnableMotor(&my_cyber[i]);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	22b0      	movs	r2, #176	@ 0xb0
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	4a79      	ldr	r2, [pc, #484]	@ (8000928 <main+0x284>)
 8000744:	4413      	add	r3, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fe93 	bl	8000472 <CyberGear_EnableMotor>
	for (int i = 0; i < 4; i++) {
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b03      	cmp	r3, #3
 8000756:	ddbe      	ble.n	80006d6 <main+0x32>
		}
	}
	HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	@ 0x64
 800075a:	f000 fd1d 	bl	8001198 <HAL_Delay>
//  }
//  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Type any key.\r\n", 14);
//  while (huart2.gState != HAL_UART_STATE_READY)
//  {
//  }
	HAL_UART_Transmit_DMA(&huart2,
 800075e:	2221      	movs	r2, #33	@ 0x21
 8000760:	4973      	ldr	r1, [pc, #460]	@ (8000930 <main+0x28c>)
 8000762:	4874      	ldr	r0, [pc, #464]	@ (8000934 <main+0x290>)
 8000764:	f003 fea6 	bl	80044b4 <HAL_UART_Transmit_DMA>
			(uint8_t*) "Then toggle LED each 8 letters.\r\n", 33);

	//	HAL_UART_Receive_DMA(&huart2, UART2_RX_Buffer, byte_number);
	//	HAL_UART_Receive_DMA(&huart2,serialData,DATANUM);
	HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	@ 0x64
 800076a:	f000 fd15 	bl	8001198 <HAL_Delay>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 800076e:	2108      	movs	r1, #8
 8000770:	4871      	ldr	r0, [pc, #452]	@ (8000938 <main+0x294>)
 8000772:	f001 fd2d 	bl	80021d0 <HAL_GPIO_TogglePin>

		debug = HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 8000776:	2207      	movs	r2, #7
 8000778:	4970      	ldr	r1, [pc, #448]	@ (800093c <main+0x298>)
 800077a:	486e      	ldr	r0, [pc, #440]	@ (8000934 <main+0x290>)
 800077c:	f003 ff16 	bl	80045ac <HAL_UART_Receive_DMA>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b6e      	ldr	r3, [pc, #440]	@ (8000940 <main+0x29c>)
 8000786:	701a      	strb	r2, [r3, #0]
//         while (flagRcved == FALSE) {
//           // 受信完了まで待機
//         }
//            flagRcved = FALSE;

		memcpy(buf, rcvBuffer, sizeof(buf));
 8000788:	4a6e      	ldr	r2, [pc, #440]	@ (8000944 <main+0x2a0>)
 800078a:	4b6c      	ldr	r3, [pc, #432]	@ (800093c <main+0x298>)
 800078c:	4614      	mov	r4, r2
 800078e:	461d      	mov	r5, r3
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	6023      	str	r3, [r4, #0]
//    rcvBuffer[4] = buf[5];
//    rcvBuffer[5] = buf[6];
//    rcvBuffer[6] = buf[0];

//		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
		memcpy(&uart_prev_count, &buf[1], sizeof(uint8_t));
 8000798:	4b6a      	ldr	r3, [pc, #424]	@ (8000944 <main+0x2a0>)
 800079a:	785a      	ldrb	r2, [r3, #1]
 800079c:	4b6a      	ldr	r3, [pc, #424]	@ (8000948 <main+0x2a4>)
 800079e:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[3];
 80007a0:	4b68      	ldr	r3, [pc, #416]	@ (8000944 <main+0x2a0>)
 80007a2:	78db      	ldrb	r3, [r3, #3]
 80007a4:	723b      	strb	r3, [r7, #8]
		reversed_bytes[1] = buf[2];
 80007a6:	4b67      	ldr	r3, [pc, #412]	@ (8000944 <main+0x2a0>)
 80007a8:	789b      	ldrb	r3, [r3, #2]
 80007aa:	727b      	strb	r3, [r7, #9]

//		reversed_bytes[0] = buf[2];
//		reversed_bytes[1] = buf[1];
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 80007ac:	893a      	ldrh	r2, [r7, #8]
 80007ae:	4b67      	ldr	r3, [pc, #412]	@ (800094c <main+0x2a8>)
 80007b0:	801a      	strh	r2, [r3, #0]
// memcpy(&reversed_command_id, reversed_bytes, sizeof(uint16_t));
// command_id = reversed_command_id;

		uint8_t _temp_command_content[4];
		// uint8_t reversed_bytes[4];
		memcpy(_temp_command_content, &buf[4], sizeof(float));
 80007b2:	4b64      	ldr	r3, [pc, #400]	@ (8000944 <main+0x2a0>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	607b      	str	r3, [r7, #4]

//		memcpy(_temp_command_content, &buf[3], sizeof(float));

		//    // バイト列を逆順にコピー
		for (int j = 0; j < 4; j++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	e00f      	b.n	80007de <main+0x13a>
			reversed_bytes[j] = _temp_command_content[3 - j];
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	f1c3 0303 	rsb	r3, r3, #3
 80007c4:	3318      	adds	r3, #24
 80007c6:	443b      	add	r3, r7
 80007c8:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80007cc:	f107 0208 	add.w	r2, r7, #8
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	460a      	mov	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	3301      	adds	r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	ddec      	ble.n	80007be <main+0x11a>
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4a5a      	ldr	r2, [pc, #360]	@ (8000950 <main+0x2ac>)
 80007e8:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

		rcvLength = 0;
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <main+0x2b0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	801a      	strh	r2, [r3, #0]

		switch (command_id) {
 80007f0:	4b56      	ldr	r3, [pc, #344]	@ (800094c <main+0x2a8>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	3b16      	subs	r3, #22
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	f200 808e 	bhi.w	8000918 <main+0x274>
 80007fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <main+0x160>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	08000821 	.word	0x08000821
 8000808:	08000919 	.word	0x08000919
 800080c:	0800083b 	.word	0x0800083b
 8000810:	08000919 	.word	0x08000919
 8000814:	08000855 	.word	0x08000855
 8000818:	0800086f 	.word	0x0800086f
 800081c:	080008ff 	.word	0x080008ff
		case 22:
			motor_speed[0] = command_content;
 8000820:	4b4b      	ldr	r3, [pc, #300]	@ (8000950 <main+0x2ac>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a4c      	ldr	r2, [pc, #304]	@ (8000958 <main+0x2b4>)
 8000826:	6013      	str	r3, [r2, #0]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[0], (float) motor_speed[0]);
 8000828:	4b4b      	ldr	r3, [pc, #300]	@ (8000958 <main+0x2b4>)
 800082a:	edd3 7a00 	vldr	s15, [r3]
 800082e:	eeb0 0a67 	vmov.f32	s0, s15
 8000832:	483d      	ldr	r0, [pc, #244]	@ (8000928 <main+0x284>)
 8000834:	f7ff fdfc 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000838:	e06e      	b.n	8000918 <main+0x274>
		case 24:
			motor_speed[1] = command_content;
 800083a:	4b45      	ldr	r3, [pc, #276]	@ (8000950 <main+0x2ac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a46      	ldr	r2, [pc, #280]	@ (8000958 <main+0x2b4>)
 8000840:	6053      	str	r3, [r2, #4]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[1], (float) motor_speed[1]);
 8000842:	4b45      	ldr	r3, [pc, #276]	@ (8000958 <main+0x2b4>)
 8000844:	edd3 7a01 	vldr	s15, [r3, #4]
 8000848:	eeb0 0a67 	vmov.f32	s0, s15
 800084c:	4843      	ldr	r0, [pc, #268]	@ (800095c <main+0x2b8>)
 800084e:	f7ff fdef 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000852:	e061      	b.n	8000918 <main+0x274>
		case 26:
			motor_speed[2] = command_content;
 8000854:	4b3e      	ldr	r3, [pc, #248]	@ (8000950 <main+0x2ac>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a3f      	ldr	r2, [pc, #252]	@ (8000958 <main+0x2b4>)
 800085a:	6093      	str	r3, [r2, #8]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[2], (float) motor_speed[2]);
 800085c:	4b3e      	ldr	r3, [pc, #248]	@ (8000958 <main+0x2b4>)
 800085e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000862:	eeb0 0a67 	vmov.f32	s0, s15
 8000866:	483e      	ldr	r0, [pc, #248]	@ (8000960 <main+0x2bc>)
 8000868:	f7ff fde2 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 800086c:	e054      	b.n	8000918 <main+0x274>
		case 27:
			debug_2 = 100;
 800086e:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <main+0x2c0>)
 8000870:	2264      	movs	r2, #100	@ 0x64
 8000872:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e03d      	b.n	80008f6 <main+0x252>
					if (is_run_CyberGear) {
						CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	22b0      	movs	r2, #176	@ 0xb0
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	4a29      	ldr	r2, [pc, #164]	@ (8000928 <main+0x284>)
 8000884:	1898      	adds	r0, r3, r2
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	3370      	adds	r3, #112	@ 0x70
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <main+0x288>)
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	4923      	ldr	r1, [pc, #140]	@ (8000924 <main+0x280>)
 8000896:	f7ff fd0e 	bl	80002b6 <CyberGear_Init>
						CyberGear_ResetMotor(&my_cyber[i]);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	22b0      	movs	r2, #176	@ 0xb0
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <main+0x284>)
 80008a4:	4413      	add	r3, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe02 	bl	80004b0 <CyberGear_ResetMotor>
						CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	22b0      	movs	r2, #176	@ 0xb0
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <main+0x284>)
 80008b6:	4413      	add	r3, r2
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fd36 	bl	800032c <CyberGear_SetMode>
						CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	22b0      	movs	r2, #176	@ 0xb0
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	4a17      	ldr	r2, [pc, #92]	@ (8000928 <main+0x284>)
 80008ca:	4413      	add	r3, r2
 80008cc:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 80008d0:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80008d4:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fd0a 	bl	80002f2 <CyberGear_SetConfig>
						CyberGear_EnableMotor(&my_cyber[i]);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	22b0      	movs	r2, #176	@ 0xb0
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <main+0x284>)
 80008e8:	4413      	add	r3, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fdc1 	bl	8000472 <CyberGear_EnableMotor>
			for (int i = 0; i < 4; i++) {
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	ddbe      	ble.n	800087a <main+0x1d6>
					}
				}
			break;
 80008fc:	e00c      	b.n	8000918 <main+0x274>
		case 28:
			motor_speed[3] = command_content;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <main+0x2ac>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <main+0x2b4>)
 8000904:	60d3      	str	r3, [r2, #12]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[3], (float) motor_speed[3]);
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <main+0x2b4>)
 8000908:	edd3 7a03 	vldr	s15, [r3, #12]
 800090c:	eeb0 0a67 	vmov.f32	s0, s15
 8000910:	4815      	ldr	r0, [pc, #84]	@ (8000968 <main+0x2c4>)
 8000912:	f7ff fd8d 	bl	8000430 <CyberGear_ControlSpeed>
			}
			break;
 8000916:	bf00      	nop
		}

		HAL_Delay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f000 fc3d 	bl	8001198 <HAL_Delay>
	while (1) {
 800091e:	e726      	b.n	800076e <main+0xca>
 8000920:	2000002c 	.word	0x2000002c
 8000924:	20000474 	.word	0x20000474
 8000928:	200001b4 	.word	0x200001b4
 800092c:	08001199 	.word	0x08001199
 8000930:	0800582c 	.word	0x0800582c
 8000934:	200000a0 	.word	0x200000a0
 8000938:	48000400 	.word	0x48000400
 800093c:	2000050c 	.word	0x2000050c
 8000940:	200001b0 	.word	0x200001b0
 8000944:	200004ec 	.word	0x200004ec
 8000948:	20000500 	.word	0x20000500
 800094c:	20000502 	.word	0x20000502
 8000950:	20000504 	.word	0x20000504
 8000954:	2000050a 	.word	0x2000050a
 8000958:	200004dc 	.word	0x200004dc
 800095c:	20000264 	.word	0x20000264
 8000960:	20000314 	.word	0x20000314
 8000964:	20000000 	.word	0x20000000
 8000968:	200003c4 	.word	0x200003c4

0800096c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	@ 0x58
 8000970:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000972:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000976:	2228      	movs	r2, #40	@ 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 ff0f 	bl	800579e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80009b4:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80009b8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fc20 	bl	8002204 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x62>
		Error_Handler();
 80009ca:	f000 f98f 	bl	8000cec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fc48 	bl	8003280 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x8e>
		Error_Handler();
 80009f6:	f000 f979 	bl	8000cec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fe:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fe70 	bl	80036ec <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xaa>
		Error_Handler();
 8000a12:	f000 f96b 	bl	8000cec <Error_Handler>
	}
}
 8000a16:	bf00      	nop
 8000a18:	3758      	adds	r7, #88	@ 0x58
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a26:	4a18      	ldr	r2, [pc, #96]	@ (8000a88 <MX_CAN_Init+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a3e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a42:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a4a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_CAN_Init+0x64>)
 8000a72:	f000 fbb5 	bl	80011e0 <HAL_CAN_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_CAN_Init+0x60>
		Error_Handler();
 8000a7c:	f000 f936 	bl	8000cec <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	40006400 	.word	0x40006400

08000a8c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b096      	sub	sp, #88	@ 0x58
 8000a90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	222c      	movs	r2, #44	@ 0x2c
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fe70 	bl	800579e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000abe:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000ac0:	4a39      	ldr	r2, [pc, #228]	@ (8000ba8 <MX_TIM1_Init+0x11c>)
 8000ac2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b36      	ldr	r3, [pc, #216]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ad0:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ade:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000aea:	482e      	ldr	r0, [pc, #184]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000aec:	f002 ff24 	bl	8003938 <HAL_TIM_PWM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000af6:	f000 f8f9 	bl	8000cec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4825      	ldr	r0, [pc, #148]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000b0e:	f003 fb9d 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b18:	f000 f8e8 	bl	8000cec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1c:	2360      	movs	r3, #96	@ 0x60
 8000b1e:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000b38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4818      	ldr	r0, [pc, #96]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000b42:	f002 ff51 	bl	80039e8 <HAL_TIM_PWM_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000b4c:	f000 f8ce 	bl	8000cec <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b68:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000b86:	f003 fbcf 	bl	8004328 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000b90:	f000 f8ac 	bl	8000cec <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000b94:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <MX_TIM1_Init+0x118>)
 8000b96:	f000 f937 	bl	8000e08 <HAL_TIM_MspPostInit>
}
 8000b9a:	bf00      	nop
 8000b9c:	3758      	adds	r7, #88	@ 0x58
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000054 	.word	0x20000054
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <MX_USART2_UART_Init+0x58>)
 8000bb4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bb8:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <MX_USART2_UART_Init+0x5c>)
 8000bba:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bd0:	220c      	movs	r2, #12
 8000bd2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_USART2_UART_Init+0x54>)
 8000bee:	f003 fc13 	bl	8004418 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART2_UART_Init+0x50>
		Error_Handler();
 8000bf8:	f000 f878 	bl	8000cec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000a0 	.word	0x200000a0
 8000c04:	40004400 	.word	0x40004400
 8000c08:	0007a120 	.word	0x0007a120

08000c0c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <MX_DMA_Init+0x48>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <MX_DMA_Init+0x48>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <MX_DMA_Init+0x48>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2010      	movs	r0, #16
 8000c30:	f000 fefb 	bl	8001a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c34:	2010      	movs	r0, #16
 8000c36:	f000 ff14 	bl	8001a62 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2011      	movs	r0, #17
 8000c40:	f000 fef3 	bl	8001a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c44:	2011      	movs	r0, #17
 8000c46:	f000 ff0c 	bl	8001a62 <HAL_NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c78:	6153      	str	r3, [r2, #20]
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_GPIO_Init+0x8c>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2108      	movs	r1, #8
 8000cba:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <MX_GPIO_Init+0x90>)
 8000cbc:	f001 fa70 	bl	80021a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_GPIO_Init+0x90>)
 8000cd8:	f001 f8f0 	bl	8001ebc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400

08000cec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	@ (8000dc0 <HAL_CAN_MspInit+0x80>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d129      	bne.n	8000db6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_CAN_MspInit+0x84>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_CAN_MspInit+0x84>)
 8000d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_CAN_MspInit+0x84>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_CAN_MspInit+0x84>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <HAL_CAN_MspInit+0x84>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_CAN_MspInit+0x84>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000da4:	2309      	movs	r3, #9
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f001 f883 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40006400 	.word	0x40006400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_TIM_PWM_MspInit+0x38>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10b      	bne.n	8000df2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40012c00 	.word	0x40012c00
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <HAL_TIM_MspPostInit+0x68>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d11d      	bne.n	8000e66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_TIM_MspPostInit+0x6c>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a11      	ldr	r2, [pc, #68]	@ (8000e74 <HAL_TIM_MspPostInit+0x6c>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_TIM_MspPostInit+0x6c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e54:	2306      	movs	r3, #6
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f001 f82b 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a42      	ldr	r2, [pc, #264]	@ (8000fa0 <HAL_UART_MspInit+0x128>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d17d      	bne.n	8000f96 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <HAL_UART_MspInit+0x12c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a41      	ldr	r2, [pc, #260]	@ (8000fa4 <HAL_UART_MspInit+0x12c>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa4 <HAL_UART_MspInit+0x12c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <HAL_UART_MspInit+0x12c>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa4 <HAL_UART_MspInit+0x12c>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <HAL_UART_MspInit+0x12c>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000eca:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000edc:	2307      	movs	r3, #7
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f000 ffe7 	bl	8001ebc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8000fac <HAL_UART_MspInit+0x134>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f06:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f12:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f1e:	4822      	ldr	r0, [pc, #136]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f20:	f000 fdbd 	bl	8001a9e <HAL_DMA_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000f2a:	f7ff fedf 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f32:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f34:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <HAL_UART_MspInit+0x130>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f4e:	2280      	movs	r2, #128	@ 0x80
 8000f50:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f60:	2220      	movs	r2, #32
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f6a:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f6c:	f000 fd97 	bl	8001a9e <HAL_DMA_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000f76:	f7ff feb9 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f7e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f80:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2026      	movs	r0, #38	@ 0x26
 8000f8c:	f000 fd4d 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f90:	2026      	movs	r0, #38	@ 0x26
 8000f92:	f000 fd66 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	20000128 	.word	0x20000128
 8000fac:	40020080 	.word	0x40020080
 8000fb0:	2000016c 	.word	0x2000016c
 8000fb4:	4002006c 	.word	0x4002006c

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f8a3 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <DMA1_Channel6_IRQHandler+0x10>)
 800101e:	f000 fe5b 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000016c 	.word	0x2000016c

0800102c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <DMA1_Channel7_IRQHandler+0x10>)
 8001032:	f000 fe51 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000128 	.word	0x20000128

08001040 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <USART2_IRQHandler+0x10>)
 8001046:	f003 faf5 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000a0 	.word	0x200000a0

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f004 fb83 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010aa:	f7ff fafb 	bl	80006a4 <main>

080010ae <LoopForever>:

LoopForever:
    b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010bc:	08005890 	.word	0x08005890
  ldr r2, =_sbss
 80010c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010c4:	20000530 	.word	0x20000530

080010c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_2_IRQHandler>
	...

080010cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_Init+0x28>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <HAL_Init+0x28>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 fc99 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fe06 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fcb5 	bl	8001a86 <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001134:	f000 fc79 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000004 	.word	0x20000004
 8001150:	2000000c 	.word	0x2000000c
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000000c 	.word	0x2000000c
 800117c:	2000052c 	.word	0x2000052c

08001180 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;  
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000052c 	.word	0x2000052c

08001198 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0ed      	b.n	80013ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fd9e 	bl	8000d40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff ffb4 	bl	8001180 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800121a:	e012      	b.n	8001242 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121c:	f7ff ffb0 	bl	8001180 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d90b      	bls.n	8001242 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2205      	movs	r2, #5
 800123a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0c5      	b.n	80013ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0e5      	beq.n	800121c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0202 	bic.w	r2, r2, #2
 800125e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff ff8e 	bl	8001180 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001266:	e012      	b.n	800128e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001268:	f7ff ff8a 	bl	8001180 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d90b      	bls.n	800128e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2205      	movs	r2, #5
 8001286:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e09f      	b.n	80013ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e5      	bne.n	8001268 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7e1b      	ldrb	r3, [r3, #24]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7e5b      	ldrb	r3, [r3, #25]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e9b      	ldrb	r3, [r3, #26]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e007      	b.n	800131a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0220 	bic.w	r2, r2, #32
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7edb      	ldrb	r3, [r3, #27]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0210 	bic.w	r2, r2, #16
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e007      	b.n	8001344 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0210 	orr.w	r2, r2, #16
 8001342:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7f1b      	ldrb	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0208 	orr.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e007      	b.n	800136e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0208 	bic.w	r2, r2, #8
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7f5b      	ldrb	r3, [r3, #29]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d108      	bne.n	8001388 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0204 	orr.w	r2, r2, #4
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e007      	b.n	8001398 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	ea42 0103 	orr.w	r1, r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b087      	sub	sp, #28
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d003      	beq.n	80013fc <HAL_CAN_ConfigFilter+0x26>
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	f040 80aa 	bne.w	8001550 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2201      	movs	r2, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d123      	bne.n	800147e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	401a      	ands	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001458:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3248      	adds	r2, #72	@ 0x48
 800145e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001472:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001474:	6979      	ldr	r1, [r7, #20]
 8001476:	3348      	adds	r3, #72	@ 0x48
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d122      	bne.n	80014cc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	431a      	orrs	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3248      	adds	r2, #72	@ 0x48
 80014ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c2:	6979      	ldr	r1, [r7, #20]
 80014c4:	3348      	adds	r3, #72	@ 0x48
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014e6:	e007      	b.n	80014f8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001512:	e007      	b.n	8001524 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	431a      	orrs	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001542:	f023 0201 	bic.w	r2, r3, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e006      	b.n	800155e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
  }
}
 800155e:	4618      	mov	r0, r3
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d12e      	bne.n	80015dc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001596:	f7ff fdf3 	bl	8001180 <HAL_GetTick>
 800159a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800159c:	e012      	b.n	80015c4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800159e:	f7ff fdef 	bl	8001180 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b0a      	cmp	r3, #10
 80015aa:	d90b      	bls.n	80015c4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2205      	movs	r2, #5
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e5      	bne.n	800159e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	e006      	b.n	80015ea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b089      	sub	sp, #36	@ 0x24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001606:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001610:	7ffb      	ldrb	r3, [r7, #31]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d003      	beq.n	800161e <HAL_CAN_AddTxMessage+0x2c>
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	2b02      	cmp	r3, #2
 800161a:	f040 80ad 	bne.w	8001778 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8095 	beq.w	8001768 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	0e1b      	lsrs	r3, r3, #24
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001648:	2201      	movs	r2, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	409a      	lsls	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10d      	bne.n	8001676 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	6809      	ldr	r1, [r1, #0]
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3318      	adds	r3, #24
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	440b      	add	r3, r1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e00f      	b.n	8001696 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001680:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800168a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3318      	adds	r3, #24
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	440b      	add	r3, r1
 8001694:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3318      	adds	r3, #24
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	440b      	add	r3, r1
 80016a6:	3304      	adds	r3, #4
 80016a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	7d1b      	ldrb	r3, [r3, #20]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d111      	bne.n	80016d6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3318      	adds	r3, #24
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	3304      	adds	r3, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6811      	ldr	r1, [r2, #0]
 80016c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3318      	adds	r3, #24
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	440b      	add	r3, r1
 80016d2:	3304      	adds	r3, #4
 80016d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3307      	adds	r3, #7
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	061a      	lsls	r2, r3, #24
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3306      	adds	r3, #6
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4313      	orrs	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	3204      	adds	r2, #4
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	4610      	mov	r0, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6811      	ldr	r1, [r2, #0]
 80016fe:	ea43 0200 	orr.w	r2, r3, r0
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	440b      	add	r3, r1
 8001708:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800170c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3303      	adds	r3, #3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	061a      	lsls	r2, r3, #24
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3302      	adds	r3, #2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4313      	orrs	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4610      	mov	r0, r2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	6811      	ldr	r1, [r2, #0]
 8001734:	ea43 0200 	orr.w	r2, r3, r0
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	440b      	add	r3, r1
 800173e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001742:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3318      	adds	r3, #24
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	6811      	ldr	r1, [r2, #0]
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3318      	adds	r3, #24
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	440b      	add	r3, r1
 8001762:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e00e      	b.n	8001786 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e006      	b.n	8001786 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017a6:	7afb      	ldrb	r3, [r7, #11]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d002      	beq.n	80017b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d11d      	bne.n	80017ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <HAL_CAN_ActivateNotification+0x1e>
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d109      	bne.n	800182e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6959      	ldr	r1, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e006      	b.n	800183c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
  }
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	@ (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	@ (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a8:	f3bf 8f4f 	dsb	sy
}
 80019ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <__NVIC_SystemReset+0x24>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019b6:	4904      	ldr	r1, [pc, #16]	@ (80019c8 <__NVIC_SystemReset+0x24>)
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <__NVIC_SystemReset+0x28>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019be:	f3bf 8f4f 	dsb	sy
}
 80019c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <__NVIC_SystemReset+0x20>
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0004 	.word	0x05fa0004

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f4:	f7ff ff78 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff13 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff28 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff78 	bl	800193c <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff47 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff1b 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001a82:	f7ff ff8f 	bl	80019a4 <__NVIC_SystemReset>

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff9e 	bl	80019d0 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e037      	b.n	8001b24 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ace:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f9b8 	bl	8001e7c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}  
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_DMA_Start_IT+0x20>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e04a      	b.n	8001be2 <HAL_DMA_Start_IT+0xb6>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d13a      	bne.n	8001bd4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f94b 	bl	8001e1e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 020e 	orr.w	r2, r2, #14
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e00f      	b.n	8001bc2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 020a 	orr.w	r2, r2, #10
 8001bb0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0204 	bic.w	r2, r2, #4
 8001bc0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e005      	b.n	8001be0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d008      	beq.n	8001c0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e020      	b.n	8001c50 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 020e 	bic.w	r2, r2, #14
 8001c1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d005      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2204      	movs	r2, #4
 8001c76:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e027      	b.n	8001cce <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 020e 	bic.w	r2, r2, #14
 8001c8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
    } 
  }
  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d024      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x72>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01f      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d30:	2104      	movs	r1, #4
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d06a      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	e065      	b.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	2202      	movs	r2, #2
 8001d50:	409a      	lsls	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02c      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xdc>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d027      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10b      	bne.n	8001d8a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 020a 	bic.w	r2, r2, #10
 8001d80:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d92:	2102      	movs	r1, #2
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d035      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001db2:	e030      	b.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	2208      	movs	r2, #8
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d028      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d023      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020e 	bic.w	r2, r2, #14
 8001ddc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
    }
  }
}  
 8001e14:	e7ff      	b.n	8001e16 <HAL_DMA_IRQHandler+0x13e>
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d108      	bne.n	8001e5e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e5c:	e007      	b.n	8001e6e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	60da      	str	r2, [r3, #12]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <DMA_CalcBaseAndBitshift+0x34>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <DMA_CalcBaseAndBitshift+0x38>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	009a      	lsls	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a06      	ldr	r2, [pc, #24]	@ (8001eb8 <DMA_CalcBaseAndBitshift+0x3c>)
 8001ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	bffdfff8 	.word	0xbffdfff8
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	40020000 	.word	0x40020000

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	e14e      	b.n	800216a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8140 	beq.w	8002164 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x40>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 809a 	beq.w	8002164 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <HAL_GPIO_Init+0x2cc>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a54      	ldr	r2, [pc, #336]	@ (8002188 <HAL_GPIO_Init+0x2cc>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b52      	ldr	r3, [pc, #328]	@ (8002188 <HAL_GPIO_Init+0x2cc>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002048:	4a50      	ldr	r2, [pc, #320]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002072:	d013      	beq.n	800209c <HAL_GPIO_Init+0x1e0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <HAL_GPIO_Init+0x2d4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00d      	beq.n	8002098 <HAL_GPIO_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a45      	ldr	r2, [pc, #276]	@ (8002194 <HAL_GPIO_Init+0x2d8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <HAL_GPIO_Init+0x1d8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a44      	ldr	r2, [pc, #272]	@ (8002198 <HAL_GPIO_Init+0x2dc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_GPIO_Init+0x1d4>
 800208c:	2303      	movs	r3, #3
 800208e:	e006      	b.n	800209e <HAL_GPIO_Init+0x1e2>
 8002090:	2305      	movs	r3, #5
 8002092:	e004      	b.n	800209e <HAL_GPIO_Init+0x1e2>
 8002094:	2302      	movs	r3, #2
 8002096:	e002      	b.n	800209e <HAL_GPIO_Init+0x1e2>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_GPIO_Init+0x1e2>
 800209c:	2300      	movs	r3, #0
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	f002 0203 	and.w	r2, r2, #3
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	4093      	lsls	r3, r2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ae:	4937      	ldr	r1, [pc, #220]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020bc:	4b37      	ldr	r3, [pc, #220]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020e0:	4a2e      	ldr	r2, [pc, #184]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e6:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800210a:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002134:	4a19      	ldr	r2, [pc, #100]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213a:	4b18      	ldr	r3, [pc, #96]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800215e:	4a0f      	ldr	r2, [pc, #60]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f47f aea9 	bne.w	8001ecc <HAL_GPIO_Init+0x10>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	48000400 	.word	0x48000400
 8002194:	48000800 	.word	0x48000800
 8002198:	48000c00 	.word	0x48000c00
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43d9      	mvns	r1, r3
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	400b      	ands	r3, r1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800220a:	af00      	add	r7, sp, #0
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002214:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	f001 b823 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 817d 	beq.w	800253a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002240:	4bbc      	ldr	r3, [pc, #752]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b04      	cmp	r3, #4
 800224a:	d00c      	beq.n	8002266 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800224c:	4bb9      	ldr	r3, [pc, #740]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d15c      	bne.n	8002312 <HAL_RCC_OscConfig+0x10e>
 8002258:	4bb6      	ldr	r3, [pc, #728]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002264:	d155      	bne.n	8002312 <HAL_RCC_OscConfig+0x10e>
 8002266:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800226a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d102      	bne.n	8002298 <HAL_RCC_OscConfig+0x94>
 8002292:	4ba8      	ldr	r3, [pc, #672]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	e015      	b.n	80022c4 <HAL_RCC_OscConfig+0xc0>
 8002298:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800229c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022b0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80022c0:	4b9c      	ldr	r3, [pc, #624]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022c8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80022cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022d0:	fa92 f2a2 	rbit	r2, r2
 80022d4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80022d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f002 021f 	and.w	r2, r2, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 811f 	beq.w	8002538 <HAL_RCC_OscConfig+0x334>
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 8116 	bne.w	8002538 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f000 bfaf 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002316:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x12e>
 8002324:	4b83      	ldr	r3, [pc, #524]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a82      	ldr	r2, [pc, #520]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e036      	b.n	80023a0 <HAL_RCC_OscConfig+0x19c>
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x158>
 8002342:	4b7c      	ldr	r3, [pc, #496]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7b      	ldr	r2, [pc, #492]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b79      	ldr	r3, [pc, #484]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a78      	ldr	r2, [pc, #480]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e021      	b.n	80023a0 <HAL_RCC_OscConfig+0x19c>
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x184>
 800236e:	4b71      	ldr	r3, [pc, #452]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6d      	ldr	r2, [pc, #436]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0x19c>
 8002388:	4b6a      	ldr	r3, [pc, #424]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a69      	ldr	r2, [pc, #420]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b67      	ldr	r3, [pc, #412]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a66      	ldr	r2, [pc, #408]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a0:	4b64      	ldr	r3, [pc, #400]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	f023 020f 	bic.w	r2, r3, #15
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	495f      	ldr	r1, [pc, #380]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d059      	beq.n	800247e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fed9 	bl	8001180 <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fed4 	bl	8001180 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	@ 0x64
 80023e2:	d902      	bls.n	80023ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f000 bf43 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
 80023ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80023fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x218>
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e015      	b.n	8002448 <HAL_RCC_OscConfig+0x244>
 800241c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002420:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002434:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002438:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800244c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002450:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800245c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ab      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1d0>
 800247c:	e05d      	b.n	800253a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fe7f 	bl	8001180 <HAL_GetTick>
 8002482:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fe7a 	bl	8001180 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	@ 0x64
 8002496:	d902      	bls.n	800249e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f000 bee9 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
 800249e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024a2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2cc>
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	e015      	b.n	80024fc <HAL_RCC_OscConfig+0x2f8>
 80024d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024d4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80024e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80024ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002500:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002504:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002510:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ab      	bne.n	8002488 <HAL_RCC_OscConfig+0x284>
 8002530:	e003      	b.n	800253a <HAL_RCC_OscConfig+0x336>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 817d 	beq.w	800284a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002550:	4ba6      	ldr	r3, [pc, #664]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800255c:	4ba3      	ldr	r3, [pc, #652]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d172      	bne.n	800264e <HAL_RCC_OscConfig+0x44a>
 8002568:	4ba0      	ldr	r3, [pc, #640]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d16c      	bne.n	800264e <HAL_RCC_OscConfig+0x44a>
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002586:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_OscConfig+0x3a0>
 800259e:	4b93      	ldr	r3, [pc, #588]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	e013      	b.n	80025cc <HAL_RCC_OscConfig+0x3c8>
 80025a4:	2302      	movs	r3, #2
 80025a6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80025bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80025c8:	4b88      	ldr	r3, [pc, #544]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2202      	movs	r2, #2
 80025ce:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80025d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80025de:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCC_OscConfig+0x410>
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d002      	beq.n	8002614 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f000 be2e 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b75      	ldr	r3, [pc, #468]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	21f8      	movs	r1, #248	@ 0xf8
 800262a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002632:	fa91 f1a1 	rbit	r1, r1
 8002636:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800263a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800263e:	fab1 f181 	clz	r1, r1
 8002642:	b2c9      	uxtb	r1, r1
 8002644:	408b      	lsls	r3, r1
 8002646:	4969      	ldr	r1, [pc, #420]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264c:	e0fd      	b.n	800284a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002652:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8088 	beq.w	8002770 <HAL_RCC_OscConfig+0x56c>
 8002660:	2301      	movs	r3, #1
 8002662:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002672:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002680:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	2301      	movs	r3, #1
 800268a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fd78 	bl	8001180 <HAL_GetTick>
 8002690:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7fe fd73 	bl	8001180 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d902      	bls.n	80026ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	f000 bde2 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80026be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x4d8>
 80026d6:	4b45      	ldr	r3, [pc, #276]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e013      	b.n	8002704 <HAL_RCC_OscConfig+0x500>
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80026f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002700:	4b3a      	ldr	r3, [pc, #232]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	2202      	movs	r2, #2
 8002706:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800270a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002716:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0af      	beq.n	8002696 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b2d      	ldr	r3, [pc, #180]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	21f8      	movs	r1, #248	@ 0xf8
 800274c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002754:	fa91 f1a1 	rbit	r1, r1
 8002758:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800275c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002760:	fab1 f181 	clz	r1, r1
 8002764:	b2c9      	uxtb	r1, r1
 8002766:	408b      	lsls	r3, r1
 8002768:	4920      	ldr	r1, [pc, #128]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
 800276e:	e06c      	b.n	800284a <HAL_RCC_OscConfig+0x646>
 8002770:	2301      	movs	r3, #1
 8002772:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002782:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002790:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	461a      	mov	r2, r3
 8002798:	2300      	movs	r3, #0
 800279a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe fcf0 	bl	8001180 <HAL_GetTick>
 80027a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fceb 	bl	8001180 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d902      	bls.n	80027bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	f000 bd5a 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
 80027bc:	2302      	movs	r3, #2
 80027be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80027ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d104      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5ec>
 80027e6:	4b01      	ldr	r3, [pc, #4]	@ (80027ec <HAL_RCC_OscConfig+0x5e8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x614>
 80027ec:	40021000 	.word	0x40021000
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002802:	2302      	movs	r3, #2
 8002804:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002808:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002814:	4bc8      	ldr	r3, [pc, #800]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	2202      	movs	r2, #2
 800281a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800281e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002822:	fa92 f2a2 	rbit	r2, r2
 8002826:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800282a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ad      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8110 	beq.w	8002a80 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d079      	beq.n	8002964 <HAL_RCC_OscConfig+0x760>
 8002870:	2301      	movs	r3, #1
 8002872:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4bab      	ldr	r3, [pc, #684]	@ (8002b3c <HAL_RCC_OscConfig+0x938>)
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	2301      	movs	r3, #1
 8002898:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe fc71 	bl	8001180 <HAL_GetTick>
 800289e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe fc6c 	bl	8001180 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d902      	bls.n	80028ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	f000 bcdb 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
 80028ba:	2302      	movs	r3, #2
 80028bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028d4:	2202      	movs	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028f8:	2202      	movs	r2, #2
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002912:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002914:	4b88      	ldr	r3, [pc, #544]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002920:	2102      	movs	r1, #2
 8002922:	6019      	str	r1, [r3, #0]
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	fa93 f1a3 	rbit	r1, r3
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800293a:	6019      	str	r1, [r3, #0]
  return result;
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0a0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x6a0>
 8002962:	e08d      	b.n	8002a80 <HAL_RCC_OscConfig+0x87c>
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002986:	601a      	str	r2, [r3, #0]
  return result;
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002990:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4b68      	ldr	r3, [pc, #416]	@ (8002b3c <HAL_RCC_OscConfig+0x938>)
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	2300      	movs	r3, #0
 80029a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fbeb 	bl	8001180 <HAL_GetTick>
 80029aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe fbe6 	bl	8001180 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d902      	bls.n	80029c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	f000 bc55 	b.w	8003270 <HAL_RCC_OscConfig+0x106c>
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a3e:	2102      	movs	r1, #2
 8002a40:	6019      	str	r1, [r3, #0]
 8002a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	fa93 f1a3 	rbit	r1, r3
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a58:	6019      	str	r1, [r3, #0]
  return result;
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d197      	bne.n	80029b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 81a1 	beq.w	8002dd8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9c:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d116      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ace:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <HAL_RCC_OscConfig+0x93c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11a      	bne.n	8002b18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <HAL_RCC_OscConfig+0x93c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <HAL_RCC_OscConfig+0x93c>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fb47 	bl	8001180 <HAL_GetTick>
 8002af2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	e009      	b.n	8002b0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fb42 	bl	8001180 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	@ 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e3b1      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <HAL_RCC_OscConfig+0x93c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCC_OscConfig+0x940>
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a02      	ldr	r2, [pc, #8]	@ (8002b38 <HAL_RCC_OscConfig+0x934>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	e03c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x9ac>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	10908120 	.word	0x10908120
 8002b40:	40007000 	.word	0x40007000
 8002b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x96a>
 8002b54:	4bc1      	ldr	r3, [pc, #772]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4ac0      	ldr	r2, [pc, #768]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4bbe      	ldr	r3, [pc, #760]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4abd      	ldr	r2, [pc, #756]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e020      	b.n	8002bb0 <HAL_RCC_OscConfig+0x9ac>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x994>
 8002b7e:	4bb7      	ldr	r3, [pc, #732]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4ab6      	ldr	r2, [pc, #728]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4bb4      	ldr	r3, [pc, #720]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4ab3      	ldr	r2, [pc, #716]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x9ac>
 8002b98:	4bb0      	ldr	r3, [pc, #704]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4aaf      	ldr	r2, [pc, #700]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	4bad      	ldr	r3, [pc, #692]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4aac      	ldr	r2, [pc, #688]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8081 	beq.w	8002cc4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fadd 	bl	8001180 <HAL_GetTick>
 8002bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fad8 	bl	8001180 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e345      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c02:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_OscConfig+0xa4c>
 8002c4a:	4b84      	ldr	r3, [pc, #528]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	e013      	b.n	8002c78 <HAL_RCC_OscConfig+0xa74>
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	4b79      	ldr	r3, [pc, #484]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c7c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c80:	2102      	movs	r1, #2
 8002c82:	6011      	str	r1, [r2, #0]
 8002c84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c88:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	fa92 f1a2 	rbit	r1, r2
 8002c92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c96:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c9a:	6011      	str	r1, [r2, #0]
  return result;
 8002c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	fab2 f282 	clz	r2, r2
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	f002 021f 	and.w	r2, r2, #31
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d084      	beq.n	8002bcc <HAL_RCC_OscConfig+0x9c8>
 8002cc2:	e07f      	b.n	8002dc4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fa5c 	bl	8001180 <HAL_GetTick>
 8002cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00b      	b.n	8002ce6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fa57 	bl	8001180 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e2c4      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
 8002ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d2c:	601a      	str	r2, [r3, #0]
  return result;
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0xb4e>
 8002d4c:	4b43      	ldr	r3, [pc, #268]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	e013      	b.n	8002d7a <HAL_RCC_OscConfig+0xb76>
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	4b39      	ldr	r3, [pc, #228]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d7e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d82:	2102      	movs	r1, #2
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d8a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fa92 f1a2 	rbit	r1, r2
 8002d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d98:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d9c:	6011      	str	r1, [r2, #0]
  return result;
 8002d9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002da2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f002 021f 	and.w	r2, r2, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d184      	bne.n	8002cce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b23      	ldr	r3, [pc, #140]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8242 	beq.w	800326e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dea:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <HAL_RCC_OscConfig+0xc58>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	f000 8213 	beq.w	800321e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	f040 8162 	bne.w	80030ce <HAL_RCC_OscConfig+0xeca>
 8002e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e2e:	601a      	str	r2, [r3, #0]
  return result;
 8002e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e34:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe f996 	bl	8001180 <HAL_GetTick>
 8002e54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	e00c      	b.n	8002e74 <HAL_RCC_OscConfig+0xc70>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe f98e 	bl	8001180 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1fd      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
 8002e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e78:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e98:	601a      	str	r2, [r3, #0]
  return result;
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ea2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_OscConfig+0xcba>
 8002eb8:	4bb0      	ldr	r3, [pc, #704]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	e027      	b.n	8002f0e <HAL_RCC_OscConfig+0xd0a>
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ec6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002eec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f12:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f16:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f1a:	6011      	str	r1, [r2, #0]
 8002f1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f20:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	fa92 f1a2 	rbit	r1, r2
 8002f2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f2e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f32:	6011      	str	r1, [r2, #0]
  return result;
 8002f34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f38:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d182      	bne.n	8002e60 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5a:	4b88      	ldr	r3, [pc, #544]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	497f      	ldr	r1, [pc, #508]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
 8002f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f86:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fa6:	601a      	str	r2, [r3, #0]
  return result;
 8002fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fb0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fbc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f8da 	bl	8001180 <HAL_GetTick>
 8002fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe f8d5 	bl	8001180 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e144      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800300a:	601a      	str	r2, [r3, #0]
  return result;
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003014:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0xe2c>
 800302a:	4b54      	ldr	r3, [pc, #336]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	e027      	b.n	8003080 <HAL_RCC_OscConfig+0xe7c>
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003038:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800303c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800305e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	4b3f      	ldr	r3, [pc, #252]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003084:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003088:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003092:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	fa92 f1a2 	rbit	r1, r2
 800309c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030a4:	6011      	str	r1, [r2, #0]
  return result;
 80030a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	fab2 f282 	clz	r2, r2
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f042 0220 	orr.w	r2, r2, #32
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f002 021f 	and.w	r2, r2, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d082      	beq.n	8002fd2 <HAL_RCC_OscConfig+0xdce>
 80030cc:	e0cf      	b.n	800326e <HAL_RCC_OscConfig+0x106a>
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80030d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030f2:	601a      	str	r2, [r3, #0]
  return result;
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003108:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	461a      	mov	r2, r3
 8003110:	2300      	movs	r3, #0
 8003112:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f834 	bl	8001180 <HAL_GetTick>
 8003118:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e009      	b.n	8003132 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe f82f 	bl	8001180 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e09e      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800313a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003156:	601a      	str	r2, [r3, #0]
  return result;
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003160:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <HAL_RCC_OscConfig+0xf7c>
 8003176:	4b01      	ldr	r3, [pc, #4]	@ (800317c <HAL_RCC_OscConfig+0xf78>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e029      	b.n	80031d0 <HAL_RCC_OscConfig+0xfcc>
 800317c:	40021000 	.word	0x40021000
 8003180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003184:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003188:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800318c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003192:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fa93 f2a3 	rbit	r2, r3
 800319c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_RCC_OscConfig+0x1078>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031d4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80031d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fa92 f1a2 	rbit	r1, r2
 80031ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031f4:	6011      	str	r1, [r2, #0]
  return result;
 80031f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f042 0220 	orr.w	r2, r2, #32
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	f002 021f 	and.w	r2, r2, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d180      	bne.n	800311e <HAL_RCC_OscConfig+0xf1a>
 800321c:	e027      	b.n	800326e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e01e      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003232:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_RCC_OscConfig+0x1078>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800323a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800323e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	429a      	cmp	r2, r3
 8003250:	d10b      	bne.n	800326a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003252:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003256:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000

08003280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b09e      	sub	sp, #120	@ 0x78
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e162      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b90      	ldr	r3, [pc, #576]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b8d      	ldr	r3, [pc, #564]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0207 	bic.w	r2, r3, #7
 80032ae:	498b      	ldr	r1, [pc, #556]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b89      	ldr	r3, [pc, #548]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e14a      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b82      	ldr	r3, [pc, #520]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	497f      	ldr	r1, [pc, #508]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80dc 	beq.w	80034ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d13c      	bne.n	8003376 <HAL_RCC_ClockConfig+0xf6>
 80032fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003300:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800330a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d102      	bne.n	8003326 <HAL_RCC_ClockConfig+0xa6>
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e00f      	b.n	8003346 <HAL_RCC_ClockConfig+0xc6>
 8003326:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800332a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	667b      	str	r3, [r7, #100]	@ 0x64
 8003334:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003338:	663b      	str	r3, [r7, #96]	@ 0x60
 800333a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003342:	4b67      	ldr	r3, [pc, #412]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800334a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800334c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800334e:	fa92 f2a2 	rbit	r2, r2
 8003352:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003354:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003356:	fab2 f282 	clz	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f002 021f 	and.w	r2, r2, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f202 	lsl.w	r2, r1, r2
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d17b      	bne.n	800346a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0f3      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d13c      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x178>
 800337e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003382:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800338c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x128>
 80033a2:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e00f      	b.n	80033c8 <HAL_RCC_ClockConfig+0x148>
 80033a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80033bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c4:	4b46      	ldr	r3, [pc, #280]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033cc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033d0:	fa92 f2a2 	rbit	r2, r2
 80033d4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80033d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d8:	fab2 f282 	clz	r2, r2
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f042 0220 	orr.w	r2, r2, #32
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f002 021f 	and.w	r2, r2, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f202 	lsl.w	r2, r1, r2
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d13a      	bne.n	800346a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b2      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
 80033f8:	2302      	movs	r3, #2
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_RCC_ClockConfig+0x1a0>
 800341a:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e00d      	b.n	800343c <HAL_RCC_ClockConfig+0x1bc>
 8003420:	2302      	movs	r3, #2
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
 800342c:	2302      	movs	r3, #2
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	2202      	movs	r2, #2
 800343e:	61ba      	str	r2, [r7, #24]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	fa92 f2a2 	rbit	r2, r2
 8003446:	617a      	str	r2, [r7, #20]
  return result;
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	fab2 f282 	clz	r2, r2
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f042 0220 	orr.w	r2, r2, #32
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f002 021f 	and.w	r2, r2, #31
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f202 	lsl.w	r2, r1, r2
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e079      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	491a      	ldr	r1, [pc, #104]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347c:	f7fd fe80 	bl	8001180 <HAL_GetTick>
 8003480:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fd fe7c 	bl	8001180 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e061      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d214      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 0207 	bic.w	r2, r3, #7
 80034c2:	4906      	ldr	r1, [pc, #24]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b04      	ldr	r3, [pc, #16]	@ (80034dc <HAL_RCC_ClockConfig+0x25c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e040      	b.n	800355e <HAL_RCC_ClockConfig+0x2de>
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_RCC_ClockConfig+0x2e8>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	491a      	ldr	r1, [pc, #104]	@ (8003568 <HAL_RCC_ClockConfig+0x2e8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <HAL_RCC_ClockConfig+0x2e8>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4912      	ldr	r1, [pc, #72]	@ (8003568 <HAL_RCC_ClockConfig+0x2e8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003522:	f000 f829 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8003526:	4601      	mov	r1, r0
 8003528:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <HAL_RCC_ClockConfig+0x2e8>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003530:	22f0      	movs	r2, #240	@ 0xf0
 8003532:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	fa92 f2a2 	rbit	r2, r2
 800353a:	60fa      	str	r2, [r7, #12]
  return result;
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	fab2 f282 	clz	r2, r2
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	40d3      	lsrs	r3, r2
 8003546:	4a09      	ldr	r2, [pc, #36]	@ (800356c <HAL_RCC_ClockConfig+0x2ec>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	fa21 f303 	lsr.w	r3, r1, r3
 800354e:	4a08      	ldr	r2, [pc, #32]	@ (8003570 <HAL_RCC_ClockConfig+0x2f0>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <HAL_RCC_ClockConfig+0x2f4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fdce 	bl	80010f8 <HAL_InitTick>
  
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3778      	adds	r7, #120	@ 0x78
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	08005850 	.word	0x08005850
 8003570:	20000004 	.word	0x20000004
 8003574:	20000008 	.word	0x20000008

08003578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b08b      	sub	sp, #44	@ 0x2c
 800357c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003592:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x30>
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x36>
 80035a6:	e03c      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a8:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_RCC_GetSysClockFreq+0xc4>)
 80035aa:	623b      	str	r3, [r7, #32]
      break;
 80035ac:	e03c      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035b4:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80035b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	607a      	str	r2, [r7, #4]
  return result;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	fab2 f282 	clz	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	40d3      	lsrs	r3, r2
 80035cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003640 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035d2:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	220f      	movs	r2, #15
 80035dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	fa92 f2a2 	rbit	r2, r2
 80035e4:	60fa      	str	r2, [r7, #12]
  return result;
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	40d3      	lsrs	r3, r2
 80035f0:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003600:	4a0e      	ldr	r2, [pc, #56]	@ (800363c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	fbb2 f2f3 	udiv	r2, r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003610:	e004      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a0c      	ldr	r2, [pc, #48]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	623b      	str	r3, [r7, #32]
      break;
 8003620:	e002      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003624:	623b      	str	r3, [r7, #32]
      break;
 8003626:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003628:	6a3b      	ldr	r3, [r7, #32]
}
 800362a:	4618      	mov	r0, r3
 800362c:	372c      	adds	r7, #44	@ 0x2c
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	007a1200 	.word	0x007a1200
 8003640:	08005868 	.word	0x08005868
 8003644:	08005878 	.word	0x08005878
 8003648:	003d0900 	.word	0x003d0900

0800364c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b03      	ldr	r3, [pc, #12]	@ (8003660 <HAL_RCC_GetHCLKFreq+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000004 	.word	0x20000004

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800366a:	f7ff ffef 	bl	800364c <HAL_RCC_GetHCLKFreq>
 800366e:	4601      	mov	r1, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003678:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800367c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	603a      	str	r2, [r7, #0]
  return result;
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	40d3      	lsrs	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08005860 	.word	0x08005860

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036ae:	f7ff ffcd 	bl	800364c <HAL_RCC_GetHCLKFreq>
 80036b2:	4601      	mov	r1, r0
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80036bc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80036c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	fa92 f2a2 	rbit	r2, r2
 80036c8:	603a      	str	r2, [r7, #0]
  return result;
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	40d3      	lsrs	r3, r2
 80036d4:	4a04      	ldr	r2, [pc, #16]	@ (80036e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08005860 	.word	0x08005860

080036ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b092      	sub	sp, #72	@ 0x48
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80cd 	beq.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003710:	4b86      	ldr	r3, [pc, #536]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10e      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	4b83      	ldr	r3, [pc, #524]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4a82      	ldr	r2, [pc, #520]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003726:	61d3      	str	r3, [r2, #28]
 8003728:	4b80      	ldr	r3, [pc, #512]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a79      	ldr	r2, [pc, #484]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003750:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fd fd15 	bl	8001180 <HAL_GetTick>
 8003756:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e008      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7fd fd11 	bl	8001180 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b64      	cmp	r3, #100	@ 0x64
 8003766:	d901      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0db      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	4b70      	ldr	r3, [pc, #448]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003778:	4b6c      	ldr	r3, [pc, #432]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003780:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d07d      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003792:	429a      	cmp	r2, r3
 8003794:	d076      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003796:	4b65      	ldr	r3, [pc, #404]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	461a      	mov	r2, r3
 80037c0:	2301      	movs	r3, #1
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	4b55      	ldr	r3, [pc, #340]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	461a      	mov	r2, r3
 80037e4:	2300      	movs	r3, #0
 80037e6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037e8:	4a50      	ldr	r2, [pc, #320]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d045      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fd fcc2 	bl	8001180 <HAL_GetTick>
 80037fc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fd fcbe 	bl	8001180 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e086      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003816:	2302      	movs	r3, #2
 8003818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
 8003822:	2302      	movs	r3, #2
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	61fb      	str	r3, [r7, #28]
  return result;
 800382e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d102      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003844:	4b39      	ldr	r3, [pc, #228]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	e007      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b35      	ldr	r3, [pc, #212]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	2202      	movs	r2, #2
 800385c:	613a      	str	r2, [r7, #16]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	fa92 f2a2 	rbit	r2, r2
 8003864:	60fa      	str	r2, [r7, #12]
  return result;
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	fab2 f282 	clz	r2, r2
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f002 021f 	and.w	r2, r2, #31
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0bd      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003884:	4b29      	ldr	r3, [pc, #164]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4926      	ldr	r1, [pc, #152]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003896:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b23      	ldr	r3, [pc, #140]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4a22      	ldr	r2, [pc, #136]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	491a      	ldr	r1, [pc, #104]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d4:	4b15      	ldr	r3, [pc, #84]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	f023 0210 	bic.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4912      	ldr	r1, [pc, #72]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038f2:	4b0e      	ldr	r3, [pc, #56]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	490b      	ldr	r1, [pc, #44]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003900:	4313      	orrs	r3, r2
 8003902:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4903      	ldr	r1, [pc, #12]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391e:	4313      	orrs	r3, r2
 8003920:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3748      	adds	r7, #72	@ 0x48
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
 8003934:	10908100 	.word	0x10908100

08003938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e049      	b.n	80039de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fa32 	bl	8000dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 f94a 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0ff      	b.n	8003c06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b14      	cmp	r3, #20
 8003a12:	f200 80f0 	bhi.w	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a16:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	08003bf7 	.word	0x08003bf7
 8003a24:	08003bf7 	.word	0x08003bf7
 8003a28:	08003bf7 	.word	0x08003bf7
 8003a2c:	08003ab1 	.word	0x08003ab1
 8003a30:	08003bf7 	.word	0x08003bf7
 8003a34:	08003bf7 	.word	0x08003bf7
 8003a38:	08003bf7 	.word	0x08003bf7
 8003a3c:	08003af3 	.word	0x08003af3
 8003a40:	08003bf7 	.word	0x08003bf7
 8003a44:	08003bf7 	.word	0x08003bf7
 8003a48:	08003bf7 	.word	0x08003bf7
 8003a4c:	08003b33 	.word	0x08003b33
 8003a50:	08003bf7 	.word	0x08003bf7
 8003a54:	08003bf7 	.word	0x08003bf7
 8003a58:	08003bf7 	.word	0x08003bf7
 8003a5c:	08003b75 	.word	0x08003b75
 8003a60:	08003bf7 	.word	0x08003bf7
 8003a64:	08003bf7 	.word	0x08003bf7
 8003a68:	08003bf7 	.word	0x08003bf7
 8003a6c:	08003bb5 	.word	0x08003bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f942 	bl	8003d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0208 	orr.w	r2, r2, #8
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0204 	bic.w	r2, r2, #4
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	619a      	str	r2, [r3, #24]
      break;
 8003aae:	e0a5      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f9a8 	bl	8003e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6999      	ldr	r1, [r3, #24]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	021a      	lsls	r2, r3, #8
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	619a      	str	r2, [r3, #24]
      break;
 8003af0:	e084      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fa07 	bl	8003f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0208 	orr.w	r2, r2, #8
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0204 	bic.w	r2, r2, #4
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	61da      	str	r2, [r3, #28]
      break;
 8003b30:	e064      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fa65 	bl	8004008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	61da      	str	r2, [r3, #28]
      break;
 8003b72:	e043      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 faa8 	bl	80040d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0208 	orr.w	r2, r2, #8
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0204 	bic.w	r2, r2, #4
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bb2:	e023      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fae6 	bl	800418c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bf4:	e002      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop

08003c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a32      	ldr	r2, [pc, #200]	@ (8003cec <TIM_Base_SetConfig+0xdc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_Base_SetConfig+0x28>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0x28>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <TIM_Base_SetConfig+0xdc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c58:	d00f      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <TIM_Base_SetConfig+0xe4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <TIM_Base_SetConfig+0xe8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <TIM_Base_SetConfig+0xec>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d108      	bne.n	8003c8c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cec <TIM_Base_SetConfig+0xdc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0xc0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf4 <TIM_Base_SetConfig+0xe4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0xc0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <TIM_Base_SetConfig+0xe8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0xc0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <TIM_Base_SetConfig+0xec>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d103      	bne.n	8003cd8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0201 	bic.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 0302 	bic.w	r3, r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a28      	ldr	r2, [pc, #160]	@ (8003dfc <TIM_OC1_SetConfig+0xfc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_OC1_SetConfig+0x78>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <TIM_OC1_SetConfig+0x100>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <TIM_OC1_SetConfig+0x78>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <TIM_OC1_SetConfig+0x104>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_OC1_SetConfig+0x78>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a25      	ldr	r2, [pc, #148]	@ (8003e08 <TIM_OC1_SetConfig+0x108>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10c      	bne.n	8003d92 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0308 	bic.w	r3, r3, #8
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a19      	ldr	r2, [pc, #100]	@ (8003dfc <TIM_OC1_SetConfig+0xfc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_OC1_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <TIM_OC1_SetConfig+0x100>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_OC1_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a17      	ldr	r2, [pc, #92]	@ (8003e04 <TIM_OC1_SetConfig+0x104>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_OC1_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a16      	ldr	r2, [pc, #88]	@ (8003e08 <TIM_OC1_SetConfig+0x108>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800

08003e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f023 0210 	bic.w	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0320 	bic.w	r3, r3, #32
 8003e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a24      	ldr	r2, [pc, #144]	@ (8003efc <TIM_OC2_SetConfig+0xf0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10d      	bne.n	8003e8c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003efc <TIM_OC2_SetConfig+0xf0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_OC2_SetConfig+0xa0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <TIM_OC2_SetConfig+0xf4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC2_SetConfig+0xa0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <TIM_OC2_SetConfig+0xf8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0xa0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	@ (8003f08 <TIM_OC2_SetConfig+0xfc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a23      	ldr	r2, [pc, #140]	@ (8003ff8 <TIM_OC3_SetConfig+0xec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10d      	bne.n	8003f8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <TIM_OC3_SetConfig+0xec>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_OC3_SetConfig+0x9e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <TIM_OC3_SetConfig+0xf0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_OC3_SetConfig+0x9e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <TIM_OC3_SetConfig+0xf4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_OC3_SetConfig+0x9e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <TIM_OC3_SetConfig+0xf8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d113      	bne.n	8003fd2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800

08004008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	031b      	lsls	r3, r3, #12
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <TIM_OC4_SetConfig+0xb8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00b      	beq.n	8004084 <TIM_OC4_SetConfig+0x7c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <TIM_OC4_SetConfig+0xbc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d007      	beq.n	8004084 <TIM_OC4_SetConfig+0x7c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a14      	ldr	r2, [pc, #80]	@ (80040c8 <TIM_OC4_SetConfig+0xc0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC4_SetConfig+0x7c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <TIM_OC4_SetConfig+0xc4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d109      	bne.n	8004098 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800408a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800

080040d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a15      	ldr	r2, [pc, #84]	@ (800417c <TIM_OC5_SetConfig+0xac>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00b      	beq.n	8004142 <TIM_OC5_SetConfig+0x72>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a14      	ldr	r2, [pc, #80]	@ (8004180 <TIM_OC5_SetConfig+0xb0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <TIM_OC5_SetConfig+0x72>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a13      	ldr	r2, [pc, #76]	@ (8004184 <TIM_OC5_SetConfig+0xb4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_OC5_SetConfig+0x72>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <TIM_OC5_SetConfig+0xb8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d109      	bne.n	8004156 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800

0800418c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	051b      	lsls	r3, r3, #20
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a16      	ldr	r2, [pc, #88]	@ (800423c <TIM_OC6_SetConfig+0xb0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_OC6_SetConfig+0x74>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <TIM_OC6_SetConfig+0xb4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_OC6_SetConfig+0x74>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a14      	ldr	r2, [pc, #80]	@ (8004244 <TIM_OC6_SetConfig+0xb8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC6_SetConfig+0x74>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a13      	ldr	r2, [pc, #76]	@ (8004248 <TIM_OC6_SetConfig+0xbc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d109      	bne.n	8004214 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40014000 	.word	0x40014000
 8004244:	40014400 	.word	0x40014400
 8004248:	40014800 	.word	0x40014800

0800424c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e054      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a24      	ldr	r2, [pc, #144]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004294:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a17      	ldr	r2, [pc, #92]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a13      	ldr	r2, [pc, #76]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004340:	2302      	movs	r3, #2
 8004342:	e060      	b.n	8004406 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d115      	bne.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	051b      	lsls	r3, r3, #20
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00

08004418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e040      	b.n	80044ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fd1c 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	@ 0x24
 8004444:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fbfc 	bl	8004c54 <UART_SetConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e022      	b.n	80044ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fd26 	bl	8004ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fdad 	bl	8005004 <UART_CheckIdleState>
 80044aa:	4603      	mov	r3, r0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	@ 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d165      	bne.n	8004596 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_UART_Transmit_DMA+0x22>
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e05e      	b.n	8004598 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	@ 0x21
 80044fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	2b00      	cmp	r3, #0
 8004504:	d027      	beq.n	8004556 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a25      	ldr	r2, [pc, #148]	@ (80045a0 <HAL_UART_Transmit_DMA+0xec>)
 800450c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004512:	4a24      	ldr	r2, [pc, #144]	@ (80045a4 <HAL_UART_Transmit_DMA+0xf0>)
 8004514:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	4a23      	ldr	r2, [pc, #140]	@ (80045a8 <HAL_UART_Transmit_DMA+0xf4>)
 800451c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004522:	2200      	movs	r2, #0
 8004524:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452e:	4619      	mov	r1, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3328      	adds	r3, #40	@ 0x28
 8004536:	461a      	mov	r2, r3
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	f7fd faf7 	bl	8001b2c <HAL_DMA_Start_IT>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2210      	movs	r2, #16
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e020      	b.n	8004598 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2240      	movs	r2, #64	@ 0x40
 800455c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	613b      	str	r3, [r7, #16]
   return(result);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3308      	adds	r3, #8
 800457c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457e:	623a      	str	r2, [r7, #32]
 8004580:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	69f9      	ldr	r1, [r7, #28]
 8004584:	6a3a      	ldr	r2, [r7, #32]
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	61bb      	str	r3, [r7, #24]
   return(result);
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e000      	b.n	8004598 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3728      	adds	r7, #40	@ 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08005479 	.word	0x08005479
 80045a4:	0800550d 	.word	0x0800550d
 80045a8:	0800568d 	.word	0x0800568d

080045ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d132      	bne.n	800462a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_UART_Receive_DMA+0x24>
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e02b      	b.n	800462c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d018      	beq.n	800461a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	613b      	str	r3, [r7, #16]
   return(result);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	69f9      	ldr	r1, [r7, #28]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	61bb      	str	r3, [r7, #24]
   return(result);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e6      	bne.n	80045e8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fdff 	bl	8005224 <UART_Start_Receive_DMA>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	@ 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0ba      	sub	sp, #232	@ 0xe8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800465a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800465e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004662:	4013      	ands	r3, r2
 8004664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d115      	bne.n	800469c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00f      	beq.n	800469c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 82ab 	beq.w	8004be8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
      }
      return;
 800469a:	e2a5      	b.n	8004be8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800469c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8117 	beq.w	80048d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046b6:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_UART_IRQHandler+0x298>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 810a 	beq.w	80048d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d011      	beq.n	80046f0 <HAL_UART_IRQHandler+0xbc>
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d011      	beq.n	8004720 <HAL_UART_IRQHandler+0xec>
 80046fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00b      	beq.n	8004720 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2202      	movs	r2, #2
 800470e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d011      	beq.n	8004750 <HAL_UART_IRQHandler+0x11c>
 800472c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2204      	movs	r2, #4
 800473e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004746:	f043 0202 	orr.w	r2, r3, #2
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d017      	beq.n	800478c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800476c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2208      	movs	r2, #8
 800477a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004782:	f043 0208 	orr.w	r2, r3, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004794:	2b00      	cmp	r3, #0
 8004796:	d012      	beq.n	80047be <HAL_UART_IRQHandler+0x18a>
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8211 	beq.w	8004bec <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00d      	beq.n	80047f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004806:	2b40      	cmp	r3, #64	@ 0x40
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800480a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800480e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04f      	beq.n	80048b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fdca 	bl	80053b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004826:	2b40      	cmp	r3, #64	@ 0x40
 8004828:	d141      	bne.n	80048ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800485a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800486e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1d9      	bne.n	800482a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487a:	2b00      	cmp	r3, #0
 800487c:	d013      	beq.n	80048a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004882:	4a13      	ldr	r2, [pc, #76]	@ (80048d0 <HAL_UART_IRQHandler+0x29c>)
 8004884:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488a:	4618      	mov	r0, r3
 800488c:	f7fd f9e6 	bl	8001c5c <HAL_DMA_Abort_IT>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d017      	beq.n	80048c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048a0:	4610      	mov	r0, r2
 80048a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	e00f      	b.n	80048c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f9be 	bl	8004c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e00b      	b.n	80048c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9ba 	bl	8004c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e007      	b.n	80048c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9b6 	bl	8004c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048c4:	e192      	b.n	8004bec <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c6:	bf00      	nop
    return;
 80048c8:	e190      	b.n	8004bec <HAL_UART_IRQHandler+0x5b8>
 80048ca:	bf00      	nop
 80048cc:	04000120 	.word	0x04000120
 80048d0:	0800570b 	.word	0x0800570b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d8:	2b01      	cmp	r3, #1
 80048da:	f040 814b 	bne.w	8004b74 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8144 	beq.w	8004b74 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 813d 	beq.w	8004b74 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2210      	movs	r2, #16
 8004900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	f040 80b5 	bne.w	8004a7c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800491e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8164 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800492e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004932:	429a      	cmp	r2, r3
 8004934:	f080 815c 	bcs.w	8004bf0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800493e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b20      	cmp	r3, #32
 800494a:	f000 8086 	beq.w	8004a5a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800496a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004978:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800497c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004984:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1da      	bne.n	800494e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3308      	adds	r3, #8
 80049b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e1      	bne.n	8004998 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e3      	bne.n	80049d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a2a:	f023 0310 	bic.w	r3, r3, #16
 8004a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a3e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e4      	bne.n	8004a1a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd f8c8 	bl	8001bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8e1 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a7a:	e0b9      	b.n	8004bf0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80ab 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80a6 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004acc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ad0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e4      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	623b      	str	r3, [r7, #32]
   return(result);
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e3      	bne.n	8004ade <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0310 	bic.w	r3, r3, #16
 8004b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e4      	bne.n	8004b2a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f865 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b72:	e03f      	b.n	8004bf4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <HAL_UART_IRQHandler+0x56a>
 8004b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fdf7 	bl	800578a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b9c:	e02d      	b.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00e      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01c      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
    }
    return;
 8004bc6:	e017      	b.n	8004bf8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d012      	beq.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
 8004bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00c      	beq.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fda8 	bl	8005736 <UART_EndTransmit_IT>
    return;
 8004be6:	e008      	b.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8004be8:	bf00      	nop
 8004bea:	e006      	b.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
    return;
 8004bec:	bf00      	nop
 8004bee:	e004      	b.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bf0:	bf00      	nop
 8004bf2:	e002      	b.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_IRQHandler+0x5c6>
    return;
 8004bf8:	bf00      	nop
  }

}
 8004bfa:	37e8      	adds	r7, #232	@ 0xe8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8004ea8 <UART_SetConfig+0x254>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a78      	ldr	r2, [pc, #480]	@ (8004eac <UART_SetConfig+0x258>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <UART_SetConfig+0xbe>
 8004cd0:	4b77      	ldr	r3, [pc, #476]	@ (8004eb0 <UART_SetConfig+0x25c>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d817      	bhi.n	8004d0c <UART_SetConfig+0xb8>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <UART_SetConfig+0x90>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d01 	.word	0x08004d01
 8004cec:	08004d07 	.word	0x08004d07
 8004cf0:	08004cfb 	.word	0x08004cfb
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e01d      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e01a      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004d00:	2304      	movs	r3, #4
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e017      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004d06:	2308      	movs	r3, #8
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e014      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e011      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a67      	ldr	r2, [pc, #412]	@ (8004eb4 <UART_SetConfig+0x260>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d102      	bne.n	8004d22 <UART_SetConfig+0xce>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e009      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a64      	ldr	r2, [pc, #400]	@ (8004eb8 <UART_SetConfig+0x264>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d102      	bne.n	8004d32 <UART_SetConfig+0xde>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e001      	b.n	8004d36 <UART_SetConfig+0xe2>
 8004d32:	2310      	movs	r3, #16
 8004d34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d3e:	d15a      	bne.n	8004df6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d827      	bhi.n	8004d96 <UART_SetConfig+0x142>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <UART_SetConfig+0xf8>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d81 	.word	0x08004d81
 8004d58:	08004d97 	.word	0x08004d97
 8004d5c:	08004d87 	.word	0x08004d87
 8004d60:	08004d97 	.word	0x08004d97
 8004d64:	08004d97 	.word	0x08004d97
 8004d68:	08004d97 	.word	0x08004d97
 8004d6c:	08004d8f 	.word	0x08004d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d70:	f7fe fc78 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004d74:	61b8      	str	r0, [r7, #24]
        break;
 8004d76:	e013      	b.n	8004da0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d78:	f7fe fc96 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8004d7c:	61b8      	str	r0, [r7, #24]
        break;
 8004d7e:	e00f      	b.n	8004da0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d80:	4b4e      	ldr	r3, [pc, #312]	@ (8004ebc <UART_SetConfig+0x268>)
 8004d82:	61bb      	str	r3, [r7, #24]
        break;
 8004d84:	e00c      	b.n	8004da0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d86:	f7fe fbf7 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8004d8a:	61b8      	str	r0, [r7, #24]
        break;
 8004d8c:	e008      	b.n	8004da0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d92:	61bb      	str	r3, [r7, #24]
        break;
 8004d94:	e004      	b.n	8004da0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d074      	beq.n	8004e90 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	005a      	lsls	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	d916      	bls.n	8004df0 <UART_SetConfig+0x19c>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc8:	d212      	bcs.n	8004df0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f023 030f 	bic.w	r3, r3, #15
 8004dd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	89fb      	ldrh	r3, [r7, #14]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	89fa      	ldrh	r2, [r7, #14]
 8004dec:	60da      	str	r2, [r3, #12]
 8004dee:	e04f      	b.n	8004e90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	77bb      	strb	r3, [r7, #30]
 8004df4:	e04c      	b.n	8004e90 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df6:	7ffb      	ldrb	r3, [r7, #31]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x1fa>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <UART_SetConfig+0x1b0>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe fc1c 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	61b8      	str	r0, [r7, #24]
        break;
 8004e2e:	e013      	b.n	8004e58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fe fc3a 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8004e34:	61b8      	str	r0, [r7, #24]
        break;
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <UART_SetConfig+0x268>)
 8004e3a:	61bb      	str	r3, [r7, #24]
        break;
 8004e3c:	e00c      	b.n	8004e58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe fb9b 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8004e42:	61b8      	str	r0, [r7, #24]
        break;
 8004e44:	e008      	b.n	8004e58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e004      	b.n	8004e58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	77bb      	strb	r3, [r7, #30]
        break;
 8004e56:	bf00      	nop
    }

    if (pclk != 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085a      	lsrs	r2, r3, #1
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d909      	bls.n	8004e8c <UART_SetConfig+0x238>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7e:	d205      	bcs.n	8004e8c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	e001      	b.n	8004e90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	efff69f3 	.word	0xefff69f3
 8004eac:	40013800 	.word	0x40013800
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40004400 	.word	0x40004400
 8004eb8:	40004800 	.word	0x40004800
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fbe:	d10a      	bne.n	8004fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b098      	sub	sp, #96	@ 0x60
 8005008:	af02      	add	r7, sp, #8
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005014:	f7fc f8b4 	bl	8001180 <HAL_GetTick>
 8005018:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d12e      	bne.n	8005086 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f88c 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d021      	beq.n	8005086 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005056:	653b      	str	r3, [r7, #80]	@ 0x50
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005060:	647b      	str	r3, [r7, #68]	@ 0x44
 8005062:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800506e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e6      	bne.n	8005042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e062      	b.n	800514c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d149      	bne.n	8005128 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509c:	2200      	movs	r2, #0
 800509e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f856 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d03c      	beq.n	8005128 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	623b      	str	r3, [r7, #32]
   return(result);
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3308      	adds	r3, #8
 80050fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005100:	61fa      	str	r2, [r7, #28]
 8005102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	69b9      	ldr	r1, [r7, #24]
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	617b      	str	r3, [r7, #20]
   return(result);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e011      	b.n	800514c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3758      	adds	r7, #88	@ 0x58
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e049      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800516c:	d045      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fc f807 	bl	8001180 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e048      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d031      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d110      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2208      	movs	r2, #8
 80051aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f8ff 	bl	80053b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2208      	movs	r2, #8
 80051b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e029      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d4:	d111      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f8e5 	bl	80053b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e00f      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d0a6      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b096      	sub	sp, #88	@ 0x58
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	88fa      	ldrh	r2, [r7, #6]
 800523c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2222      	movs	r2, #34	@ 0x22
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005254:	2b00      	cmp	r3, #0
 8005256:	d028      	beq.n	80052aa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525c:	4a3e      	ldr	r2, [pc, #248]	@ (8005358 <UART_Start_Receive_DMA+0x134>)
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005264:	4a3d      	ldr	r2, [pc, #244]	@ (800535c <UART_Start_Receive_DMA+0x138>)
 8005266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526c:	4a3c      	ldr	r2, [pc, #240]	@ (8005360 <UART_Start_Receive_DMA+0x13c>)
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005274:	2200      	movs	r2, #0
 8005276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3324      	adds	r3, #36	@ 0x24
 8005282:	4619      	mov	r1, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	461a      	mov	r2, r3
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	f7fc fc4e 	bl	8001b2c <HAL_DMA_Start_IT>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2210      	movs	r2, #16
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e051      	b.n	800534e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3308      	adds	r3, #8
 8005302:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005304:	637a      	str	r2, [r7, #52]	@ 0x34
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800530a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e5      	bne.n	80052e4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	613b      	str	r3, [r7, #16]
   return(result);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005338:	623a      	str	r2, [r7, #32]
 800533a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69f9      	ldr	r1, [r7, #28]
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	61bb      	str	r3, [r7, #24]
   return(result);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3758      	adds	r7, #88	@ 0x58
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08005529 	.word	0x08005529
 800535c:	0800564f 	.word	0x0800564f
 8005360:	0800568d 	.word	0x0800568d

08005364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b089      	sub	sp, #36	@ 0x24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	60bb      	str	r3, [r7, #8]
   return(result);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	613b      	str	r3, [r7, #16]
   return(result);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e6      	bne.n	800536c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80053a4:	bf00      	nop
 80053a6:	3724      	adds	r7, #36	@ 0x24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b095      	sub	sp, #84	@ 0x54
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80053d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005422:	2b01      	cmp	r3, #1
 8005424:	d118      	bne.n	8005458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	60bb      	str	r3, [r7, #8]
   return(result);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f023 0310 	bic.w	r3, r3, #16
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	613b      	str	r3, [r7, #16]
   return(result);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e6      	bne.n	8005426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800546c:	bf00      	nop
 800546e:	3754      	adds	r7, #84	@ 0x54
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b090      	sub	sp, #64	@ 0x40
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b20      	cmp	r3, #32
 800548c:	d037      	beq.n	80054fe <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800548e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005490:	2200      	movs	r2, #0
 8005492:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3308      	adds	r3, #8
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	623b      	str	r3, [r7, #32]
   return(result);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	69b9      	ldr	r1, [r7, #24]
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	617b      	str	r3, [r7, #20]
   return(result);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054fc:	e002      	b.n	8005504 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80054fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005500:	f7fb f8b0 	bl	8000664 <HAL_UART_TxCpltCallback>
}
 8005504:	bf00      	nop
 8005506:	3740      	adds	r7, #64	@ 0x40
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005518:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff fb70 	bl	8004c00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b09c      	sub	sp, #112	@ 0x70
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	2b20      	cmp	r3, #32
 800553c:	d071      	beq.n	8005622 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800553e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005540:	2200      	movs	r2, #0
 8005542:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800555a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800555c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005564:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005566:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800556a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3308      	adds	r3, #8
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005598:	647a      	str	r2, [r7, #68]	@ 0x44
 800559a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800559e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3308      	adds	r3, #8
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	623b      	str	r3, [r7, #32]
   return(result);
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3308      	adds	r3, #8
 80055ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80055ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e2:	2220      	movs	r2, #32
 80055e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d118      	bne.n	8005622 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 0310 	bic.w	r3, r3, #16
 8005604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	69b9      	ldr	r1, [r7, #24]
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	617b      	str	r3, [r7, #20]
   return(result);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e6      	bne.n	80055f0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005624:	2200      	movs	r2, #0
 8005626:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562c:	2b01      	cmp	r3, #1
 800562e:	d107      	bne.n	8005640 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005636:	4619      	mov	r1, r3
 8005638:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800563a:	f7ff faff 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800563e:	e002      	b.n	8005646 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005640:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005642:	f7fb f81f 	bl	8000684 <HAL_UART_RxCpltCallback>
}
 8005646:	bf00      	nop
 8005648:	3770      	adds	r7, #112	@ 0x70
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005666:	2b01      	cmp	r3, #1
 8005668:	d109      	bne.n	800567e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	b29b      	uxth	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fae0 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800567c:	e002      	b.n	8005684 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff fac8 	bl	8004c14 <HAL_UART_RxHalfCpltCallback>
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800569e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d109      	bne.n	80056ca <UART_DMAError+0x3e>
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b21      	cmp	r3, #33	@ 0x21
 80056ba:	d106      	bne.n	80056ca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80056c4:	6978      	ldr	r0, [r7, #20]
 80056c6:	f7ff fe4d 	bl	8005364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d4:	2b40      	cmp	r3, #64	@ 0x40
 80056d6:	d109      	bne.n	80056ec <UART_DMAError+0x60>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b22      	cmp	r3, #34	@ 0x22
 80056dc:	d106      	bne.n	80056ec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80056e6:	6978      	ldr	r0, [r7, #20]
 80056e8:	f7ff fe62 	bl	80053b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f2:	f043 0210 	orr.w	r2, r3, #16
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056fc:	6978      	ldr	r0, [r7, #20]
 80056fe:	f7ff fa93 	bl	8004c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff fa7d 	bl	8004c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b088      	sub	sp, #32
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60bb      	str	r3, [r7, #8]
   return(result);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	613b      	str	r3, [r7, #16]
   return(result);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e6      	bne.n	800573e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fa ff71 	bl	8000664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005782:	bf00      	nop
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <memset>:
 800579e:	4402      	add	r2, r0
 80057a0:	4603      	mov	r3, r0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d100      	bne.n	80057a8 <memset+0xa>
 80057a6:	4770      	bx	lr
 80057a8:	f803 1b01 	strb.w	r1, [r3], #1
 80057ac:	e7f9      	b.n	80057a2 <memset+0x4>
	...

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4d0d      	ldr	r5, [pc, #52]	@ (80057e8 <__libc_init_array+0x38>)
 80057b4:	4c0d      	ldr	r4, [pc, #52]	@ (80057ec <__libc_init_array+0x3c>)
 80057b6:	1b64      	subs	r4, r4, r5
 80057b8:	10a4      	asrs	r4, r4, #2
 80057ba:	2600      	movs	r6, #0
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	4d0b      	ldr	r5, [pc, #44]	@ (80057f0 <__libc_init_array+0x40>)
 80057c2:	4c0c      	ldr	r4, [pc, #48]	@ (80057f4 <__libc_init_array+0x44>)
 80057c4:	f000 f826 	bl	8005814 <_init>
 80057c8:	1b64      	subs	r4, r4, r5
 80057ca:	10a4      	asrs	r4, r4, #2
 80057cc:	2600      	movs	r6, #0
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08005888 	.word	0x08005888
 80057ec:	08005888 	.word	0x08005888
 80057f0:	08005888 	.word	0x08005888
 80057f4:	0800588c 	.word	0x0800588c

080057f8 <memcpy>:
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005800:	d100      	bne.n	8005804 <memcpy+0xc>
 8005802:	4770      	bx	lr
 8005804:	b510      	push	{r4, lr}
 8005806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580e:	4291      	cmp	r1, r2
 8005810:	d1f9      	bne.n	8005806 <memcpy+0xe>
 8005812:	bd10      	pop	{r4, pc}

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
