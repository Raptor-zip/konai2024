
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080053d8  080053d8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053d8  080053d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080053e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000010  080053f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  080053f0  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001192c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e9  00000000  00000000  000319af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b75  00000000  00000000  00034d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002148  00000000  00000000  000358b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118bc  00000000  00000000  000379fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a75be  00000000  00000000  000492b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dd0  00000000  00000000  000f0878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f4648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005364 	.word	0x08005364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005364 	.word	0x08005364

080001c8 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2200      	movs	r2, #0
 80001e0:	639a      	str	r2, [r3, #56]	; 0x38
	ecan->filter.FilterIdLow = 0;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2200      	movs	r2, #0
 80001e6:	63da      	str	r2, [r3, #60]	; 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2200      	movs	r2, #0
 80001ec:	641a      	str	r2, [r3, #64]	; 0x40
	ecan->filter.FilterMaskIdLow = 0;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	2200      	movs	r2, #0
 80001f2:	645a      	str	r2, [r3, #68]	; 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	649a      	str	r2, [r3, #72]	; 0x48

	if (can_nuumber == 1)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d103      	bne.n	8000208 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	64da      	str	r2, [r3, #76]	; 0x4c
 8000206:	e002      	b.n	800020e <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	220e      	movs	r2, #14
 800020c:	64da      	str	r2, [r3, #76]	; 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2200      	movs	r2, #0
 8000212:	651a      	str	r2, [r3, #80]	; 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2201      	movs	r2, #1
 8000218:	655a      	str	r2, [r3, #84]	; 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2201      	movs	r2, #1
 800021e:	659a      	str	r2, [r3, #88]	; 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	220e      	movs	r2, #14
 8000224:	65da      	str	r2, [r3, #92]	; 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3338      	adds	r3, #56	; 0x38
 800022e:	4619      	mov	r1, r3
 8000230:	4610      	mov	r0, r2
 8000232:	f000 fea0 	bl	8000f76 <HAL_CAN_ConfigFilter>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <Easy_CAN6_Start+0x78>
		Error_Handler();
 800023c:	f000 fb2c 	bl	8000898 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f8a8 	bl	800139c <HAL_CAN_ActivateNotification>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 8000252:	f000 fb21 	bl	8000898 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 ff55 	bl	800110a <HAL_CAN_Start>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 8000266:	f001 f9da 	bl	800161e <HAL_NVIC_SystemReset>

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[1], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <HAL_UART_TxCpltCallback+0x1c>)
 800027e:	2220      	movs	r2, #32
 8000280:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200000a0 	.word	0x200000a0

08000294 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <HAL_UART_RxCpltCallback+0x1c>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	200004d8 	.word	0x200004d8

080002b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08e      	sub	sp, #56	; 0x38
 80002b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002ba:	f000 fcd7 	bl	8000c6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002be:	f000 f92b 	bl	8000518 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c2:	f000 fa9f 	bl	8000804 <MX_GPIO_Init>
	MX_DMA_Init();
 80002c6:	f000 fa77 	bl	80007b8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80002ca:	f000 fa45 	bl	8000758 <MX_USART2_UART_Init>
	MX_CAN_Init();
 80002ce:	f000 f97d 	bl	80005cc <MX_CAN_Init>
	MX_TIM1_Init();
 80002d2:	f000 f9b1 	bl	8000638 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 80002d6:	2202      	movs	r2, #2
 80002d8:	497e      	ldr	r1, [pc, #504]	; (80004d4 <main+0x220>)
 80002da:	487f      	ldr	r0, [pc, #508]	; (80004d8 <main+0x224>)
 80002dc:	f7ff ff74 	bl	80001c8 <Easy_CAN6_Start>

	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t TxData[8];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002e0:	487c      	ldr	r0, [pc, #496]	; (80004d4 <main+0x220>)
 80002e2:	f001 f826 	bl	8001332 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d024      	beq.n	8000336 <main+0x82>
	    TxHeader.StdId = 0x1FF;                 // CAN ID
 80002ec:	f240 13ff 	movw	r3, #511	; 0x1ff
 80002f0:	617b      	str	r3, [r7, #20]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 80002f2:	2300      	movs	r3, #0
 80002f4:	623b      	str	r3, [r7, #32]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
	    TxHeader.DLC = 8;                       // データ長は8バイトに
 80002fa:	2308      	movs	r3, #8
 80002fc:	627b      	str	r3, [r7, #36]	; 0x24
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 80002fe:	2300      	movs	r3, #0
 8000300:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	    TxData[0] = 0x61;
 8000304:	2361      	movs	r3, #97	; 0x61
 8000306:	723b      	strb	r3, [r7, #8]
	    TxData[1] = 0xA8; // MIN-2500 MAX25000
 8000308:	23a8      	movs	r3, #168	; 0xa8
 800030a:	727b      	strb	r3, [r7, #9]
	    TxData[2] = 0x00;
 800030c:	2300      	movs	r3, #0
 800030e:	72bb      	strb	r3, [r7, #10]
	    TxData[3] = 0x00;
 8000310:	2300      	movs	r3, #0
 8000312:	72fb      	strb	r3, [r7, #11]
	    TxData[4] = 0x00;
 8000314:	2300      	movs	r3, #0
 8000316:	733b      	strb	r3, [r7, #12]
	    TxData[5] = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	737b      	strb	r3, [r7, #13]
	    TxData[6] = 0x00;
 800031c:	2300      	movs	r3, #0
 800031e:	73bb      	strb	r3, [r7, #14]
	    TxData[7] = 0x00;
 8000320:	2300      	movs	r3, #0
 8000322:	73fb      	strb	r3, [r7, #15]
	    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	f107 0208 	add.w	r2, r7, #8
 800032c:	f107 0114 	add.w	r1, r7, #20
 8000330:	4868      	ldr	r0, [pc, #416]	; (80004d4 <main+0x220>)
 8000332:	f000 ff2e 	bl	8001192 <HAL_CAN_AddTxMessage>
	}

	for (int i = 0; i < 4; i++) {
 8000336:	2300      	movs	r3, #0
 8000338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800033a:	e002      	b.n	8000342 <main+0x8e>
 800033c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800033e:	3301      	adds	r3, #1
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000344:	2b03      	cmp	r3, #3
 8000346:	ddf9      	ble.n	800033c <main+0x88>
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 4.0f);
			CyberGear_EnableMotor(&my_cyber[i]);
		}
	}
	HAL_Delay(100);
 8000348:	2064      	movs	r0, #100	; 0x64
 800034a:	f000 fcf5 	bl	8000d38 <HAL_Delay>

	HAL_UART_Transmit_DMA(&huart2,
 800034e:	2221      	movs	r2, #33	; 0x21
 8000350:	4962      	ldr	r1, [pc, #392]	; (80004dc <main+0x228>)
 8000352:	4863      	ldr	r0, [pc, #396]	; (80004e0 <main+0x22c>)
 8000354:	f003 fe64 	bl	8004020 <HAL_UART_Transmit_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		begin_time = HAL_GetTick();
 8000358:	f000 fce2 	bl	8000d20 <HAL_GetTick>
 800035c:	4603      	mov	r3, r0
 800035e:	4a61      	ldr	r2, [pc, #388]	; (80004e4 <main+0x230>)
 8000360:	6013      	str	r3, [r2, #0]
//		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);

		HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 8000362:	2207      	movs	r2, #7
 8000364:	4960      	ldr	r1, [pc, #384]	; (80004e8 <main+0x234>)
 8000366:	485e      	ldr	r0, [pc, #376]	; (80004e0 <main+0x22c>)
 8000368:	f003 fed6 	bl	8004118 <HAL_UART_Receive_DMA>
//		HAL_UART_Receive(&huart2, rcvBuffer, 7, 1000);

		buf[0] = (unsigned char) rcvBuffer[1];
 800036c:	4b5e      	ldr	r3, [pc, #376]	; (80004e8 <main+0x234>)
 800036e:	785a      	ldrb	r2, [r3, #1]
 8000370:	4b5e      	ldr	r3, [pc, #376]	; (80004ec <main+0x238>)
 8000372:	701a      	strb	r2, [r3, #0]
		buf[1] = (unsigned char) rcvBuffer[2];
 8000374:	4b5c      	ldr	r3, [pc, #368]	; (80004e8 <main+0x234>)
 8000376:	789a      	ldrb	r2, [r3, #2]
 8000378:	4b5c      	ldr	r3, [pc, #368]	; (80004ec <main+0x238>)
 800037a:	705a      	strb	r2, [r3, #1]
		buf[2] = (unsigned char) rcvBuffer[3];
 800037c:	4b5a      	ldr	r3, [pc, #360]	; (80004e8 <main+0x234>)
 800037e:	78da      	ldrb	r2, [r3, #3]
 8000380:	4b5a      	ldr	r3, [pc, #360]	; (80004ec <main+0x238>)
 8000382:	709a      	strb	r2, [r3, #2]
		buf[3] = (unsigned char) rcvBuffer[4];
 8000384:	4b58      	ldr	r3, [pc, #352]	; (80004e8 <main+0x234>)
 8000386:	791a      	ldrb	r2, [r3, #4]
 8000388:	4b58      	ldr	r3, [pc, #352]	; (80004ec <main+0x238>)
 800038a:	70da      	strb	r2, [r3, #3]
		buf[4] = (unsigned char) rcvBuffer[5];
 800038c:	4b56      	ldr	r3, [pc, #344]	; (80004e8 <main+0x234>)
 800038e:	795a      	ldrb	r2, [r3, #5]
 8000390:	4b56      	ldr	r3, [pc, #344]	; (80004ec <main+0x238>)
 8000392:	711a      	strb	r2, [r3, #4]
		buf[5] = (unsigned char) rcvBuffer[6];
 8000394:	4b54      	ldr	r3, [pc, #336]	; (80004e8 <main+0x234>)
 8000396:	799a      	ldrb	r2, [r3, #6]
 8000398:	4b54      	ldr	r3, [pc, #336]	; (80004ec <main+0x238>)
 800039a:	715a      	strb	r2, [r3, #5]
		buf[6] = (unsigned char) rcvBuffer[0];
 800039c:	4b52      	ldr	r3, [pc, #328]	; (80004e8 <main+0x234>)
 800039e:	781a      	ldrb	r2, [r3, #0]
 80003a0:	4b52      	ldr	r3, [pc, #328]	; (80004ec <main+0x238>)
 80003a2:	719a      	strb	r2, [r3, #6]
 80003a4:	4b51      	ldr	r3, [pc, #324]	; (80004ec <main+0x238>)
 80003a6:	781a      	ldrb	r2, [r3, #0]
//			memcpy(buf, &rcvBuffer[1], sizeof(buf));
//		}else{
//			memcpy(buf, &rcvBuffer[0], sizeof(buf));
//		}

		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
 80003a8:	4b51      	ldr	r3, [pc, #324]	; (80004f0 <main+0x23c>)
 80003aa:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[2];
 80003ac:	4b4f      	ldr	r3, [pc, #316]	; (80004ec <main+0x238>)
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	713b      	strb	r3, [r7, #4]
		reversed_bytes[1] = buf[1];
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <main+0x238>)
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	717b      	strb	r3, [r7, #5]
 80003b8:	88ba      	ldrh	r2, [r7, #4]
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 80003ba:	4b4e      	ldr	r3, [pc, #312]	; (80004f4 <main+0x240>)
 80003bc:	801a      	strh	r2, [r3, #0]
 80003be:	4b4b      	ldr	r3, [pc, #300]	; (80004ec <main+0x238>)
 80003c0:	f8d3 3003 	ldr.w	r3, [r3, #3]

		uint8_t _temp_command_content[4];
		memcpy(_temp_command_content, &buf[3], sizeof(float));
 80003c4:	603b      	str	r3, [r7, #0]
		// バイト列を逆順にコピー
		for (int j = 0; j < 4; j++) {
 80003c6:	2300      	movs	r3, #0
 80003c8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ca:	e00e      	b.n	80003ea <main+0x136>
			reversed_bytes[j] = _temp_command_content[3 - j];
 80003cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003ce:	f1c3 0303 	rsb	r3, r3, #3
 80003d2:	3338      	adds	r3, #56	; 0x38
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 80003da:	1d3a      	adds	r2, r7, #4
 80003dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003de:	4413      	add	r3, r2
 80003e0:	460a      	mov	r2, r1
 80003e2:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80003e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003e6:	3301      	adds	r3, #1
 80003e8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	dded      	ble.n	80003cc <main+0x118>
 80003f0:	687b      	ldr	r3, [r7, #4]
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 80003f2:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <main+0x244>)
 80003f4:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

		switch (command_id) {
 80003f6:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <main+0x240>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	3b16      	subs	r3, #22
 80003fc:	2b06      	cmp	r3, #6
 80003fe:	d848      	bhi.n	8000492 <main+0x1de>
 8000400:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <main+0x154>)
 8000402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000406:	bf00      	nop
 8000408:	08000425 	.word	0x08000425
 800040c:	08000493 	.word	0x08000493
 8000410:	08000459 	.word	0x08000459
 8000414:	08000493 	.word	0x08000493
 8000418:	08000463 	.word	0x08000463
 800041c:	0800046d 	.word	0x0800046d
 8000420:	08000489 	.word	0x08000489
		case 22:
			motor_speed[0] = command_content;
 8000424:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <main+0x244>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a34      	ldr	r2, [pc, #208]	; (80004fc <main+0x248>)
 800042a:	6013      	str	r3, [r2, #0]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[0], (float) motor_speed[0]);
			}
			if (motor_speed[0] > 5){
 800042c:	4b33      	ldr	r3, [pc, #204]	; (80004fc <main+0x248>)
 800042e:	edd3 7a00 	vldr	s15, [r3]
 8000432:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800043e:	dd05      	ble.n	800044c <main+0x198>
				HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, 1);
 8000440:	2201      	movs	r2, #1
 8000442:	2108      	movs	r1, #8
 8000444:	482e      	ldr	r0, [pc, #184]	; (8000500 <main+0x24c>)
 8000446:	f001 fc7b 	bl	8001d40 <HAL_GPIO_WritePin>
			}else{
				HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, 0);
			}
			break;
 800044a:	e022      	b.n	8000492 <main+0x1de>
				HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	2108      	movs	r1, #8
 8000450:	482b      	ldr	r0, [pc, #172]	; (8000500 <main+0x24c>)
 8000452:	f001 fc75 	bl	8001d40 <HAL_GPIO_WritePin>
			break;
 8000456:	e01c      	b.n	8000492 <main+0x1de>

		case 24:
			motor_speed[1] = command_content;
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <main+0x244>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a27      	ldr	r2, [pc, #156]	; (80004fc <main+0x248>)
 800045e:	6053      	str	r3, [r2, #4]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[1], (float) motor_speed[1]);
			}
			break;
 8000460:	e017      	b.n	8000492 <main+0x1de>

		case 26:
			motor_speed[2] = command_content;
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <main+0x244>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a25      	ldr	r2, [pc, #148]	; (80004fc <main+0x248>)
 8000468:	6093      	str	r3, [r2, #8]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[2], (float) motor_speed[2]);
			}
			break;
 800046a:	e012      	b.n	8000492 <main+0x1de>

		case 27:
			debug_2 = 1000;
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <main+0x250>)
 800046e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000472:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8000474:	2300      	movs	r3, #0
 8000476:	633b      	str	r3, [r7, #48]	; 0x30
 8000478:	e002      	b.n	8000480 <main+0x1cc>
 800047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800047c:	3301      	adds	r3, #1
 800047e:	633b      	str	r3, [r7, #48]	; 0x30
 8000480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000482:	2b03      	cmp	r3, #3
 8000484:	ddf9      	ble.n	800047a <main+0x1c6>
					CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
					CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 4.0f);
					CyberGear_EnableMotor(&my_cyber[i]);
				}
			}
			break;
 8000486:	e004      	b.n	8000492 <main+0x1de>

		case 28:
			motor_speed[3] = command_content;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <main+0x244>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <main+0x248>)
 800048e:	60d3      	str	r3, [r2, #12]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[3], (float) motor_speed[3]);
			}
			break;
 8000490:	bf00      	nop
		}

		CyberGear_pos[0] = my_cyber[0].cyberfeedback.feedback_pos;
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <main+0x254>)
 8000494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000496:	4a1d      	ldr	r2, [pc, #116]	; (800050c <main+0x258>)
 8000498:	6013      	str	r3, [r2, #0]
		CyberGear_pos[1] = my_cyber[1].cyberfeedback.feedback_pos;
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <main+0x254>)
 800049c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80004a0:	4a1a      	ldr	r2, [pc, #104]	; (800050c <main+0x258>)
 80004a2:	6053      	str	r3, [r2, #4]
		CyberGear_pos[2] = my_cyber[2].cyberfeedback.feedback_pos;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <main+0x254>)
 80004a6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <main+0x258>)
 80004ac:	6093      	str	r3, [r2, #8]
		CyberGear_pos[3] = my_cyber[3].cyberfeedback.feedback_pos;
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <main+0x254>)
 80004b0:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <main+0x258>)
 80004b6:	60d3      	str	r3, [r2, #12]

//		HAL_Delay(1);

		end_time = HAL_GetTick();
 80004b8:	f000 fc32 	bl	8000d20 <HAL_GetTick>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a14      	ldr	r2, [pc, #80]	; (8000510 <main+0x25c>)
 80004c0:	6013      	str	r3, [r2, #0]
		cycle_time = end_time - begin_time;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <main+0x25c>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <main+0x230>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <main+0x260>)
 80004ce:	6013      	str	r3, [r2, #0]
	while (1) {
 80004d0:	e742      	b.n	8000358 <main+0xa4>
 80004d2:	bf00      	nop
 80004d4:	2000002c 	.word	0x2000002c
 80004d8:	20000470 	.word	0x20000470
 80004dc:	0800537c 	.word	0x0800537c
 80004e0:	200000a0 	.word	0x200000a0
 80004e4:	20000520 	.word	0x20000520
 80004e8:	200004dc 	.word	0x200004dc
 80004ec:	2000050c 	.word	0x2000050c
 80004f0:	2000052c 	.word	0x2000052c
 80004f4:	2000052e 	.word	0x2000052e
 80004f8:	20000530 	.word	0x20000530
 80004fc:	200004fc 	.word	0x200004fc
 8000500:	48000400 	.word	0x48000400
 8000504:	20000000 	.word	0x20000000
 8000508:	200001b0 	.word	0x200001b0
 800050c:	20000534 	.word	0x20000534
 8000510:	20000524 	.word	0x20000524
 8000514:	20000528 	.word	0x20000528

08000518 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800051e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 feef 	bl	800530a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000560:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000564:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fc00 	bl	8001d70 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x62>
		Error_Handler();
 8000576:	f000 f98f 	bl	8000898 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000590:	f107 031c 	add.w	r3, r7, #28
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fc28 	bl	8002dec <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x8e>
		Error_Handler();
 80005a2:	f000 f979 	bl	8000898 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fe50 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xaa>
		Error_Handler();
 80005be:	f000 f96b 	bl	8000898 <Error_Handler>
	}
}
 80005c2:	bf00      	nop
 80005c4:	3758      	adds	r7, #88	; 0x58
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_CAN_Init+0x64>)
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <MX_CAN_Init+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_CAN_Init+0x64>)
 80005d8:	2202      	movs	r2, #2
 80005da:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_CAN_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_CAN_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_CAN_Init+0x64>)
 80005ea:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80005ee:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_CAN_Init+0x64>)
 80005f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005f6:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_CAN_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_CAN_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_CAN_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_CAN_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_CAN_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_CAN_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_CAN_Init+0x64>)
 800061e:	f000 fbaf 	bl	8000d80 <HAL_CAN_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_CAN_Init+0x60>
		Error_Handler();
 8000628:	f000 f936 	bl	8000898 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000002c 	.word	0x2000002c
 8000634:	40006400 	.word	0x40006400

08000638 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800063e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800064a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	222c      	movs	r2, #44	; 0x2c
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fe50 	bl	800530a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800066a:	4b39      	ldr	r3, [pc, #228]	; (8000750 <MX_TIM1_Init+0x118>)
 800066c:	4a39      	ldr	r2, [pc, #228]	; (8000754 <MX_TIM1_Init+0x11c>)
 800066e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000670:	4b37      	ldr	r3, [pc, #220]	; (8000750 <MX_TIM1_Init+0x118>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b36      	ldr	r3, [pc, #216]	; (8000750 <MX_TIM1_Init+0x118>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_TIM1_Init+0x118>)
 800067e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000682:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000684:	4b32      	ldr	r3, [pc, #200]	; (8000750 <MX_TIM1_Init+0x118>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <MX_TIM1_Init+0x118>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <MX_TIM1_Init+0x118>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000696:	482e      	ldr	r0, [pc, #184]	; (8000750 <MX_TIM1_Init+0x118>)
 8000698:	f002 ff04 	bl	80034a4 <HAL_TIM_PWM_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0x6e>
		Error_Handler();
 80006a2:	f000 f8f9 	bl	8000898 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b6:	4619      	mov	r1, r3
 80006b8:	4825      	ldr	r0, [pc, #148]	; (8000750 <MX_TIM1_Init+0x118>)
 80006ba:	f003 fb7d 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80006c4:	f000 f8e8 	bl	8000898 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80006e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e8:	2200      	movs	r2, #0
 80006ea:	4619      	mov	r1, r3
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <MX_TIM1_Init+0x118>)
 80006ee:	f002 ff31 	bl	8003554 <HAL_TIM_PWM_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80006f8:	f000 f8ce 	bl	8000898 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_TIM1_Init+0x118>)
 8000732:	f003 fbaf 	bl	8003e94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 800073c:	f000 f8ac 	bl	8000898 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM1_Init+0x118>)
 8000742:	f000 f937 	bl	80009b4 <HAL_TIM_MspPostInit>
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000054 	.word	0x20000054
 8000754:	40012c00 	.word	0x40012c00

08000758 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART2_UART_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x54>)
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000766:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART2_UART_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_USART2_UART_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x54>)
 800077c:	220c      	movs	r2, #12
 800077e:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_USART2_UART_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_USART2_UART_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_USART2_UART_Init+0x54>)
 800079a:	f003 fbf3 	bl	8003f84 <HAL_UART_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x50>
		Error_Handler();
 80007a4:	f000 f878 	bl	8000898 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000a0 	.word	0x200000a0
 80007b0:	40004400 	.word	0x40004400
 80007b4:	0007a120 	.word	0x0007a120

080007b8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x48>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DMA_Init+0x48>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x48>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2010      	movs	r0, #16
 80007dc:	f000 fef5 	bl	80015ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007e0:	2010      	movs	r0, #16
 80007e2:	f000 ff0e 	bl	8001602 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2011      	movs	r0, #17
 80007ec:	f000 feed 	bl	80015ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007f0:	2011      	movs	r0, #17
 80007f2:	f000 ff06 	bl	8001602 <HAL_NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_GPIO_Init+0x8c>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_GPIO_Init+0x8c>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_GPIO_Init+0x8c>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x90>)
 8000868:	f001 fa6a 	bl	8001d40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 800086c:	2308      	movs	r3, #8
 800086e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0x90>)
 8000884:	f001 f8ea 	bl	8001a5c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_CAN_MspInit+0x80>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d129      	bne.n	8000962 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_CAN_MspInit+0x84>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_CAN_MspInit+0x84>)
 8000914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_CAN_MspInit+0x84>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_CAN_MspInit+0x84>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_CAN_MspInit+0x84>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_CAN_MspInit+0x84>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800093e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000950:	2309      	movs	r3, #9
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f001 f87d 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40006400 	.word	0x40006400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_TIM_PWM_MspInit+0x38>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d10b      	bne.n	800099e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800098c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d11d      	bne.n	8000a12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_TIM_MspPostInit+0x6c>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_TIM_MspPostInit+0x6c>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	6153      	str	r3, [r2, #20]
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_TIM_MspPostInit+0x6c>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a00:	2306      	movs	r3, #6
 8000a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f001 f825 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <HAL_UART_MspInit+0x128>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d17d      	bne.n	8000b42 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a46:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <HAL_UART_MspInit+0x12c>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a41      	ldr	r2, [pc, #260]	; (8000b50 <HAL_UART_MspInit+0x12c>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <HAL_UART_MspInit+0x12c>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <HAL_UART_MspInit+0x12c>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a3b      	ldr	r2, [pc, #236]	; (8000b50 <HAL_UART_MspInit+0x12c>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_UART_MspInit+0x12c>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a76:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 ffe1 	bl	8001a5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000a9c:	4a2e      	ldr	r2, [pc, #184]	; (8000b58 <HAL_UART_MspInit+0x134>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000aca:	4822      	ldr	r0, [pc, #136]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000acc:	f000 fdb7 	bl	800163e <HAL_DMA_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000ad6:	f7ff fedf 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000ade:	671a      	str	r2, [r3, #112]	; 0x70
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <HAL_UART_MspInit+0x130>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_UART_MspInit+0x13c>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b18:	f000 fd91 	bl	800163e <HAL_DMA_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000b22:	f7ff feb9 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b2a:	675a      	str	r2, [r3, #116]	; 0x74
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_UART_MspInit+0x138>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2026      	movs	r0, #38	; 0x26
 8000b38:	f000 fd47 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b3c:	2026      	movs	r0, #38	; 0x26
 8000b3e:	f000 fd60 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40021000 	.word	0x40021000
 8000b54:	20000128 	.word	0x20000128
 8000b58:	40020080 	.word	0x40020080
 8000b5c:	2000016c 	.word	0x2000016c
 8000b60:	4002006c 	.word	0x4002006c

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8a2 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <DMA1_Channel6_IRQHandler+0x10>)
 8000bbe:	f000 fe5b 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000016c 	.word	0x2000016c

08000bcc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA1_Channel7_IRQHandler+0x10>)
 8000bd2:	f000 fe51 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000128 	.word	0x20000128

08000be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART2_IRQHandler+0x10>)
 8000be6:	f003 fadb 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000a0 	.word	0x200000a0

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f004 fb69 	bl	800531c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fb33 	bl	80002b4 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c50:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c5c:	080053e0 	.word	0x080053e0
  ldr r2, =_sbss
 8000c60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c64:	20000548 	.word	0x20000548

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 fc99 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe0c 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fcb5 	bl	8001626 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f000 fc79 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	2000000c 	.word	0x2000000c
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000544 	.word	0x20000544

08000d20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000544 	.word	0x20000544

08000d38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c

08000d80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e0ed      	b.n	8000f6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fda4 	bl	80008ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db4:	f7ff ffb4 	bl	8000d20 <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dba:	e012      	b.n	8000de2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dbc:	f7ff ffb0 	bl	8000d20 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b0a      	cmp	r3, #10
 8000dc8:	d90b      	bls.n	8000de2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2205      	movs	r2, #5
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0c5      	b.n	8000f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0e5      	beq.n	8000dbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0202 	bic.w	r2, r2, #2
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e00:	f7ff ff8e 	bl	8000d20 <HAL_GetTick>
 8000e04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e06:	e012      	b.n	8000e2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e08:	f7ff ff8a 	bl	8000d20 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	d90b      	bls.n	8000e2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2205      	movs	r2, #5
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e09f      	b.n	8000f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e5      	bne.n	8000e08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7e1b      	ldrb	r3, [r3, #24]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d108      	bne.n	8000e56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7e5b      	ldrb	r3, [r3, #25]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7e9b      	ldrb	r3, [r3, #26]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0220 	bic.w	r2, r2, #32
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7edb      	ldrb	r3, [r3, #27]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0210 	bic.w	r2, r2, #16
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0210 	orr.w	r2, r2, #16
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7f1b      	ldrb	r3, [r3, #28]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0208 	bic.w	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7f5b      	ldrb	r3, [r3, #29]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d108      	bne.n	8000f28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0204 	orr.w	r2, r2, #4
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	ea42 0103 	orr.w	r1, r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b087      	sub	sp, #28
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f8e:	7cfb      	ldrb	r3, [r7, #19]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d003      	beq.n	8000f9c <HAL_CAN_ConfigFilter+0x26>
 8000f94:	7cfb      	ldrb	r3, [r7, #19]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	f040 80aa 	bne.w	80010f0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d123      	bne.n	800101e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ff8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3248      	adds	r2, #72	; 0x48
 8000ffe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001012:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001014:	6979      	ldr	r1, [r7, #20]
 8001016:	3348      	adds	r3, #72	; 0x48
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d122      	bne.n	800106c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	431a      	orrs	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001046:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3248      	adds	r2, #72	; 0x48
 800104c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001060:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001062:	6979      	ldr	r1, [r7, #20]
 8001064:	3348      	adds	r3, #72	; 0x48
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d109      	bne.n	8001088 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001086:	e007      	b.n	8001098 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d109      	bne.n	80010b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010b2:	e007      	b.n	80010c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	431a      	orrs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d107      	bne.n	80010dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010e2:	f023 0201 	bic.w	r2, r3, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e006      	b.n	80010fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
  }
}
 80010fe:	4618      	mov	r0, r3
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d12e      	bne.n	800117c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2202      	movs	r2, #2
 8001122:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0201 	bic.w	r2, r2, #1
 8001134:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001136:	f7ff fdf3 	bl	8000d20 <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800113c:	e012      	b.n	8001164 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800113e:	f7ff fdef 	bl	8000d20 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b0a      	cmp	r3, #10
 800114a:	d90b      	bls.n	8001164 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2205      	movs	r2, #5
 800115c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e012      	b.n	800118a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1e5      	bne.n	800113e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e006      	b.n	800118a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
  }
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001192:	b480      	push	{r7}
 8001194:	b089      	sub	sp, #36	; 0x24
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d003      	beq.n	80011be <HAL_CAN_AddTxMessage+0x2c>
 80011b6:	7ffb      	ldrb	r3, [r7, #31]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	f040 80ad 	bne.w	8001318 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10a      	bne.n	80011de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8095 	beq.w	8001308 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	0e1b      	lsrs	r3, r3, #24
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011e8:	2201      	movs	r2, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	409a      	lsls	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	6809      	ldr	r1, [r1, #0]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3318      	adds	r3, #24
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	440b      	add	r3, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e00f      	b.n	8001236 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001220:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001226:	68f9      	ldr	r1, [r7, #12]
 8001228:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800122a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3318      	adds	r3, #24
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	440b      	add	r3, r1
 8001234:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6819      	ldr	r1, [r3, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3318      	adds	r3, #24
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	440b      	add	r3, r1
 8001246:	3304      	adds	r3, #4
 8001248:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	7d1b      	ldrb	r3, [r3, #20]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d111      	bne.n	8001276 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3318      	adds	r3, #24
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	3304      	adds	r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	6811      	ldr	r1, [r2, #0]
 8001266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3318      	adds	r3, #24
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	440b      	add	r3, r1
 8001272:	3304      	adds	r3, #4
 8001274:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3307      	adds	r3, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	061a      	lsls	r2, r3, #24
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3306      	adds	r3, #6
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3305      	adds	r3, #5
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	4313      	orrs	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	3204      	adds	r2, #4
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4610      	mov	r0, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6811      	ldr	r1, [r2, #0]
 800129e:	ea43 0200 	orr.w	r2, r3, r0
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	440b      	add	r3, r1
 80012a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3303      	adds	r3, #3
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	061a      	lsls	r2, r3, #24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3302      	adds	r3, #2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	4313      	orrs	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	4610      	mov	r0, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	6811      	ldr	r1, [r2, #0]
 80012d4:	ea43 0200 	orr.w	r2, r3, r0
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	6811      	ldr	r1, [r2, #0]
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3318      	adds	r3, #24
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e00e      	b.n	8001326 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e006      	b.n	8001326 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
  }
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001344:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d002      	beq.n	8001352 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d11d      	bne.n	800138e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d002      	beq.n	80013ba <HAL_CAN_ActivateNotification+0x1e>
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d109      	bne.n	80013ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6959      	ldr	r1, [r3, #20]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e006      	b.n	80013dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
  }
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001548:	f3bf 8f4f 	dsb	sy
}
 800154c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <__NVIC_SystemReset+0x24>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001556:	4904      	ldr	r1, [pc, #16]	; (8001568 <__NVIC_SystemReset+0x24>)
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_SystemReset+0x28>)
 800155a:	4313      	orrs	r3, r2
 800155c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800155e:	f3bf 8f4f 	dsb	sy
}
 8001562:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <__NVIC_SystemReset+0x20>
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	05fa0004 	.word	0x05fa0004

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f7ff ff78 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff13 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff28 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff78 	bl	80014dc <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff47 	bl	8001488 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff1b 	bl	800144c <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001622:	f7ff ff8f 	bl	8001544 <__NVIC_SystemReset>

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff9e 	bl	8001570 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e037      	b.n	80016c4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800166a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800166e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9b8 	bl	8001a1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}  
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_DMA_Start_IT+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e04a      	b.n	8001782 <HAL_DMA_Start_IT+0xb6>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d13a      	bne.n	8001774 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 f94b 	bl	80019be <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 020e 	orr.w	r2, r2, #14
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e00f      	b.n	8001762 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 020a 	orr.w	r2, r2, #10
 8001750:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0204 	bic.w	r2, r2, #4
 8001760:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e005      	b.n	8001780 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800177c:	2302      	movs	r3, #2
 800177e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001780:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e020      	b.n	80017f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020e 	bic.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180e:	2b02      	cmp	r3, #2
 8001810:	d005      	beq.n	800181e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e027      	b.n	800186e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 020e 	bic.w	r2, r2, #14
 800182c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
    } 
  }
  return status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2204      	movs	r2, #4
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d024      	beq.n	80018ea <HAL_DMA_IRQHandler+0x72>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01f      	beq.n	80018ea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0204 	bic.w	r2, r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	2104      	movs	r1, #4
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d06a      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018e8:	e065      	b.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2202      	movs	r2, #2
 80018f0:	409a      	lsls	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d02c      	beq.n	8001954 <HAL_DMA_IRQHandler+0xdc>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d027      	beq.n	8001954 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10b      	bne.n	800192a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 020a 	bic.w	r2, r2, #10
 8001920:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	2102      	movs	r1, #2
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	d035      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001952:	e030      	b.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2208      	movs	r2, #8
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d028      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d023      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 020e 	bic.w	r2, r2, #14
 800197c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
    }
  }
}  
 80019b4:	e7ff      	b.n	80019b6 <HAL_DMA_IRQHandler+0x13e>
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d108      	bne.n	80019fe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019fc:	e007      	b.n	8001a0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	60da      	str	r2, [r3, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <DMA_CalcBaseAndBitshift+0x34>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <DMA_CalcBaseAndBitshift+0x38>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	009a      	lsls	r2, r3, #2
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <DMA_CalcBaseAndBitshift+0x3c>)
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	bffdfff8 	.word	0xbffdfff8
 8001a54:	cccccccd 	.word	0xcccccccd
 8001a58:	40020000 	.word	0x40020000

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e14e      	b.n	8001d0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8140 	beq.w	8001d04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d005      	beq.n	8001a9c <HAL_GPIO_Init+0x40>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d130      	bne.n	8001afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f003 0201 	and.w	r2, r3, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d017      	beq.n	8001b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 809a 	beq.w	8001d04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be8:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1e0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1dc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a45      	ldr	r2, [pc, #276]	; (8001d34 <HAL_GPIO_Init+0x2d8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1d8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a44      	ldr	r2, [pc, #272]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1d4>
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c4e:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5c:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001caa:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f47f aea9 	bne.w	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	48000800 	.word	0x48000800
 8001d38:	48000c00 	.word	0x48000c00
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f001 b823 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 817d 	beq.w	80020a6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dac:	4bbc      	ldr	r3, [pc, #752]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db8:	4bb9      	ldr	r3, [pc, #740]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d15c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x10e>
 8001dc4:	4bb6      	ldr	r3, [pc, #728]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d155      	bne.n	8001e7e <HAL_RCC_OscConfig+0x10e>
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001de6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x94>
 8001dfe:	4ba8      	ldr	r3, [pc, #672]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e015      	b.n	8001e30 <HAL_RCC_OscConfig+0xc0>
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e20:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e2c:	4b9c      	ldr	r3, [pc, #624]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f002 021f 	and.w	r2, r2, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 811f 	beq.w	80020a4 <HAL_RCC_OscConfig+0x334>
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8116 	bne.w	80020a4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f000 bfaf 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12e>
 8001e90:	4b83      	ldr	r3, [pc, #524]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a82      	ldr	r2, [pc, #520]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e036      	b.n	8001f0c <HAL_RCC_OscConfig+0x19c>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x158>
 8001eae:	4b7c      	ldr	r3, [pc, #496]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7b      	ldr	r2, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a78      	ldr	r2, [pc, #480]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e021      	b.n	8001f0c <HAL_RCC_OscConfig+0x19c>
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x184>
 8001eda:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a70      	ldr	r2, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6d      	ldr	r2, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0x19c>
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a69      	ldr	r2, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f023 020f 	bic.w	r2, r3, #15
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	495f      	ldr	r1, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d059      	beq.n	8001fea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fef3 	bl	8000d20 <HAL_GetTick>
 8001f3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe feee 	bl	8000d20 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b64      	cmp	r3, #100	; 0x64
 8001f4e:	d902      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	f000 bf43 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_OscConfig+0x218>
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e015      	b.n	8001fb4 <HAL_RCC_OscConfig+0x244>
 8001f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fa4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fb8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fbc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fc0:	fa92 f2a2 	rbit	r2, r2
 8001fc4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fc8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ab      	beq.n	8001f40 <HAL_RCC_OscConfig+0x1d0>
 8001fe8:	e05d      	b.n	80020a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fe99 	bl	8000d20 <HAL_GetTick>
 8001fee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fe94 	bl	8000d20 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d902      	bls.n	800200a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	f000 bee9 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
 800200a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800201e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_RCC_OscConfig+0x2cc>
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e015      	b.n	8002068 <HAL_RCC_OscConfig+0x2f8>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002054:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002058:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800206c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002070:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800207c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ab      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x284>
 800209c:	e003      	b.n	80020a6 <HAL_RCC_OscConfig+0x336>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 817d 	beq.w	80023b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020bc:	4ba6      	ldr	r3, [pc, #664]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c8:	4ba3      	ldr	r3, [pc, #652]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d172      	bne.n	80021ba <HAL_RCC_OscConfig+0x44a>
 80020d4:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d16c      	bne.n	80021ba <HAL_RCC_OscConfig+0x44a>
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <HAL_RCC_OscConfig+0x3a0>
 800210a:	4b93      	ldr	r3, [pc, #588]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	e013      	b.n	8002138 <HAL_RCC_OscConfig+0x3c8>
 8002110:	2302      	movs	r3, #2
 8002112:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002128:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002134:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2202      	movs	r2, #2
 800213a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800213e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800214a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0220 	orr.w	r2, r2, #32
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCC_OscConfig+0x410>
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d002      	beq.n	8002180 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f000 be2e 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b75      	ldr	r3, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	21f8      	movs	r1, #248	; 0xf8
 8002196:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800219e:	fa91 f1a1 	rbit	r1, r1
 80021a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021aa:	fab1 f181 	clz	r1, r1
 80021ae:	b2c9      	uxtb	r1, r1
 80021b0:	408b      	lsls	r3, r1
 80021b2:	4969      	ldr	r1, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b8:	e0fd      	b.n	80023b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8088 	beq.w	80022dc <HAL_RCC_OscConfig+0x56c>
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	2301      	movs	r3, #1
 80021f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fd92 	bl	8000d20 <HAL_GetTick>
 80021fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe fd8d 	bl	8000d20 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d902      	bls.n	8002218 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	f000 bde2 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800222a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_RCC_OscConfig+0x4d8>
 8002242:	4b45      	ldr	r3, [pc, #276]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e013      	b.n	8002270 <HAL_RCC_OscConfig+0x500>
 8002248:	2302      	movs	r3, #2
 800224a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800225a:	2302      	movs	r3, #2
 800225c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002260:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2202      	movs	r2, #2
 8002272:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002276:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800227a:	fa92 f2a2 	rbit	r2, r2
 800227e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002282:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002286:	fab2 f282 	clz	r2, r2
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f042 0220 	orr.w	r2, r2, #32
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f002 021f 	and.w	r2, r2, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0af      	beq.n	8002202 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	21f8      	movs	r1, #248	; 0xf8
 80022b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022c0:	fa91 f1a1 	rbit	r1, r1
 80022c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022cc:	fab1 f181 	clz	r1, r1
 80022d0:	b2c9      	uxtb	r1, r1
 80022d2:	408b      	lsls	r3, r1
 80022d4:	4920      	ldr	r1, [pc, #128]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
 80022da:	e06c      	b.n	80023b6 <HAL_RCC_OscConfig+0x646>
 80022dc:	2301      	movs	r3, #1
 80022de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	461a      	mov	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fd0a 	bl	8000d20 <HAL_GetTick>
 800230c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe fd05 	bl	8000d20 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d902      	bls.n	8002328 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	f000 bd5a 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002328:	2302      	movs	r3, #2
 800232a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800233a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d104      	bne.n	800235c <HAL_RCC_OscConfig+0x5ec>
 8002352:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_RCC_OscConfig+0x5e8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	e015      	b.n	8002384 <HAL_RCC_OscConfig+0x614>
 8002358:	40021000 	.word	0x40021000
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002374:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002380:	4bc8      	ldr	r3, [pc, #800]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2202      	movs	r2, #2
 8002386:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800238a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002396:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ad      	bne.n	8002312 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8110 	beq.w	80025ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d079      	beq.n	80024d0 <HAL_RCC_OscConfig+0x760>
 80023dc:	2301      	movs	r3, #1
 80023de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4bab      	ldr	r3, [pc, #684]	; (80026a8 <HAL_RCC_OscConfig+0x938>)
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe fc8b 	bl	8000d20 <HAL_GetTick>
 800240a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fc86 	bl	8000d20 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	f000 bcdb 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800247e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002480:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 8002482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800248c:	2102      	movs	r1, #2
 800248e:	6019      	str	r1, [r3, #0]
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f1a3 	rbit	r1, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024a6:	6019      	str	r1, [r3, #0]
  return result;
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0a0      	beq.n	8002410 <HAL_RCC_OscConfig+0x6a0>
 80024ce:	e08d      	b.n	80025ec <HAL_RCC_OscConfig+0x87c>
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024f2:	601a      	str	r2, [r3, #0]
  return result;
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_OscConfig+0x938>)
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	461a      	mov	r2, r3
 800250e:	2300      	movs	r3, #0
 8002510:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe fc05 	bl	8000d20 <HAL_GetTick>
 8002516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251c:	f7fe fc00 	bl	8000d20 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d902      	bls.n	8002532 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	f000 bc55 	b.w	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800253a:	2202      	movs	r2, #2
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800255e:	2202      	movs	r2, #2
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800259c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 80025a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025aa:	2102      	movs	r1, #2
 80025ac:	6019      	str	r1, [r3, #0]
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f1a3 	rbit	r1, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025c4:	6019      	str	r1, [r3, #0]
  return result;
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d197      	bne.n	800251c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 81a1 	beq.w	8002944 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261e:	61d3      	str	r3, [r2, #28]
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800263a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_RCC_OscConfig+0x93c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11a      	bne.n	8002684 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_RCC_OscConfig+0x93c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_RCC_OscConfig+0x93c>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265a:	f7fe fb61 	bl	8000d20 <HAL_GetTick>
 800265e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	e009      	b.n	8002678 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe fb5c 	bl	8000d20 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e3b1      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x93c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10d      	bne.n	80026b0 <HAL_RCC_OscConfig+0x940>
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <HAL_RCC_OscConfig+0x934>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e03c      	b.n	800271c <HAL_RCC_OscConfig+0x9ac>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	10908120 	.word	0x10908120
 80026ac:	40007000 	.word	0x40007000
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x96a>
 80026c0:	4bc1      	ldr	r3, [pc, #772]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4ac0      	ldr	r2, [pc, #768]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	4bbe      	ldr	r3, [pc, #760]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4abd      	ldr	r2, [pc, #756]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026d2:	f023 0304 	bic.w	r3, r3, #4
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	e020      	b.n	800271c <HAL_RCC_OscConfig+0x9ac>
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x994>
 80026ea:	4bb7      	ldr	r3, [pc, #732]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4ab6      	ldr	r2, [pc, #728]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	4bb4      	ldr	r3, [pc, #720]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4ab3      	ldr	r2, [pc, #716]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x9ac>
 8002704:	4bb0      	ldr	r3, [pc, #704]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4aaf      	ldr	r2, [pc, #700]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	4bad      	ldr	r3, [pc, #692]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4aac      	ldr	r2, [pc, #688]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8081 	beq.w	8002830 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe faf7 	bl	8000d20 <HAL_GetTick>
 8002732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe faf2 	bl	8000d20 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e345      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002758:	2202      	movs	r2, #2
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002796:	601a      	str	r2, [r3, #0]
  return result;
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_OscConfig+0xa4c>
 80027b6:	4b84      	ldr	r3, [pc, #528]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0xa74>
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027c4:	2202      	movs	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027ec:	2102      	movs	r1, #2
 80027ee:	6011      	str	r1, [r2, #0]
 80027f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	fa92 f1a2 	rbit	r1, r2
 80027fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002802:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002806:	6011      	str	r1, [r2, #0]
  return result;
 8002808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d084      	beq.n	8002738 <HAL_RCC_OscConfig+0x9c8>
 800282e:	e07f      	b.n	8002930 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe fa76 	bl	8000d20 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fa71 	bl	8000d20 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e2c4      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800285a:	2202      	movs	r2, #2
 800285c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002898:	601a      	str	r2, [r3, #0]
  return result;
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d102      	bne.n	80028be <HAL_RCC_OscConfig+0xb4e>
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	e013      	b.n	80028e6 <HAL_RCC_OscConfig+0xb76>
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028c6:	2202      	movs	r2, #2
 80028c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028ee:	2102      	movs	r1, #2
 80028f0:	6011      	str	r1, [r2, #0]
 80028f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	fa92 f1a2 	rbit	r1, r2
 8002900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002904:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002908:	6011      	str	r1, [r2, #0]
  return result;
 800290a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f002 021f 	and.w	r2, r2, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d184      	bne.n	800283a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002930:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002942:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8242 	beq.w	8002dda <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_RCC_OscConfig+0xc58>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	f000 8213 	beq.w	8002d8a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2b02      	cmp	r3, #2
 8002972:	f040 8162 	bne.w	8002c3a <HAL_RCC_OscConfig+0xeca>
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800297e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800299a:	601a      	str	r2, [r3, #0]
  return result;
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe f9b0 	bl	8000d20 <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	e00c      	b.n	80029e0 <HAL_RCC_OscConfig+0xc70>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe f9a8 	bl	8000d20 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1fd      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a04:	601a      	str	r2, [r3, #0]
  return result;
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d102      	bne.n	8002a2a <HAL_RCC_OscConfig+0xcba>
 8002a24:	4bb0      	ldr	r3, [pc, #704]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	e027      	b.n	8002a7a <HAL_RCC_OscConfig+0xd0a>
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	4b9c      	ldr	r3, [pc, #624]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a86:	6011      	str	r1, [r2, #0]
 8002a88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a8c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	fa92 f1a2 	rbit	r1, r2
 8002a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a9e:	6011      	str	r1, [r2, #0]
  return result;
 8002aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	fab2 f282 	clz	r2, r2
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f002 021f 	and.w	r2, r2, #31
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d182      	bne.n	80029cc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac6:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	497f      	ldr	r1, [pc, #508]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b12:	601a      	str	r2, [r3, #0]
  return result;
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b1c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2301      	movs	r3, #1
 8002b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe f8f4 	bl	8000d20 <HAL_GetTick>
 8002b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe f8ef 	bl	8000d20 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e144      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b76:	601a      	str	r2, [r3, #0]
  return result;
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_RCC_OscConfig+0xe2c>
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e027      	b.n	8002bec <HAL_RCC_OscConfig+0xe7c>
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bf8:	6011      	str	r1, [r2, #0]
 8002bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	fa92 f1a2 	rbit	r1, r2
 8002c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c10:	6011      	str	r1, [r2, #0]
  return result;
 8002c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f042 0220 	orr.w	r2, r2, #32
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f002 021f 	and.w	r2, r2, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d082      	beq.n	8002b3e <HAL_RCC_OscConfig+0xdce>
 8002c38:	e0cf      	b.n	8002dda <HAL_RCC_OscConfig+0x106a>
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fa93 f2a3 	rbit	r2, r3
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c5e:	601a      	str	r2, [r3, #0]
  return result;
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe f84e 	bl	8000d20 <HAL_GetTick>
 8002c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	e009      	b.n	8002c9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe f849 	bl	8000d20 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e09e      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cc2:	601a      	str	r2, [r3, #0]
  return result;
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ccc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d104      	bne.n	8002cec <HAL_RCC_OscConfig+0xf7c>
 8002ce2:	4b01      	ldr	r3, [pc, #4]	; (8002ce8 <HAL_RCC_OscConfig+0xf78>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e029      	b.n	8002d3c <HAL_RCC_OscConfig+0xfcc>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_OscConfig+0x1078>)
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d40:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d48:	6011      	str	r1, [r2, #0]
 8002d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fa92 f1a2 	rbit	r1, r2
 8002d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d60:	6011      	str	r1, [r2, #0]
  return result;
 8002d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d66:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f042 0220 	orr.w	r2, r2, #32
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f002 021f 	and.w	r2, r2, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d180      	bne.n	8002c8a <HAL_RCC_OscConfig+0xf1a>
 8002d88:	e027      	b.n	8002dda <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e01e      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCC_OscConfig+0x1078>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002da6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002daa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d10b      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b09e      	sub	sp, #120	; 0x78
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e162      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b90      	ldr	r3, [pc, #576]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d910      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 0207 	bic.w	r2, r3, #7
 8002e1a:	498b      	ldr	r1, [pc, #556]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e14a      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b82      	ldr	r3, [pc, #520]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	497f      	ldr	r1, [pc, #508]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80dc 	beq.w	8003018 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d13c      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xf6>
 8002e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d102      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xa6>
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	e00f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xc6>
 8002e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eae:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d17b      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0f3      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d13c      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x178>
 8002eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x128>
 8002f0e:	4b4f      	ldr	r3, [pc, #316]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_ClockConfig+0x148>
 8002f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	647b      	str	r3, [r7, #68]	; 0x44
 8002f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
 8002f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f38:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f042 0220 	orr.w	r2, r2, #32
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f002 021f 	and.w	r2, r2, #31
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d13a      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b2      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
 8002f64:	2302      	movs	r3, #2
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e00d      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x1bc>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2202      	movs	r2, #2
 8002faa:	61ba      	str	r2, [r7, #24]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	fa92 f2a2 	rbit	r2, r2
 8002fb2:	617a      	str	r2, [r7, #20]
  return result;
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	fab2 f282 	clz	r2, r2
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f002 021f 	and.w	r2, r2, #31
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e079      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	491a      	ldr	r1, [pc, #104]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fd fe9a 	bl	8000d20 <HAL_GetTick>
 8002fec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fd fe96 	bl	8000d20 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e061      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d214      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0207 	bic.w	r2, r3, #7
 800302e:	4906      	ldr	r1, [pc, #24]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e040      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	491a      	ldr	r1, [pc, #104]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4912      	ldr	r1, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800308e:	f000 f829 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003092:	4601      	mov	r1, r0
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	22f0      	movs	r2, #240	; 0xf0
 800309e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	fa92 f2a2 	rbit	r2, r2
 80030a6:	60fa      	str	r2, [r7, #12]
  return result;
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	40d3      	lsrs	r3, r2
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x2ec>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_RCC_ClockConfig+0x2f0>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCC_ClockConfig+0x2f4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fde8 	bl	8000c98 <HAL_InitTick>
  
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3778      	adds	r7, #120	; 0x78
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	080053a0 	.word	0x080053a0
 80030dc:	20000004 	.word	0x20000004
 80030e0:	20000008 	.word	0x20000008

080030e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b08b      	sub	sp, #44	; 0x2c
 80030e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b04      	cmp	r3, #4
 800310c:	d002      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x30>
 800310e:	2b08      	cmp	r3, #8
 8003110:	d003      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x36>
 8003112:	e03c      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003116:	623b      	str	r3, [r7, #32]
      break;
 8003118:	e03c      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003120:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003124:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	fa92 f2a2 	rbit	r2, r2
 800312c:	607a      	str	r2, [r7, #4]
  return result;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	40d3      	lsrs	r3, r2
 8003138:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	220f      	movs	r2, #15
 8003148:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	fa92 f2a2 	rbit	r2, r2
 8003150:	60fa      	str	r2, [r7, #12]
  return result;
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	fab2 f282 	clz	r2, r2
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	40d3      	lsrs	r3, r2
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	fbb2 f2f3 	udiv	r2, r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	e004      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	623b      	str	r3, [r7, #32]
      break;
 800318c:	e002      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003190:	623b      	str	r3, [r7, #32]
      break;
 8003192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003194:	6a3b      	ldr	r3, [r7, #32]
}
 8003196:	4618      	mov	r0, r3
 8003198:	372c      	adds	r7, #44	; 0x2c
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	080053b8 	.word	0x080053b8
 80031b0:	080053c8 	.word	0x080053c8
 80031b4:	003d0900 	.word	0x003d0900

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031d6:	f7ff ffef 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031da:	4601      	mov	r1, r0
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	fa92 f2a2 	rbit	r2, r2
 80031f0:	603a      	str	r2, [r7, #0]
  return result;
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	40d3      	lsrs	r3, r2
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	080053b0 	.word	0x080053b0

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800321a:	f7ff ffcd 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 800321e:	4601      	mov	r1, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003228:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800322c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	603a      	str	r2, [r7, #0]
  return result;
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	fab2 f282 	clz	r2, r2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	40d3      	lsrs	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	080053b0 	.word	0x080053b0

08003258 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b092      	sub	sp, #72	; 0x48
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80cd 	beq.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327c:	4b86      	ldr	r3, [pc, #536]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10e      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a82      	ldr	r2, [pc, #520]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b7d      	ldr	r3, [pc, #500]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d118      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b2:	4b7a      	ldr	r3, [pc, #488]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a79      	ldr	r2, [pc, #484]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7fd fd2f 	bl	8000d20 <HAL_GetTick>
 80032c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	e008      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c6:	f7fd fd2b 	bl	8000d20 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b64      	cmp	r3, #100	; 0x64
 80032d2:	d901      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0db      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e4:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d07d      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fe:	429a      	cmp	r2, r3
 8003300:	d076      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003302:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	2301      	movs	r3, #1
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800333e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003354:	4a50      	ldr	r2, [pc, #320]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d045      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fcdc 	bl	8000d20 <HAL_GetTick>
 8003368:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd fcd8 	bl	8000d20 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e086      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003382:	2302      	movs	r3, #2
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	2302      	movs	r3, #2
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	61fb      	str	r3, [r7, #28]
  return result;
 800339a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d102      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	e007      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033b6:	2302      	movs	r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	4b35      	ldr	r3, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2202      	movs	r2, #2
 80033c8:	613a      	str	r2, [r7, #16]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	fa92 f2a2 	rbit	r2, r2
 80033d0:	60fa      	str	r2, [r7, #12]
  return result;
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f002 021f 	and.w	r2, r2, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0bd      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4926      	ldr	r1, [pc, #152]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	491a      	ldr	r1, [pc, #104]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003430:	4313      	orrs	r3, r2
 8003432:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003440:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f023 0210 	bic.w	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4912      	ldr	r1, [pc, #72]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344e:	4313      	orrs	r3, r2
 8003450:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	490b      	ldr	r1, [pc, #44]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800346c:	4313      	orrs	r3, r2
 800346e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348a:	4313      	orrs	r3, r2
 800348c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3748      	adds	r7, #72	; 0x48
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	10908100 	.word	0x10908100

080034a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e049      	b.n	800354a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fa52 	bl	8000974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 f94a 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800356e:	2302      	movs	r3, #2
 8003570:	e0ff      	b.n	8003772 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b14      	cmp	r3, #20
 800357e:	f200 80f0 	bhi.w	8003762 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035dd 	.word	0x080035dd
 800358c:	08003763 	.word	0x08003763
 8003590:	08003763 	.word	0x08003763
 8003594:	08003763 	.word	0x08003763
 8003598:	0800361d 	.word	0x0800361d
 800359c:	08003763 	.word	0x08003763
 80035a0:	08003763 	.word	0x08003763
 80035a4:	08003763 	.word	0x08003763
 80035a8:	0800365f 	.word	0x0800365f
 80035ac:	08003763 	.word	0x08003763
 80035b0:	08003763 	.word	0x08003763
 80035b4:	08003763 	.word	0x08003763
 80035b8:	0800369f 	.word	0x0800369f
 80035bc:	08003763 	.word	0x08003763
 80035c0:	08003763 	.word	0x08003763
 80035c4:	08003763 	.word	0x08003763
 80035c8:	080036e1 	.word	0x080036e1
 80035cc:	08003763 	.word	0x08003763
 80035d0:	08003763 	.word	0x08003763
 80035d4:	08003763 	.word	0x08003763
 80035d8:	08003721 	.word	0x08003721
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f942 	bl	800386c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	619a      	str	r2, [r3, #24]
      break;
 800361a:	e0a5      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9a8 	bl	8003978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6999      	ldr	r1, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
      break;
 800365c:	e084      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fa07 	bl	8003a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0208 	orr.w	r2, r2, #8
 8003678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0204 	bic.w	r2, r2, #4
 8003688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69d9      	ldr	r1, [r3, #28]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	61da      	str	r2, [r3, #28]
      break;
 800369c:	e064      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fa65 	bl	8003b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69d9      	ldr	r1, [r3, #28]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	021a      	lsls	r2, r3, #8
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	61da      	str	r2, [r3, #28]
      break;
 80036de:	e043      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 faa8 	bl	8003c3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0204 	bic.w	r2, r2, #4
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800371e:	e023      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fae6 	bl	8003cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	021a      	lsls	r2, r3, #8
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003760:	e002      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
      break;
 8003766:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003770:	7dfb      	ldrb	r3, [r7, #23]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop

0800377c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a32      	ldr	r2, [pc, #200]	; (8003858 <TIM_Base_SetConfig+0xdc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x28>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x28>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2f      	ldr	r2, [pc, #188]	; (800385c <TIM_Base_SetConfig+0xe0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_Base_SetConfig+0xdc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <TIM_Base_SetConfig+0x6a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d00f      	beq.n	80037e6 <TIM_Base_SetConfig+0x6a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a24      	ldr	r2, [pc, #144]	; (800385c <TIM_Base_SetConfig+0xe0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_Base_SetConfig+0x6a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <TIM_Base_SetConfig+0xe4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_Base_SetConfig+0x6a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <TIM_Base_SetConfig+0xe8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_Base_SetConfig+0x6a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <TIM_Base_SetConfig+0xec>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d108      	bne.n	80037f8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <TIM_Base_SetConfig+0xdc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0xc0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <TIM_Base_SetConfig+0xe4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0xc0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <TIM_Base_SetConfig+0xe8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0xc0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <TIM_Base_SetConfig+0xec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d103      	bne.n	8003844 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	615a      	str	r2, [r3, #20]
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800

0800386c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f023 0201 	bic.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 0302 	bic.w	r3, r3, #2
 80038b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a28      	ldr	r2, [pc, #160]	; (8003968 <TIM_OC1_SetConfig+0xfc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_OC1_SetConfig+0x78>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a27      	ldr	r2, [pc, #156]	; (800396c <TIM_OC1_SetConfig+0x100>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_OC1_SetConfig+0x78>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a26      	ldr	r2, [pc, #152]	; (8003970 <TIM_OC1_SetConfig+0x104>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_OC1_SetConfig+0x78>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a25      	ldr	r2, [pc, #148]	; (8003974 <TIM_OC1_SetConfig+0x108>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10c      	bne.n	80038fe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0308 	bic.w	r3, r3, #8
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <TIM_OC1_SetConfig+0xfc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <TIM_OC1_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <TIM_OC1_SetConfig+0x100>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <TIM_OC1_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <TIM_OC1_SetConfig+0x104>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_OC1_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <TIM_OC1_SetConfig+0x108>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800

08003978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0210 	bic.w	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0320 	bic.w	r3, r3, #32
 80039c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a24      	ldr	r2, [pc, #144]	; (8003a68 <TIM_OC2_SetConfig+0xf0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10d      	bne.n	80039f8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <TIM_OC2_SetConfig+0xf0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_OC2_SetConfig+0xa0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <TIM_OC2_SetConfig+0xf4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC2_SetConfig+0xa0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <TIM_OC2_SetConfig+0xf8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC2_SetConfig+0xa0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <TIM_OC2_SetConfig+0xfc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d113      	bne.n	8003a40 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800

08003a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <TIM_OC3_SetConfig+0xec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10d      	bne.n	8003af6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <TIM_OC3_SetConfig+0xec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_OC3_SetConfig+0x9e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <TIM_OC3_SetConfig+0xf0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_OC3_SetConfig+0x9e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <TIM_OC3_SetConfig+0xf4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC3_SetConfig+0x9e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <TIM_OC3_SetConfig+0xf8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d113      	bne.n	8003b3e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800

08003b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	031b      	lsls	r3, r3, #12
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <TIM_OC4_SetConfig+0xb8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_OC4_SetConfig+0x7c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <TIM_OC4_SetConfig+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_OC4_SetConfig+0x7c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <TIM_OC4_SetConfig+0xc0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_OC4_SetConfig+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <TIM_OC4_SetConfig+0xc4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d109      	bne.n	8003c04 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800

08003c3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_OC5_SetConfig+0xac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_OC5_SetConfig+0x72>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <TIM_OC5_SetConfig+0xb0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_OC5_SetConfig+0x72>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <TIM_OC5_SetConfig+0xb4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC5_SetConfig+0x72>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <TIM_OC5_SetConfig+0xb8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d109      	bne.n	8003cc2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40014400 	.word	0x40014400
 8003cf4:	40014800 	.word	0x40014800

08003cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	051b      	lsls	r3, r3, #20
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <TIM_OC6_SetConfig+0xb0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_OC6_SetConfig+0x74>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a15      	ldr	r2, [pc, #84]	; (8003dac <TIM_OC6_SetConfig+0xb4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_OC6_SetConfig+0x74>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <TIM_OC6_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_OC6_SetConfig+0x74>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <TIM_OC6_SetConfig+0xbc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d109      	bne.n	8003d80 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800

08003db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e054      	b.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d009      	beq.n	8003e4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a11      	ldr	r2, [pc, #68]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10c      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40014000 	.word	0x40014000

08003e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e060      	b.n	8003f72 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d115      	bne.n	8003f60 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	051b      	lsls	r3, r3, #20
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40012c00 	.word	0x40012c00

08003f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e040      	b.n	8004018 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc fd3c 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fbfc 	bl	80047c0 <UART_SetConfig>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e022      	b.n	8004018 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fd26 	bl	8004a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fdad 	bl	8004b70 <UART_CheckIdleState>
 8004016:	4603      	mov	r3, r0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004032:	2b20      	cmp	r3, #32
 8004034:	d165      	bne.n	8004102 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_UART_Transmit_DMA+0x22>
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e05e      	b.n	8004104 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2221      	movs	r2, #33	; 0x21
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	2b00      	cmp	r3, #0
 8004070:	d027      	beq.n	80040c2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a25      	ldr	r2, [pc, #148]	; (800410c <HAL_UART_Transmit_DMA+0xec>)
 8004078:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a24      	ldr	r2, [pc, #144]	; (8004110 <HAL_UART_Transmit_DMA+0xf0>)
 8004080:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_UART_Transmit_DMA+0xf4>)
 8004088:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	2200      	movs	r2, #0
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	4619      	mov	r1, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3328      	adds	r3, #40	; 0x28
 80040a2:	461a      	mov	r2, r3
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	f7fd fb11 	bl	80016cc <HAL_DMA_Start_IT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2210      	movs	r2, #16
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e020      	b.n	8004104 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2240      	movs	r2, #64	; 0x40
 80040c8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	613b      	str	r3, [r7, #16]
   return(result);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	623a      	str	r2, [r7, #32]
 80040ec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	69f9      	ldr	r1, [r7, #28]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3728      	adds	r7, #40	; 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	08004fe5 	.word	0x08004fe5
 8004110:	08005079 	.word	0x08005079
 8004114:	080051f9 	.word	0x080051f9

08004118 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412c:	2b20      	cmp	r3, #32
 800412e:	d132      	bne.n	8004196 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_UART_Receive_DMA+0x24>
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e02b      	b.n	8004198 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d018      	beq.n	8004186 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	613b      	str	r3, [r7, #16]
   return(result);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	69f9      	ldr	r1, [r7, #28]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e6      	bne.n	8004154 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fdff 	bl	8004d90 <UART_Start_Receive_DMA>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3728      	adds	r7, #40	; 0x28
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b0ba      	sub	sp, #232	; 0xe8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80041ce:	4013      	ands	r3, r2
 80041d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d115      	bne.n	8004208 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00f      	beq.n	8004208 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 82ab 	beq.w	8004754 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
      }
      return;
 8004206:	e2a5      	b.n	8004754 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8117 	beq.w	8004440 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800421e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004222:	4b85      	ldr	r3, [pc, #532]	; (8004438 <HAL_UART_IRQHandler+0x298>)
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 810a 	beq.w	8004440 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d011      	beq.n	800425c <HAL_UART_IRQHandler+0xbc>
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2201      	movs	r2, #1
 800424a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d011      	beq.n	800428c <HAL_UART_IRQHandler+0xec>
 8004268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2202      	movs	r2, #2
 800427a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <HAL_UART_IRQHandler+0x11c>
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2204      	movs	r2, #4
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	f043 0202 	orr.w	r2, r3, #2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2208      	movs	r2, #8
 80042e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	f043 0208 	orr.w	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <HAL_UART_IRQHandler+0x18a>
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8211 	beq.w	8004758 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800437a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04f      	beq.n	8004422 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fdca 	bl	8004f1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d141      	bne.n	800441a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1d9      	bne.n	8004396 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d013      	beq.n	8004412 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_UART_IRQHandler+0x29c>)
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fa00 	bl	80017fc <HAL_DMA_Abort_IT>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d017      	beq.n	8004432 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800440c:	4610      	mov	r0, r2
 800440e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e00f      	b.n	8004432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9be 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e00b      	b.n	8004432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f9ba 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	e007      	b.n	8004432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9b6 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004430:	e192      	b.n	8004758 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004432:	bf00      	nop
    return;
 8004434:	e190      	b.n	8004758 <HAL_UART_IRQHandler+0x5b8>
 8004436:	bf00      	nop
 8004438:	04000120 	.word	0x04000120
 800443c:	08005277 	.word	0x08005277

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 814b 	bne.w	80046e0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8144 	beq.w	80046e0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 813d 	beq.w	80046e0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2210      	movs	r2, #16
 800446c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	f040 80b5 	bne.w	80045e8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800448a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8164 	beq.w	800475c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800449a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800449e:	429a      	cmp	r2, r3
 80044a0:	f080 815c 	bcs.w	800475c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	f000 8086 	beq.w	80045c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1da      	bne.n	80044ba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004528:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800452c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004530:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800453a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e1      	bne.n	8004504 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004564:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004566:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800456a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e3      	bne.n	8004540 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004596:	f023 0310 	bic.w	r3, r3, #16
 800459a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80045aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e4      	bne.n	8004586 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd f8e2 	bl	800178a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f8e1 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045e6:	e0b9      	b.n	800475c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80ab 	beq.w	8004760 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800460a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80a6 	beq.w	8004760 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
 8004638:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800463c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e4      	bne.n	8004614 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	623b      	str	r3, [r7, #32]
   return(result);
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800466e:	633a      	str	r2, [r7, #48]	; 0x30
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e3      	bne.n	800464a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0310 	bic.w	r3, r3, #16
 80046aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	617b      	str	r3, [r7, #20]
   return(result);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e4      	bne.n	8004696 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f865 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046de:	e03f      	b.n	8004760 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <HAL_UART_IRQHandler+0x56a>
 80046ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fdf7 	bl	80052f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004708:	e02d      	b.n	8004766 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01c      	beq.n	8004764 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	4798      	blx	r3
    }
    return;
 8004732:	e017      	b.n	8004764 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_UART_IRQHandler+0x5c6>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fda8 	bl	80052a2 <UART_EndTransmit_IT>
    return;
 8004752:	e008      	b.n	8004766 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004754:	bf00      	nop
 8004756:	e006      	b.n	8004766 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004758:	bf00      	nop
 800475a:	e004      	b.n	8004766 <HAL_UART_IRQHandler+0x5c6>
      return;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004764:	bf00      	nop
  }

}
 8004766:	37e8      	adds	r7, #232	; 0xe8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <UART_SetConfig+0x254>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	6979      	ldr	r1, [r7, #20]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a78      	ldr	r2, [pc, #480]	; (8004a18 <UART_SetConfig+0x258>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d120      	bne.n	800487e <UART_SetConfig+0xbe>
 800483c:	4b77      	ldr	r3, [pc, #476]	; (8004a1c <UART_SetConfig+0x25c>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b03      	cmp	r3, #3
 8004846:	d817      	bhi.n	8004878 <UART_SetConfig+0xb8>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0x90>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	0800486d 	.word	0x0800486d
 8004858:	08004873 	.word	0x08004873
 800485c:	08004867 	.word	0x08004867
 8004860:	2300      	movs	r3, #0
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e01d      	b.n	80048a2 <UART_SetConfig+0xe2>
 8004866:	2302      	movs	r3, #2
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e01a      	b.n	80048a2 <UART_SetConfig+0xe2>
 800486c:	2304      	movs	r3, #4
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e017      	b.n	80048a2 <UART_SetConfig+0xe2>
 8004872:	2308      	movs	r3, #8
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e014      	b.n	80048a2 <UART_SetConfig+0xe2>
 8004878:	2310      	movs	r3, #16
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e011      	b.n	80048a2 <UART_SetConfig+0xe2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a67      	ldr	r2, [pc, #412]	; (8004a20 <UART_SetConfig+0x260>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d102      	bne.n	800488e <UART_SetConfig+0xce>
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e009      	b.n	80048a2 <UART_SetConfig+0xe2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a64      	ldr	r2, [pc, #400]	; (8004a24 <UART_SetConfig+0x264>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d102      	bne.n	800489e <UART_SetConfig+0xde>
 8004898:	2300      	movs	r3, #0
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e001      	b.n	80048a2 <UART_SetConfig+0xe2>
 800489e:	2310      	movs	r3, #16
 80048a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048aa:	d15a      	bne.n	8004962 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80048ac:	7ffb      	ldrb	r3, [r7, #31]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d827      	bhi.n	8004902 <UART_SetConfig+0x142>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0xf8>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	08004903 	.word	0x08004903
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	08004903 	.word	0x08004903
 80048d0:	08004903 	.word	0x08004903
 80048d4:	08004903 	.word	0x08004903
 80048d8:	080048fb 	.word	0x080048fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe fc78 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61b8      	str	r0, [r7, #24]
        break;
 80048e2:	e013      	b.n	800490c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe fc96 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 80048e8:	61b8      	str	r0, [r7, #24]
        break;
 80048ea:	e00f      	b.n	800490c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ec:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <UART_SetConfig+0x268>)
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e00c      	b.n	800490c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f2:	f7fe fbf7 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80048f6:	61b8      	str	r0, [r7, #24]
        break;
 80048f8:	e008      	b.n	800490c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	61bb      	str	r3, [r7, #24]
        break;
 8004900:	e004      	b.n	800490c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	77bb      	strb	r3, [r7, #30]
        break;
 800490a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d074      	beq.n	80049fc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	005a      	lsls	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d916      	bls.n	800495c <UART_SetConfig+0x19c>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d212      	bcs.n	800495c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f023 030f 	bic.w	r3, r3, #15
 800493e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	b29b      	uxth	r3, r3
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	b29a      	uxth	r2, r3
 800494c:	89fb      	ldrh	r3, [r7, #14]
 800494e:	4313      	orrs	r3, r2
 8004950:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	89fa      	ldrh	r2, [r7, #14]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e04f      	b.n	80049fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	77bb      	strb	r3, [r7, #30]
 8004960:	e04c      	b.n	80049fc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004962:	7ffb      	ldrb	r3, [r7, #31]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d828      	bhi.n	80049ba <UART_SetConfig+0x1fa>
 8004968:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <UART_SetConfig+0x1b0>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	08004995 	.word	0x08004995
 8004974:	0800499d 	.word	0x0800499d
 8004978:	080049a5 	.word	0x080049a5
 800497c:	080049bb 	.word	0x080049bb
 8004980:	080049ab 	.word	0x080049ab
 8004984:	080049bb 	.word	0x080049bb
 8004988:	080049bb 	.word	0x080049bb
 800498c:	080049bb 	.word	0x080049bb
 8004990:	080049b3 	.word	0x080049b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004994:	f7fe fc1c 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004998:	61b8      	str	r0, [r7, #24]
        break;
 800499a:	e013      	b.n	80049c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800499c:	f7fe fc3a 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 80049a0:	61b8      	str	r0, [r7, #24]
        break;
 80049a2:	e00f      	b.n	80049c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a4:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <UART_SetConfig+0x268>)
 80049a6:	61bb      	str	r3, [r7, #24]
        break;
 80049a8:	e00c      	b.n	80049c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049aa:	f7fe fb9b 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80049ae:	61b8      	str	r0, [r7, #24]
        break;
 80049b0:	e008      	b.n	80049c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b6:	61bb      	str	r3, [r7, #24]
        break;
 80049b8:	e004      	b.n	80049c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77bb      	strb	r3, [r7, #30]
        break;
 80049c2:	bf00      	nop
    }

    if (pclk != 0U)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d018      	beq.n	80049fc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	085a      	lsrs	r2, r3, #1
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	441a      	add	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d909      	bls.n	80049f8 <UART_SetConfig+0x238>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d205      	bcs.n	80049f8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	e001      	b.n	80049fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a08:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	efff69f3 	.word	0xefff69f3
 8004a18:	40013800 	.word	0x40013800
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40004400 	.word	0x40004400
 8004a24:	40004800 	.word	0x40004800
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01a      	beq.n	8004b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b2a:	d10a      	bne.n	8004b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b098      	sub	sp, #96	; 0x60
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b80:	f7fc f8ce 	bl	8000d20 <HAL_GetTick>
 8004b84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d12e      	bne.n	8004bf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f88c 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d021      	beq.n	8004bf2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e6      	bne.n	8004bae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e062      	b.n	8004cb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d149      	bne.n	8004c94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f856 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d03c      	beq.n	8004c94 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	623b      	str	r3, [r7, #32]
   return(result);
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c6c:	61fa      	str	r2, [r7, #28]
 8004c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e011      	b.n	8004cb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3758      	adds	r7, #88	; 0x58
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd0:	e049      	b.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd8:	d045      	beq.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fc f821 	bl	8000d20 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e048      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d031      	beq.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d110      	bne.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2208      	movs	r2, #8
 8004d16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f8ff 	bl	8004f1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2208      	movs	r2, #8
 8004d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e029      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d40:	d111      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f8e5 	bl	8004f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e00f      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d0a6      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b096      	sub	sp, #88	; 0x58
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2222      	movs	r2, #34	; 0x22
 8004db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d028      	beq.n	8004e16 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc8:	4a3e      	ldr	r2, [pc, #248]	; (8004ec4 <UART_Start_Receive_DMA+0x134>)
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	4a3d      	ldr	r2, [pc, #244]	; (8004ec8 <UART_Start_Receive_DMA+0x138>)
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	4a3c      	ldr	r2, [pc, #240]	; (8004ecc <UART_Start_Receive_DMA+0x13c>)
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	2200      	movs	r2, #0
 8004de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3324      	adds	r3, #36	; 0x24
 8004dee:	4619      	mov	r1, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	461a      	mov	r2, r3
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	f7fc fc68 	bl	80016cc <HAL_DMA_Start_IT>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2210      	movs	r2, #16
 8004e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e051      	b.n	8004eba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e32:	657b      	str	r3, [r7, #84]	; 0x54
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e3e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	653b      	str	r3, [r7, #80]	; 0x50
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e70:	637a      	str	r2, [r7, #52]	; 0x34
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	613b      	str	r3, [r7, #16]
   return(result);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ea4:	623a      	str	r2, [r7, #32]
 8004ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	69f9      	ldr	r1, [r7, #28]
 8004eaa:	6a3a      	ldr	r2, [r7, #32]
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3758      	adds	r7, #88	; 0x58
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	08005095 	.word	0x08005095
 8004ec8:	080051bb 	.word	0x080051bb
 8004ecc:	080051f9 	.word	0x080051f9

08004ed0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004f10:	bf00      	nop
 8004f12:	3724      	adds	r7, #36	; 0x24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b095      	sub	sp, #84	; 0x54
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f42:	643b      	str	r3, [r7, #64]	; 0x40
 8004f44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d118      	bne.n	8004fc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0310 	bic.w	r3, r3, #16
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fd8:	bf00      	nop
 8004fda:	3754      	adds	r7, #84	; 0x54
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b090      	sub	sp, #64	; 0x40
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d037      	beq.n	800506a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	623b      	str	r3, [r7, #32]
   return(result);
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005022:	633a      	str	r2, [r7, #48]	; 0x30
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	60fb      	str	r3, [r7, #12]
   return(result);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
 800504c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	69b9      	ldr	r1, [r7, #24]
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	617b      	str	r3, [r7, #20]
   return(result);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005068:	e002      	b.n	8005070 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800506a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800506c:	f7fb f902 	bl	8000274 <HAL_UART_TxCpltCallback>
}
 8005070:	bf00      	nop
 8005072:	3740      	adds	r7, #64	; 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fb70 	bl	800476c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b09c      	sub	sp, #112	; 0x70
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d071      	beq.n	800518e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80050aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80050d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	667b      	str	r3, [r7, #100]	; 0x64
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005104:	647a      	str	r2, [r7, #68]	; 0x44
 8005106:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800510a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3308      	adds	r3, #8
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	623b      	str	r3, [r7, #32]
   return(result);
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	663b      	str	r3, [r7, #96]	; 0x60
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005138:	633a      	str	r2, [r7, #48]	; 0x30
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800513e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800514c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005158:	2b01      	cmp	r3, #1
 800515a:	d118      	bne.n	800518e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	60fb      	str	r3, [r7, #12]
   return(result);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0310 	bic.w	r3, r3, #16
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	69b9      	ldr	r1, [r7, #24]
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	617b      	str	r3, [r7, #20]
   return(result);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e6      	bne.n	800515c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	2200      	movs	r2, #0
 8005192:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	2b01      	cmp	r3, #1
 800519a:	d107      	bne.n	80051ac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051a2:	4619      	mov	r1, r3
 80051a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051a6:	f7ff faff 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051aa:	e002      	b.n	80051b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80051ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051ae:	f7fb f871 	bl	8000294 <HAL_UART_RxCpltCallback>
}
 80051b2:	bf00      	nop
 80051b4:	3770      	adds	r7, #112	; 0x70
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d109      	bne.n	80051ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4619      	mov	r1, r3
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff fae0 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051e8:	e002      	b.n	80051f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff fac8 	bl	8004780 <HAL_UART_RxHalfCpltCallback>
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005212:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b80      	cmp	r3, #128	; 0x80
 8005220:	d109      	bne.n	8005236 <UART_DMAError+0x3e>
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b21      	cmp	r3, #33	; 0x21
 8005226:	d106      	bne.n	8005236 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f7ff fe4d 	bl	8004ed0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d109      	bne.n	8005258 <UART_DMAError+0x60>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b22      	cmp	r3, #34	; 0x22
 8005248:	d106      	bne.n	8005258 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005252:	6978      	ldr	r0, [r7, #20]
 8005254:	f7ff fe62 	bl	8004f1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	f043 0210 	orr.w	r2, r3, #16
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005268:	6978      	ldr	r0, [r7, #20]
 800526a:	f7ff fa93 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fa7d 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b088      	sub	sp, #32
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fa ffc3 	bl	8000274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ee:	bf00      	nop
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <memset>:
 800530a:	4402      	add	r2, r0
 800530c:	4603      	mov	r3, r0
 800530e:	4293      	cmp	r3, r2
 8005310:	d100      	bne.n	8005314 <memset+0xa>
 8005312:	4770      	bx	lr
 8005314:	f803 1b01 	strb.w	r1, [r3], #1
 8005318:	e7f9      	b.n	800530e <memset+0x4>
	...

0800531c <__libc_init_array>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	4d0d      	ldr	r5, [pc, #52]	; (8005354 <__libc_init_array+0x38>)
 8005320:	4c0d      	ldr	r4, [pc, #52]	; (8005358 <__libc_init_array+0x3c>)
 8005322:	1b64      	subs	r4, r4, r5
 8005324:	10a4      	asrs	r4, r4, #2
 8005326:	2600      	movs	r6, #0
 8005328:	42a6      	cmp	r6, r4
 800532a:	d109      	bne.n	8005340 <__libc_init_array+0x24>
 800532c:	4d0b      	ldr	r5, [pc, #44]	; (800535c <__libc_init_array+0x40>)
 800532e:	4c0c      	ldr	r4, [pc, #48]	; (8005360 <__libc_init_array+0x44>)
 8005330:	f000 f818 	bl	8005364 <_init>
 8005334:	1b64      	subs	r4, r4, r5
 8005336:	10a4      	asrs	r4, r4, #2
 8005338:	2600      	movs	r6, #0
 800533a:	42a6      	cmp	r6, r4
 800533c:	d105      	bne.n	800534a <__libc_init_array+0x2e>
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	f855 3b04 	ldr.w	r3, [r5], #4
 8005344:	4798      	blx	r3
 8005346:	3601      	adds	r6, #1
 8005348:	e7ee      	b.n	8005328 <__libc_init_array+0xc>
 800534a:	f855 3b04 	ldr.w	r3, [r5], #4
 800534e:	4798      	blx	r3
 8005350:	3601      	adds	r6, #1
 8005352:	e7f2      	b.n	800533a <__libc_init_array+0x1e>
 8005354:	080053d8 	.word	0x080053d8
 8005358:	080053d8 	.word	0x080053d8
 800535c:	080053d8 	.word	0x080053d8
 8005360:	080053dc 	.word	0x080053dc

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
