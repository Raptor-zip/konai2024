
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f68  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800514c  0800514c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800514c  0800514c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800514c  0800514c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800514c  0800514c  0000614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005154  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000010  08005164  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005164  00007270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011932  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ea  00000000  00000000  00018972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b75  00000000  00000000  0001bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000214e  00000000  00000000  0001c87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001196e  00000000  00000000  0001e9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7649  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000d79c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000db798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050d8 	.word	0x080050d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080050d8 	.word	0x080050d8

080001c8 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2200      	movs	r2, #0
 80001e0:	639a      	str	r2, [r3, #56]	@ 0x38
	ecan->filter.FilterIdLow = 0;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2200      	movs	r2, #0
 80001e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2200      	movs	r2, #0
 80001ec:	641a      	str	r2, [r3, #64]	@ 0x40
	ecan->filter.FilterMaskIdLow = 0;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	2200      	movs	r2, #0
 80001f2:	645a      	str	r2, [r3, #68]	@ 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	649a      	str	r2, [r3, #72]	@ 0x48

	if (can_nuumber == 1)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d103      	bne.n	8000208 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000206:	e002      	b.n	800020e <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	220e      	movs	r2, #14
 800020c:	64da      	str	r2, [r3, #76]	@ 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2200      	movs	r2, #0
 8000212:	651a      	str	r2, [r3, #80]	@ 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2201      	movs	r2, #1
 8000218:	655a      	str	r2, [r3, #84]	@ 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2201      	movs	r2, #1
 800021e:	659a      	str	r2, [r3, #88]	@ 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	220e      	movs	r2, #14
 8000224:	65da      	str	r2, [r3, #92]	@ 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3338      	adds	r3, #56	@ 0x38
 800022e:	4619      	mov	r1, r3
 8000230:	4610      	mov	r0, r2
 8000232:	f000 fe44 	bl	8000ebe <HAL_CAN_ConfigFilter>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <Easy_CAN6_Start+0x78>
		Error_Handler();
 800023c:	f000 faca 	bl	80007d4 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f000 ff47 	bl	80010da <HAL_CAN_ActivateNotification>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 8000252:	f000 fabf 	bl	80007d4 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fef9 	bl	8001052 <HAL_CAN_Start>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 8000266:	f001 f87a 	bl	800135e <HAL_NVIC_SystemReset>

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <HAL_UART_TxCpltCallback>:
	CyberGear_CANRxTask(&my_cyber[1], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[2], hcan, RxHeader, rxbuf);
	CyberGear_CANRxTask(&my_cyber[3], hcan, RxHeader, rxbuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <HAL_UART_TxCpltCallback+0x1c>)
 800027e:	2220      	movs	r2, #32
 8000280:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200000a0 	.word	0x200000a0

08000294 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* 受信完�?フラグ設�? */
 800029c:	4b04      	ldr	r3, [pc, #16]	@ (80002b0 <HAL_UART_RxCpltCallback+0x1c>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000248 	.word	0x20000248

080002b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002ba:	f000 fc7b 	bl	8000bb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002be:	f000 f8c9 	bl	8000454 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c2:	f000 fa3d 	bl	8000740 <MX_GPIO_Init>
	MX_DMA_Init();
 80002c6:	f000 fa15 	bl	80006f4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80002ca:	f000 f9e3 	bl	8000694 <MX_USART2_UART_Init>
	MX_CAN_Init();
 80002ce:	f000 f91b 	bl	8000508 <MX_CAN_Init>
	MX_TIM1_Init();
 80002d2:	f000 f94f 	bl	8000574 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 80002d6:	2202      	movs	r2, #2
 80002d8:	4951      	ldr	r1, [pc, #324]	@ (8000420 <main+0x16c>)
 80002da:	4852      	ldr	r0, [pc, #328]	@ (8000424 <main+0x170>)
 80002dc:	f7ff ff74 	bl	80001c8 <Easy_CAN6_Start>

	for (int i = 0; i < 4; i++) {
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e002      	b.n	80002ec <main+0x38>
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	3301      	adds	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	ddf9      	ble.n	80002e6 <main+0x32>
			CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
			CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
			CyberGear_EnableMotor(&my_cyber[i]);
		}
	}
	HAL_Delay(100);
 80002f2:	2064      	movs	r0, #100	@ 0x64
 80002f4:	f000 fcc4 	bl	8000c80 <HAL_Delay>

	HAL_UART_Transmit_DMA(&huart2,
 80002f8:	2221      	movs	r2, #33	@ 0x21
 80002fa:	494b      	ldr	r1, [pc, #300]	@ (8000428 <main+0x174>)
 80002fc:	484b      	ldr	r0, [pc, #300]	@ (800042c <main+0x178>)
 80002fe:	f003 fd49 	bl	8003d94 <HAL_UART_Transmit_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin);
 8000302:	2108      	movs	r1, #8
 8000304:	484a      	ldr	r0, [pc, #296]	@ (8000430 <main+0x17c>)
 8000306:	f001 fbd3 	bl	8001ab0 <HAL_GPIO_TogglePin>

		debug = HAL_UART_Receive_DMA(&huart2, rcvBuffer, 7);
 800030a:	2207      	movs	r2, #7
 800030c:	4949      	ldr	r1, [pc, #292]	@ (8000434 <main+0x180>)
 800030e:	4847      	ldr	r0, [pc, #284]	@ (800042c <main+0x178>)
 8000310:	f003 fdbc 	bl	8003e8c <HAL_UART_Receive_DMA>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	4b47      	ldr	r3, [pc, #284]	@ (8000438 <main+0x184>)
 800031a:	701a      	strb	r2, [r3, #0]
//		debug = HAL_UART_Receive(&huart2, rcvBuffer, 7, 1000);

		buf[0] = (unsigned char) rcvBuffer[1];
 800031c:	4b45      	ldr	r3, [pc, #276]	@ (8000434 <main+0x180>)
 800031e:	785a      	ldrb	r2, [r3, #1]
 8000320:	4b46      	ldr	r3, [pc, #280]	@ (800043c <main+0x188>)
 8000322:	701a      	strb	r2, [r3, #0]
		buf[1] = (unsigned char) rcvBuffer[2];
 8000324:	4b43      	ldr	r3, [pc, #268]	@ (8000434 <main+0x180>)
 8000326:	789a      	ldrb	r2, [r3, #2]
 8000328:	4b44      	ldr	r3, [pc, #272]	@ (800043c <main+0x188>)
 800032a:	705a      	strb	r2, [r3, #1]
		buf[2] = (unsigned char) rcvBuffer[3];
 800032c:	4b41      	ldr	r3, [pc, #260]	@ (8000434 <main+0x180>)
 800032e:	78da      	ldrb	r2, [r3, #3]
 8000330:	4b42      	ldr	r3, [pc, #264]	@ (800043c <main+0x188>)
 8000332:	709a      	strb	r2, [r3, #2]
		buf[3] = (unsigned char) rcvBuffer[4];
 8000334:	4b3f      	ldr	r3, [pc, #252]	@ (8000434 <main+0x180>)
 8000336:	791a      	ldrb	r2, [r3, #4]
 8000338:	4b40      	ldr	r3, [pc, #256]	@ (800043c <main+0x188>)
 800033a:	70da      	strb	r2, [r3, #3]
		buf[4] = (unsigned char) rcvBuffer[5];
 800033c:	4b3d      	ldr	r3, [pc, #244]	@ (8000434 <main+0x180>)
 800033e:	795a      	ldrb	r2, [r3, #5]
 8000340:	4b3e      	ldr	r3, [pc, #248]	@ (800043c <main+0x188>)
 8000342:	711a      	strb	r2, [r3, #4]
		buf[5] = (unsigned char) rcvBuffer[6];
 8000344:	4b3b      	ldr	r3, [pc, #236]	@ (8000434 <main+0x180>)
 8000346:	799a      	ldrb	r2, [r3, #6]
 8000348:	4b3c      	ldr	r3, [pc, #240]	@ (800043c <main+0x188>)
 800034a:	715a      	strb	r2, [r3, #5]
		buf[6] = (unsigned char) rcvBuffer[0];
 800034c:	4b39      	ldr	r3, [pc, #228]	@ (8000434 <main+0x180>)
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	4b3a      	ldr	r3, [pc, #232]	@ (800043c <main+0x188>)
 8000352:	719a      	strb	r2, [r3, #6]
//			memcpy(buf, &rcvBuffer[1], sizeof(buf));
//		}else{
//			memcpy(buf, &rcvBuffer[0], sizeof(buf));
//		}

		memcpy(&uart_prev_count, &buf[0], sizeof(uint8_t));
 8000354:	4b39      	ldr	r3, [pc, #228]	@ (800043c <main+0x188>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b39      	ldr	r3, [pc, #228]	@ (8000440 <main+0x18c>)
 800035a:	701a      	strb	r2, [r3, #0]

		uint8_t reversed_bytes[4];
		reversed_bytes[0] = buf[2];
 800035c:	4b37      	ldr	r3, [pc, #220]	@ (800043c <main+0x188>)
 800035e:	789b      	ldrb	r3, [r3, #2]
 8000360:	723b      	strb	r3, [r7, #8]
		reversed_bytes[1] = buf[1];
 8000362:	4b36      	ldr	r3, [pc, #216]	@ (800043c <main+0x188>)
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	727b      	strb	r3, [r7, #9]
		memcpy(&command_id, reversed_bytes, sizeof(uint16_t));
 8000368:	893a      	ldrh	r2, [r7, #8]
 800036a:	4b36      	ldr	r3, [pc, #216]	@ (8000444 <main+0x190>)
 800036c:	801a      	strh	r2, [r3, #0]

		uint8_t _temp_command_content[4];
		memcpy(_temp_command_content, &buf[3], sizeof(float));
 800036e:	4b33      	ldr	r3, [pc, #204]	@ (800043c <main+0x188>)
 8000370:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8000374:	607b      	str	r3, [r7, #4]
		// バイト列を逆順にコピー
		for (int j = 0; j < 4; j++) {
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
 800037a:	e00f      	b.n	800039c <main+0xe8>
			reversed_bytes[j] = _temp_command_content[3 - j];
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	f1c3 0303 	rsb	r3, r3, #3
 8000382:	3318      	adds	r3, #24
 8000384:	443b      	add	r3, r7
 8000386:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800038a:	f107 0208 	add.w	r2, r7, #8
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	4413      	add	r3, r2
 8000392:	460a      	mov	r2, r1
 8000394:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	3301      	adds	r3, #1
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	2b03      	cmp	r3, #3
 80003a0:	ddec      	ble.n	800037c <main+0xc8>
		}
		memcpy(&command_content, reversed_bytes, sizeof(float));
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a28      	ldr	r2, [pc, #160]	@ (8000448 <main+0x194>)
 80003a6:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);
//
//    sprintf(str, "data[1] : %d\n", data[1]);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 0xFFFF);

		switch (command_id) {
 80003a8:	4b26      	ldr	r3, [pc, #152]	@ (8000444 <main+0x190>)
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	3b16      	subs	r3, #22
 80003ae:	2b06      	cmp	r3, #6
 80003b0:	d832      	bhi.n	8000418 <main+0x164>
 80003b2:	a201      	add	r2, pc, #4	@ (adr r2, 80003b8 <main+0x104>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003d5 	.word	0x080003d5
 80003bc:	08000419 	.word	0x08000419
 80003c0:	080003df 	.word	0x080003df
 80003c4:	08000419 	.word	0x08000419
 80003c8:	080003e9 	.word	0x080003e9
 80003cc:	080003f3 	.word	0x080003f3
 80003d0:	0800040f 	.word	0x0800040f
		case 22:
			motor_speed[0] = command_content;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000448 <main+0x194>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a1c      	ldr	r2, [pc, #112]	@ (800044c <main+0x198>)
 80003da:	6013      	str	r3, [r2, #0]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[0], (float) motor_speed[0]);
			}
			break;
 80003dc:	e01c      	b.n	8000418 <main+0x164>

		case 24:
			motor_speed[1] = command_content;
 80003de:	4b1a      	ldr	r3, [pc, #104]	@ (8000448 <main+0x194>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1a      	ldr	r2, [pc, #104]	@ (800044c <main+0x198>)
 80003e4:	6053      	str	r3, [r2, #4]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[1], (float) motor_speed[1]);
			}
			break;
 80003e6:	e017      	b.n	8000418 <main+0x164>

		case 26:
			motor_speed[2] = command_content;
 80003e8:	4b17      	ldr	r3, [pc, #92]	@ (8000448 <main+0x194>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a17      	ldr	r2, [pc, #92]	@ (800044c <main+0x198>)
 80003ee:	6093      	str	r3, [r2, #8]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[2], (float) motor_speed[2]);
			}
			break;
 80003f0:	e012      	b.n	8000418 <main+0x164>

		case 27:
			debug_2 = 1919;
 80003f2:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <main+0x19c>)
 80003f4:	f240 727f 	movw	r2, #1919	@ 0x77f
 80003f8:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e002      	b.n	8000406 <main+0x152>
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b03      	cmp	r3, #3
 800040a:	ddf9      	ble.n	8000400 <main+0x14c>
					CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
					CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
					CyberGear_EnableMotor(&my_cyber[i]);
				}
			}
			break;
 800040c:	e004      	b.n	8000418 <main+0x164>

		case 28:
			motor_speed[3] = command_content;
 800040e:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <main+0x194>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <main+0x198>)
 8000414:	60d3      	str	r3, [r2, #12]
			if (is_run_CyberGear) {
				CyberGear_ControlSpeed(&my_cyber[3], (float) motor_speed[3]);
			}
			break;
 8000416:	bf00      	nop
		}

		HAL_Delay(9);
 8000418:	2009      	movs	r0, #9
 800041a:	f000 fc31 	bl	8000c80 <HAL_Delay>
	while (1) {
 800041e:	e770      	b.n	8000302 <main+0x4e>
 8000420:	2000002c 	.word	0x2000002c
 8000424:	200001b4 	.word	0x200001b4
 8000428:	080050f0 	.word	0x080050f0
 800042c:	200000a0 	.word	0x200000a0
 8000430:	48000400 	.word	0x48000400
 8000434:	2000024c 	.word	0x2000024c
 8000438:	200001b0 	.word	0x200001b0
 800043c:	2000022c 	.word	0x2000022c
 8000440:	20000240 	.word	0x20000240
 8000444:	20000242 	.word	0x20000242
 8000448:	20000244 	.word	0x20000244
 800044c:	2000021c 	.word	0x2000021c
 8000450:	20000000 	.word	0x20000000

08000454 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b096      	sub	sp, #88	@ 0x58
 8000458:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800045a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800045e:	2228      	movs	r2, #40	@ 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f004 fe0b 	bl	800507e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000468:	f107 031c 	add.w	r3, r7, #28
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
 8000486:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	2302      	movs	r3, #2
 800048a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000490:	2310      	movs	r3, #16
 8000492:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000494:	2302      	movs	r3, #2
 8000496:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	2300      	movs	r3, #0
 800049a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800049c:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80004a0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fb1c 	bl	8001ae4 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x62>
		Error_Handler();
 80004b2:	f000 f98f 	bl	80007d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2302      	movs	r3, #2
 80004bc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004cc:	f107 031c 	add.w	r3, r7, #28
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fb44 	bl	8002b60 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x8e>
		Error_Handler();
 80004de:	f000 f979 	bl	80007d4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80004e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004e6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fd6c 	bl	8002fcc <HAL_RCCEx_PeriphCLKConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xaa>
		Error_Handler();
 80004fa:	f000 f96b 	bl	80007d4 <Error_Handler>
	}
}
 80004fe:	bf00      	nop
 8000500:	3758      	adds	r7, #88	@ 0x58
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_CAN_Init+0x64>)
 800050e:	4a18      	ldr	r2, [pc, #96]	@ (8000570 <MX_CAN_Init+0x68>)
 8000510:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 8000512:	4b16      	ldr	r3, [pc, #88]	@ (800056c <MX_CAN_Init+0x64>)
 8000514:	2202      	movs	r2, #2
 8000516:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_CAN_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800051e:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_CAN_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_CAN_Init+0x64>)
 8000526:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800052a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_CAN_Init+0x64>)
 800052e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000532:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <MX_CAN_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_CAN_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_CAN_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_CAN_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_CAN_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_CAN_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_CAN_Init+0x64>)
 800055a:	f000 fbb5 	bl	8000cc8 <HAL_CAN_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_CAN_Init+0x60>
		Error_Handler();
 8000564:	f000 f936 	bl	80007d4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000002c 	.word	0x2000002c
 8000570:	40006400 	.word	0x40006400

08000574 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	@ 0x58
 8000578:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800057a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000586:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	222c      	movs	r2, #44	@ 0x2c
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fd6c 	bl	800507e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80005a6:	4b39      	ldr	r3, [pc, #228]	@ (800068c <MX_TIM1_Init+0x118>)
 80005a8:	4a39      	ldr	r2, [pc, #228]	@ (8000690 <MX_TIM1_Init+0x11c>)
 80005aa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80005ac:	4b37      	ldr	r3, [pc, #220]	@ (800068c <MX_TIM1_Init+0x118>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b36      	ldr	r3, [pc, #216]	@ (800068c <MX_TIM1_Init+0x118>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80005b8:	4b34      	ldr	r3, [pc, #208]	@ (800068c <MX_TIM1_Init+0x118>)
 80005ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005be:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	4b32      	ldr	r3, [pc, #200]	@ (800068c <MX_TIM1_Init+0x118>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80005c6:	4b31      	ldr	r3, [pc, #196]	@ (800068c <MX_TIM1_Init+0x118>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	@ (800068c <MX_TIM1_Init+0x118>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80005d2:	482e      	ldr	r0, [pc, #184]	@ (800068c <MX_TIM1_Init+0x118>)
 80005d4:	f002 fe20 	bl	8003218 <HAL_TIM_PWM_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM1_Init+0x6e>
		Error_Handler();
 80005de:	f000 f8f9 	bl	80007d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e2:	2300      	movs	r3, #0
 80005e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005e6:	2300      	movs	r3, #0
 80005e8:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80005ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005f2:	4619      	mov	r1, r3
 80005f4:	4825      	ldr	r0, [pc, #148]	@ (800068c <MX_TIM1_Init+0x118>)
 80005f6:	f003 fa99 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000600:	f000 f8e8 	bl	80007d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000620:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	4818      	ldr	r0, [pc, #96]	@ (800068c <MX_TIM1_Init+0x118>)
 800062a:	f002 fe4d 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000634:	f000 f8ce 	bl	80007d4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800064c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000650:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800065a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4619      	mov	r1, r3
 800066c:	4807      	ldr	r0, [pc, #28]	@ (800068c <MX_TIM1_Init+0x118>)
 800066e:	f003 facb 	bl	8003c08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000678:	f000 f8ac 	bl	80007d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800067c:	4803      	ldr	r0, [pc, #12]	@ (800068c <MX_TIM1_Init+0x118>)
 800067e:	f000 f937 	bl	80008f0 <HAL_TIM_MspPostInit>
}
 8000682:	bf00      	nop
 8000684:	3758      	adds	r7, #88	@ 0x58
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000054 	.word	0x20000054
 8000690:	40012c00 	.word	0x40012c00

08000694 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006a0:	4a13      	ldr	r2, [pc, #76]	@ (80006f0 <MX_USART2_UART_Init+0x5c>)
 80006a2:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006b8:	220c      	movs	r2, #12
 80006ba:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_USART2_UART_Init+0x54>)
 80006d6:	f003 fb0f 	bl	8003cf8 <HAL_UART_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_USART2_UART_Init+0x50>
		Error_Handler();
 80006e0:	f000 f878 	bl	80007d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000a0 	.word	0x200000a0
 80006ec:	40004400 	.word	0x40004400
 80006f0:	0007a120 	.word	0x0007a120

080006f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_DMA_Init+0x48>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <MX_DMA_Init+0x48>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_DMA_Init+0x48>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2010      	movs	r0, #16
 8000718:	f000 fdf7 	bl	800130a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800071c:	2010      	movs	r0, #16
 800071e:	f000 fe10 	bl	8001342 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2011      	movs	r0, #17
 8000728:	f000 fdef 	bl	800130a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800072c:	2011      	movs	r0, #17
 800072e:	f000 fe08 	bl	8001342 <HAL_NVIC_EnableIRQ>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_GPIO_Init+0x8c>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <MX_GPIO_Init+0x8c>)
 800075c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_GPIO_Init+0x8c>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_GPIO_Init+0x8c>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <MX_GPIO_Init+0x8c>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_GPIO_Init+0x8c>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_GPIO_Init+0x8c>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a10      	ldr	r2, [pc, #64]	@ (80007cc <MX_GPIO_Init+0x8c>)
 800078c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_GPIO_Init+0x8c>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2108      	movs	r1, #8
 80007a2:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <MX_GPIO_Init+0x90>)
 80007a4:	f001 f96c 	bl	8001a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUILDIN_LED_Pin */
	GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 80007a8:	2308      	movs	r3, #8
 80007aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_GPIO_Init+0x90>)
 80007c0:	f000 ffec 	bl	800179c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x44>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_MspInit+0x44>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_MspInit+0x44>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a18      	ldr	r2, [pc, #96]	@ (80008a8 <HAL_CAN_MspInit+0x80>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d129      	bne.n	800089e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_CAN_MspInit+0x84>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <HAL_CAN_MspInit+0x84>)
 8000850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_CAN_MspInit+0x84>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_CAN_MspInit+0x84>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <HAL_CAN_MspInit+0x84>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_CAN_MspInit+0x84>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800087a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800088c:	2309      	movs	r3, #9
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f000 ff7f 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40006400 	.word	0x40006400
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <HAL_TIM_PWM_MspInit+0x38>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d10b      	bne.n	80008da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <HAL_TIM_PWM_MspInit+0x3c>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a09      	ldr	r2, [pc, #36]	@ (80008ec <HAL_TIM_PWM_MspInit+0x3c>)
 80008c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <HAL_TIM_PWM_MspInit+0x3c>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40012c00 	.word	0x40012c00
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <HAL_TIM_MspPostInit+0x68>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d11d      	bne.n	800094e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_TIM_MspPostInit+0x6c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a11      	ldr	r2, [pc, #68]	@ (800095c <HAL_TIM_MspPostInit+0x6c>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_TIM_MspPostInit+0x6c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800092a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800092e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800093c:	2306      	movs	r3, #6
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094a:	f000 ff27 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40012c00 	.word	0x40012c00
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a42      	ldr	r2, [pc, #264]	@ (8000a88 <HAL_UART_MspInit+0x128>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d17d      	bne.n	8000a7e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	4b42      	ldr	r3, [pc, #264]	@ (8000a8c <HAL_UART_MspInit+0x12c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a41      	ldr	r2, [pc, #260]	@ (8000a8c <HAL_UART_MspInit+0x12c>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a8c <HAL_UART_MspInit+0x12c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a8c <HAL_UART_MspInit+0x12c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a8c <HAL_UART_MspInit+0x12c>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b39      	ldr	r3, [pc, #228]	@ (8000a8c <HAL_UART_MspInit+0x12c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009b2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c4:	2307      	movs	r3, #7
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d2:	f000 fee3 	bl	800179c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000a94 <HAL_UART_MspInit+0x134>)
 80009da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009de:	2210      	movs	r2, #16
 80009e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e8:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009ea:	2280      	movs	r2, #128	@ 0x80
 80009ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f4:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a00:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a06:	4822      	ldr	r0, [pc, #136]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 8000a08:	f000 fcb9 	bl	800137e <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000a12:	f7ff fedf 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 8000a1a:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <HAL_UART_MspInit+0x130>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a24:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <HAL_UART_MspInit+0x13c>)
 8000a26:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a36:	2280      	movs	r2, #128	@ 0x80
 8000a38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a48:	2220      	movs	r2, #32
 8000a4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a52:	4811      	ldr	r0, [pc, #68]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a54:	f000 fc93 	bl	800137e <HAL_DMA_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000a5e:	f7ff feb9 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a0c      	ldr	r2, [pc, #48]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a66:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_UART_MspInit+0x138>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2026      	movs	r0, #38	@ 0x26
 8000a74:	f000 fc49 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a78:	2026      	movs	r0, #38	@ 0x26
 8000a7a:	f000 fc62 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	@ 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	20000128 	.word	0x20000128
 8000a94:	40020080 	.word	0x40020080
 8000a98:	2000016c 	.word	0x2000016c
 8000a9c:	4002006c 	.word	0x4002006c

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 f8a3 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <DMA1_Channel6_IRQHandler+0x10>)
 8000b06:	f000 fd57 	bl	80015b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000016c 	.word	0x2000016c

08000b14 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <DMA1_Channel7_IRQHandler+0x10>)
 8000b1a:	f000 fd4d 	bl	80015b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000128 	.word	0x20000128

08000b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <USART2_IRQHandler+0x10>)
 8000b2e:	f003 f9f1 	bl	8003f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000a0 	.word	0x200000a0

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b98 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff ffea 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fa7f 	bl	8005090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fb8f 	bl	80002b4 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b98:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba4:	08005154 	.word	0x08005154
  ldr r2, =_sbss
 8000ba8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bac:	20000270 	.word	0x20000270

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_Init+0x28>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_Init+0x28>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 fb95 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f808 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fe06 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fbb1 	bl	8001366 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c1c:	f000 fb75 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000004 	.word	0x20000004
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	20000008 	.word	0x20000008

08000c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000000c 	.word	0x2000000c
 8000c64:	2000026c 	.word	0x2000026c

08000c68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2000026c 	.word	0x2000026c

08000c80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e0ed      	b.n	8000eb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fd9e 	bl	8000828 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0201 	orr.w	r2, r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cfc:	f7ff ffb4 	bl	8000c68 <HAL_GetTick>
 8000d00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d02:	e012      	b.n	8000d2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d04:	f7ff ffb0 	bl	8000c68 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b0a      	cmp	r3, #10
 8000d10:	d90b      	bls.n	8000d2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2205      	movs	r2, #5
 8000d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e0c5      	b.n	8000eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0e5      	beq.n	8000d04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0202 	bic.w	r2, r2, #2
 8000d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d48:	f7ff ff8e 	bl	8000c68 <HAL_GetTick>
 8000d4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d4e:	e012      	b.n	8000d76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d50:	f7ff ff8a 	bl	8000c68 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d90b      	bls.n	8000d76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e09f      	b.n	8000eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e5      	bne.n	8000d50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7e1b      	ldrb	r3, [r3, #24]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d108      	bne.n	8000d9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e007      	b.n	8000dae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7e5b      	ldrb	r3, [r3, #25]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d108      	bne.n	8000dc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e007      	b.n	8000dd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7e9b      	ldrb	r3, [r3, #26]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d108      	bne.n	8000df2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0220 	orr.w	r2, r2, #32
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0220 	bic.w	r2, r2, #32
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7edb      	ldrb	r3, [r3, #27]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d108      	bne.n	8000e1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0210 	bic.w	r2, r2, #16
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e007      	b.n	8000e2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0210 	orr.w	r2, r2, #16
 8000e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7f1b      	ldrb	r3, [r3, #28]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d108      	bne.n	8000e46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0208 	orr.w	r2, r2, #8
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	e007      	b.n	8000e56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0208 	bic.w	r2, r2, #8
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7f5b      	ldrb	r3, [r3, #29]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d108      	bne.n	8000e70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0204 	orr.w	r2, r2, #4
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0204 	bic.w	r2, r2, #4
 8000e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	ea42 0103 	orr.w	r1, r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	1e5a      	subs	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b087      	sub	sp, #28
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ed6:	7cfb      	ldrb	r3, [r7, #19]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d003      	beq.n	8000ee4 <HAL_CAN_ConfigFilter+0x26>
 8000edc:	7cfb      	ldrb	r3, [r7, #19]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	f040 80aa 	bne.w	8001038 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2201      	movs	r2, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d123      	bne.n	8000f66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3248      	adds	r2, #72	@ 0x48
 8000f46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5c:	6979      	ldr	r1, [r7, #20]
 8000f5e:	3348      	adds	r3, #72	@ 0x48
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d122      	bne.n	8000fb4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3248      	adds	r2, #72	@ 0x48
 8000f94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000faa:	6979      	ldr	r1, [r7, #20]
 8000fac:	3348      	adds	r3, #72	@ 0x48
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	440b      	add	r3, r1
 8000fb2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d109      	bne.n	8000fd0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d109      	bne.n	8000ffc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000ffa:	e007      	b.n	800100c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	431a      	orrs	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d107      	bne.n	8001024 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800102a:	f023 0201 	bic.w	r2, r3, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	e006      	b.n	8001046 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
  }
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d12e      	bne.n	80010c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800107e:	f7ff fdf3 	bl	8000c68 <HAL_GetTick>
 8001082:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001084:	e012      	b.n	80010ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001086:	f7ff fdef 	bl	8000c68 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b0a      	cmp	r3, #10
 8001092:	d90b      	bls.n	80010ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2205      	movs	r2, #5
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1e5      	bne.n	8001086 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e006      	b.n	80010d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
  }
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d002      	beq.n	80010f8 <HAL_CAN_ActivateNotification+0x1e>
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d109      	bne.n	800110c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6959      	ldr	r1, [r3, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	e006      	b.n	800111a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
  }
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	@ (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	@ (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001288:	f3bf 8f4f 	dsb	sy
}
 800128c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <__NVIC_SystemReset+0x24>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001296:	4904      	ldr	r1, [pc, #16]	@ (80012a8 <__NVIC_SystemReset+0x24>)
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_SystemReset+0x28>)
 800129a:	4313      	orrs	r3, r2
 800129c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800129e:	f3bf 8f4f 	dsb	sy
}
 80012a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <__NVIC_SystemReset+0x20>
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0004 	.word	0x05fa0004

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d4:	f7ff ff78 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff13 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff28 	bl	8001170 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff78 	bl	800121c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff47 	bl	80011c8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff1b 	bl	800118c <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001362:	f7ff ff8f 	bl	8001284 <__NVIC_SystemReset>

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff9e 	bl	80012b0 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e037      	b.n	8001404 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f9b8 	bl	800175c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}  
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_DMA_Start_IT+0x20>
 8001428:	2302      	movs	r3, #2
 800142a:	e04a      	b.n	80014c2 <HAL_DMA_Start_IT+0xb6>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800143a:	2b01      	cmp	r3, #1
 800143c:	d13a      	bne.n	80014b4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f94b 	bl	80016fe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 020e 	orr.w	r2, r2, #14
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e00f      	b.n	80014a2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 020a 	orr.w	r2, r2, #10
 8001490:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0204 	bic.w	r2, r2, #4
 80014a0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e005      	b.n	80014c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2204      	movs	r2, #4
 80014e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e020      	b.n	8001530 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 020e 	bic.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800154e:	2b02      	cmp	r3, #2
 8001550:	d005      	beq.n	800155e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e027      	b.n	80015ae <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020e 	bic.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
    } 
  }
  return status;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	2204      	movs	r2, #4
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d024      	beq.n	800162a <HAL_DMA_IRQHandler+0x72>
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01f      	beq.n	800162a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0204 	bic.w	r2, r2, #4
 8001606:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d06a      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001628:	e065      	b.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2202      	movs	r2, #2
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d02c      	beq.n	8001694 <HAL_DMA_IRQHandler+0xdc>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d027      	beq.n	8001694 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10b      	bne.n	800166a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 020a 	bic.w	r2, r2, #10
 8001660:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001672:	2102      	movs	r1, #2
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001686:	2b00      	cmp	r3, #0
 8001688:	d035      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001692:	e030      	b.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	2208      	movs	r2, #8
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d028      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d023      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 020e 	bic.w	r2, r2, #14
 80016bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
    }
  }
}  
 80016f4:	e7ff      	b.n	80016f6 <HAL_DMA_IRQHandler+0x13e>
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b10      	cmp	r3, #16
 800172a:	d108      	bne.n	800173e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800173c:	e007      	b.n	800174e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	60da      	str	r2, [r3, #12]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <DMA_CalcBaseAndBitshift+0x34>)
 800176c:	4413      	add	r3, r2
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <DMA_CalcBaseAndBitshift+0x38>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	009a      	lsls	r2, r3, #2
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <DMA_CalcBaseAndBitshift+0x3c>)
 8001780:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	bffdfff8 	.word	0xbffdfff8
 8001794:	cccccccd 	.word	0xcccccccd
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e14e      	b.n	8001a4a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8140 	beq.w	8001a44 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d005      	beq.n	80017dc <HAL_GPIO_Init+0x40>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 0201 	and.w	r2, r3, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b03      	cmp	r3, #3
 8001848:	d017      	beq.n	800187a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d123      	bne.n	80018ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 809a 	beq.w	8001a44 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b55      	ldr	r3, [pc, #340]	@ (8001a68 <HAL_GPIO_Init+0x2cc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a54      	ldr	r2, [pc, #336]	@ (8001a68 <HAL_GPIO_Init+0x2cc>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b52      	ldr	r3, [pc, #328]	@ (8001a68 <HAL_GPIO_Init+0x2cc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001928:	4a50      	ldr	r2, [pc, #320]	@ (8001a6c <HAL_GPIO_Init+0x2d0>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001952:	d013      	beq.n	800197c <HAL_GPIO_Init+0x1e0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <HAL_GPIO_Init+0x2d4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1dc>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a45      	ldr	r2, [pc, #276]	@ (8001a74 <HAL_GPIO_Init+0x2d8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1d8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a44      	ldr	r2, [pc, #272]	@ (8001a78 <HAL_GPIO_Init+0x2dc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1d4>
 800196c:	2303      	movs	r3, #3
 800196e:	e006      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 8001970:	2305      	movs	r3, #5
 8001972:	e004      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 8001974:	2302      	movs	r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 800197c:	2300      	movs	r3, #0
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4093      	lsls	r3, r2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800198e:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199c:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019c0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ea:	4a24      	ldr	r2, [pc, #144]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_GPIO_Init+0x2e0>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f aea9 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000c00 	.word	0x48000c00
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43d9      	mvns	r1, r3
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f001 b823 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 817d 	beq.w	8001e1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b20:	4bbc      	ldr	r3, [pc, #752]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4bb9      	ldr	r3, [pc, #740]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d15c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x10e>
 8001b38:	4bb6      	ldr	r3, [pc, #728]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b44:	d155      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x10e>
 8001b46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b4a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x94>
 8001b72:	4ba8      	ldr	r3, [pc, #672]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	e015      	b.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001b78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b7c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b90:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001bac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f002 021f 	and.w	r2, r2, #31
 8001bcc:	2101      	movs	r1, #1
 8001bce:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 811f 	beq.w	8001e18 <HAL_RCC_OscConfig+0x334>
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8116 	bne.w	8001e18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f000 bfaf 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12e>
 8001c04:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a82      	ldr	r2, [pc, #520]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e036      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x158>
 8001c22:	4b7c      	ldr	r3, [pc, #496]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7b      	ldr	r2, [pc, #492]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b79      	ldr	r3, [pc, #484]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a78      	ldr	r2, [pc, #480]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e021      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x184>
 8001c4e:	4b71      	ldr	r3, [pc, #452]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a70      	ldr	r2, [pc, #448]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
 8001c68:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a69      	ldr	r2, [pc, #420]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b67      	ldr	r3, [pc, #412]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a66      	ldr	r2, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c80:	4b64      	ldr	r3, [pc, #400]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	f023 020f 	bic.w	r2, r3, #15
 8001c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	495f      	ldr	r1, [pc, #380]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d059      	beq.n	8001d5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe ffdd 	bl	8000c68 <HAL_GetTick>
 8001cae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ffd8 	bl	8000c68 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d902      	bls.n	8001cca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f000 bf43 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 8001cca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001cde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0x218>
 8001cf6:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x244>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ab      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1d0>
 8001d5c:	e05d      	b.n	8001e1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe ff83 	bl	8000c68 <HAL_GetTick>
 8001d62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe ff7e 	bl	8000c68 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	@ 0x64
 8001d76:	d902      	bls.n	8001d7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f000 bee9 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 8001d7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d102      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2cc>
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_OscConfig+0x2f8>
 8001db0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001de4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001de8:	fa92 f2a2 	rbit	r2, r2
 8001dec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001df0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ab      	bne.n	8001d68 <HAL_RCC_OscConfig+0x284>
 8001e10:	e003      	b.n	8001e1a <HAL_RCC_OscConfig+0x336>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 817d 	beq.w	800212a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e30:	4ba6      	ldr	r3, [pc, #664]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e3c:	4ba3      	ldr	r3, [pc, #652]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d172      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001e48:	4ba0      	ldr	r3, [pc, #640]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d16c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3a0>
 8001e7e:	4b93      	ldr	r3, [pc, #588]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e013      	b.n	8001eac <HAL_RCC_OscConfig+0x3c8>
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ea8:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	2202      	movs	r2, #2
 8001eae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001eb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001eb6:	fa92 f2a2 	rbit	r2, r2
 8001eba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ebe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 021f 	and.w	r2, r2, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x410>
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 be2e 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b75      	ldr	r3, [pc, #468]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	21f8      	movs	r1, #248	@ 0xf8
 8001f0a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f12:	fa91 f1a1 	rbit	r1, r1
 8001f16:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f1e:	fab1 f181 	clz	r1, r1
 8001f22:	b2c9      	uxtb	r1, r1
 8001f24:	408b      	lsls	r3, r1
 8001f26:	4969      	ldr	r1, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2c:	e0fd      	b.n	800212a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8088 	beq.w	8002050 <HAL_RCC_OscConfig+0x56c>
 8001f40:	2301      	movs	r3, #1
 8001f42:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f52:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	2301      	movs	r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fe7c 	bl	8000c68 <HAL_GetTick>
 8001f70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe fe77 	bl	8000c68 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d902      	bls.n	8001f8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f000 bde2 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4d8>
 8001fb6:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e013      	b.n	8001fe4 <HAL_RCC_OscConfig+0x500>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001fea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ff6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0af      	beq.n	8001f76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	21f8      	movs	r1, #248	@ 0xf8
 800202c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002034:	fa91 f1a1 	rbit	r1, r1
 8002038:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800203c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002040:	fab1 f181 	clz	r1, r1
 8002044:	b2c9      	uxtb	r1, r1
 8002046:	408b      	lsls	r3, r1
 8002048:	4920      	ldr	r1, [pc, #128]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	e06c      	b.n	800212a <HAL_RCC_OscConfig+0x646>
 8002050:	2301      	movs	r3, #1
 8002052:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002062:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002070:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	461a      	mov	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fdf4 	bl	8000c68 <HAL_GetTick>
 8002080:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe fdef 	bl	8000c68 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d902      	bls.n	800209c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	f000 bd5a 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80020ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d104      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5ec>
 80020c6:	4b01      	ldr	r3, [pc, #4]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e015      	b.n	80020f8 <HAL_RCC_OscConfig+0x614>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020f4:	4bc8      	ldr	r3, [pc, #800]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	2202      	movs	r2, #2
 80020fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800210a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ad      	bne.n	8002086 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8110 	beq.w	8002360 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d079      	beq.n	8002244 <HAL_RCC_OscConfig+0x760>
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4bab      	ldr	r3, [pc, #684]	@ (800241c <HAL_RCC_OscConfig+0x938>)
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7fe fd75 	bl	8000c68 <HAL_GetTick>
 800217e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe fd70 	bl	8000c68 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d902      	bls.n	800219a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	f000 bcdb 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021d8:	2202      	movs	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 80021f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002200:	2102      	movs	r1, #2
 8002202:	6019      	str	r1, [r3, #0]
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f1a3 	rbit	r1, r3
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800221a:	6019      	str	r1, [r3, #0]
  return result;
 800221c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002220:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0a0      	beq.n	8002184 <HAL_RCC_OscConfig+0x6a0>
 8002242:	e08d      	b.n	8002360 <HAL_RCC_OscConfig+0x87c>
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002270:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4b68      	ldr	r3, [pc, #416]	@ (800241c <HAL_RCC_OscConfig+0x938>)
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	461a      	mov	r2, r3
 8002282:	2300      	movs	r3, #0
 8002284:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7fe fcef 	bl	8000c68 <HAL_GetTick>
 800228a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe fcea 	bl	8000c68 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d902      	bls.n	80022a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f000 bc55 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022d2:	2202      	movs	r2, #2
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022f6:	2202      	movs	r2, #2
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002312:	4b41      	ldr	r3, [pc, #260]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 8002314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800231e:	2102      	movs	r1, #2
 8002320:	6019      	str	r1, [r3, #0]
 8002322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002326:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f1a3 	rbit	r1, r3
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002338:	6019      	str	r1, [r3, #0]
  return result;
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d197      	bne.n	8002290 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 81a1 	beq.w	80026b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237c:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d116      	bne.n	80023b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fc4b 	bl	8000c68 <HAL_GetTick>
 80023d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	e009      	b.n	80023ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fc46 	bl	8000c68 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	@ 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e3b1      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ef      	beq.n	80023d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d10d      	bne.n	8002424 <HAL_RCC_OscConfig+0x940>
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a02      	ldr	r2, [pc, #8]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e03c      	b.n	8002490 <HAL_RCC_OscConfig+0x9ac>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	10908120 	.word	0x10908120
 8002420:	40007000 	.word	0x40007000
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x96a>
 8002434:	4bc1      	ldr	r3, [pc, #772]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4ac0      	ldr	r2, [pc, #768]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4bbe      	ldr	r3, [pc, #760]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4abd      	ldr	r2, [pc, #756]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e020      	b.n	8002490 <HAL_RCC_OscConfig+0x9ac>
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x994>
 800245e:	4bb7      	ldr	r3, [pc, #732]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4ab6      	ldr	r2, [pc, #728]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4bb4      	ldr	r3, [pc, #720]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4ab3      	ldr	r2, [pc, #716]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x9ac>
 8002478:	4bb0      	ldr	r3, [pc, #704]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4aaf      	ldr	r2, [pc, #700]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	4bad      	ldr	r3, [pc, #692]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4aac      	ldr	r2, [pc, #688]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8081 	beq.w	80025a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fbe1 	bl	8000c68 <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fbdc 	bl	8000c68 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e345      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024cc:	2202      	movs	r2, #2
 80024ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800250a:	601a      	str	r2, [r3, #0]
  return result;
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002514:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0xa4c>
 800252a:	4b84      	ldr	r3, [pc, #528]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0xa74>
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002538:	2202      	movs	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002560:	2102      	movs	r1, #2
 8002562:	6011      	str	r1, [r2, #0]
 8002564:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002568:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	fa92 f1a2 	rbit	r1, r2
 8002572:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002576:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800257a:	6011      	str	r1, [r2, #0]
  return result;
 800257c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002580:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d084      	beq.n	80024ac <HAL_RCC_OscConfig+0x9c8>
 80025a2:	e07f      	b.n	80026a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7fe fb60 	bl	8000c68 <HAL_GetTick>
 80025a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fb5b 	bl	8000c68 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e2c4      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025ce:	2202      	movs	r2, #2
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025f2:	2202      	movs	r2, #2
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800260c:	601a      	str	r2, [r3, #0]
  return result;
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002616:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0xb4e>
 800262c:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	e013      	b.n	800265a <HAL_RCC_OscConfig+0xb76>
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	4b39      	ldr	r3, [pc, #228]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002662:	2102      	movs	r1, #2
 8002664:	6011      	str	r1, [r2, #0]
 8002666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	fa92 f1a2 	rbit	r1, r2
 8002674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002678:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800267c:	6011      	str	r1, [r2, #0]
  return result;
 800267e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002682:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f002 021f 	and.w	r2, r2, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d184      	bne.n	80025ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8242 	beq.w	8002b4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	f000 8213 	beq.w	8002afe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f040 8162 	bne.w	80029ae <HAL_RCC_OscConfig+0xeca>
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002718:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002724:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fa9a 	bl	8000c68 <HAL_GetTick>
 8002734:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	e00c      	b.n	8002754 <HAL_RCC_OscConfig+0xc70>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fa92 	bl	8000c68 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1fd      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800275c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002778:	601a      	str	r2, [r3, #0]
  return result;
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002782:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0xcba>
 8002798:	4bb0      	ldr	r3, [pc, #704]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	e027      	b.n	80027ee <HAL_RCC_OscConfig+0xd0a>
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4b9c      	ldr	r3, [pc, #624]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027fa:	6011      	str	r1, [r2, #0]
 80027fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002800:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	fa92 f1a2 	rbit	r1, r2
 800280a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002812:	6011      	str	r1, [r2, #0]
  return result;
 8002814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002818:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	fab2 f282 	clz	r2, r2
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f042 0220 	orr.w	r2, r2, #32
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f002 021f 	and.w	r2, r2, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d182      	bne.n	8002740 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283a:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	430b      	orrs	r3, r1
 800285c:	497f      	ldr	r1, [pc, #508]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800286a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002886:	601a      	str	r2, [r3, #0]
  return result;
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002890:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800289c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe f9de 	bl	8000c68 <HAL_GetTick>
 80028ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b0:	e009      	b.n	80028c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe f9d9 	bl	8000c68 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e144      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028ea:	601a      	str	r2, [r3, #0]
  return result;
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_RCC_OscConfig+0xe2c>
 800290a:	4b54      	ldr	r3, [pc, #336]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e027      	b.n	8002960 <HAL_RCC_OscConfig+0xe7c>
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002918:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800293e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002964:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002968:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002972:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	fa92 f1a2 	rbit	r1, r2
 800297c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002980:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002984:	6011      	str	r1, [r2, #0]
  return result;
 8002986:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0220 	orr.w	r2, r2, #32
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d082      	beq.n	80028b2 <HAL_RCC_OscConfig+0xdce>
 80029ac:	e0cf      	b.n	8002b4e <HAL_RCC_OscConfig+0x106a>
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029d2:	601a      	str	r2, [r3, #0]
  return result;
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe f938 	bl	8000c68 <HAL_GetTick>
 80029f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe f933 	bl	8000c68 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e09e      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a36:	601a      	str	r2, [r3, #0]
  return result;
 8002a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d104      	bne.n	8002a60 <HAL_RCC_OscConfig+0xf7c>
 8002a56:	4b01      	ldr	r3, [pc, #4]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	e029      	b.n	8002ab0 <HAL_RCC_OscConfig+0xfcc>
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCC_OscConfig+0x1078>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ab8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ac2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	fa92 f1a2 	rbit	r1, r2
 8002acc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ad0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ad4:	6011      	str	r1, [r2, #0]
  return result;
 8002ad6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ada:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f002 021f 	and.w	r2, r2, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d180      	bne.n	80029fe <HAL_RCC_OscConfig+0xf1a>
 8002afc:	e027      	b.n	8002b4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01e      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_OscConfig+0x1078>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b09e      	sub	sp, #120	@ 0x78
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e162      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b90      	ldr	r3, [pc, #576]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b8d      	ldr	r3, [pc, #564]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	498b      	ldr	r1, [pc, #556]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e14a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b82      	ldr	r3, [pc, #520]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	497f      	ldr	r1, [pc, #508]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80dc 	beq.w	8002d8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d13c      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xf6>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xa6>
 8002c00:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e00f      	b.n	8002c26 <HAL_RCC_ClockConfig+0xc6>
 8002c06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c22:	4b67      	ldr	r3, [pc, #412]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c2e:	fa92 f2a2 	rbit	r2, r2
 8002c32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c36:	fab2 f282 	clz	r2, r2
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f042 0220 	orr.w	r2, r2, #32
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f002 021f 	and.w	r2, r2, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d17b      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0f3      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d13c      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x178>
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x128>
 8002c82:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
 8002c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca4:	4b46      	ldr	r3, [pc, #280]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cb0:	fa92 f2a2 	rbit	r2, r2
 8002cb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f042 0220 	orr.w	r2, r2, #32
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f002 021f 	and.w	r2, r2, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d13a      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0b2      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
 8002cfa:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e00d      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1bc>
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	61ba      	str	r2, [r7, #24]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	617a      	str	r2, [r7, #20]
  return result;
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e079      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	491a      	ldr	r1, [pc, #104]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fd ff84 	bl	8000c68 <HAL_GetTick>
 8002d60:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fd ff80 	bl	8000c68 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e061      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d214      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4906      	ldr	r1, [pc, #24]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e040      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	491a      	ldr	r1, [pc, #104]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4912      	ldr	r1, [pc, #72]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e02:	f000 f829 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e06:	4601      	mov	r1, r0
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e10:	22f0      	movs	r2, #240	@ 0xf0
 8002e12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	fa92 f2a2 	rbit	r2, r2
 8002e1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	40d3      	lsrs	r3, r2
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x2ec>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e2e:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <HAL_RCC_ClockConfig+0x2f0>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_RCC_ClockConfig+0x2f4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fed2 	bl	8000be0 <HAL_InitTick>
  
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3778      	adds	r7, #120	@ 0x78
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08005114 	.word	0x08005114
 8002e50:	20000004 	.word	0x20000004
 8002e54:	20000008 	.word	0x20000008

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b08b      	sub	sp, #44	@ 0x2c
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e72:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x30>
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x36>
 8002e86:	e03c      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e8a:	623b      	str	r3, [r7, #32]
      break;
 8002e8c:	e03c      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e94:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002e98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	fa92 f2a2 	rbit	r2, r2
 8002ea0:	607a      	str	r2, [r7, #4]
  return result;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	fab2 f282 	clz	r2, r2
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	40d3      	lsrs	r3, r2
 8002eac:	4a1c      	ldr	r2, [pc, #112]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002eb2:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	220f      	movs	r2, #15
 8002ebc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	60fa      	str	r2, [r7, #12]
  return result;
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	40d3      	lsrs	r3, r2
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef0:	e004      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	623b      	str	r3, [r7, #32]
      break;
 8002f00:	e002      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f04:	623b      	str	r3, [r7, #32]
      break;
 8002f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f08:	6a3b      	ldr	r3, [r7, #32]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	372c      	adds	r7, #44	@ 0x2c
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	007a1200 	.word	0x007a1200
 8002f20:	0800512c 	.word	0x0800512c
 8002f24:	0800513c 	.word	0x0800513c
 8002f28:	003d0900 	.word	0x003d0900

08002f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000004 	.word	0x20000004

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f4a:	f7ff ffef 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f4e:	4601      	mov	r1, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f58:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	603a      	str	r2, [r7, #0]
  return result;
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	40d3      	lsrs	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	08005124 	.word	0x08005124

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f8e:	f7ff ffcd 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f92:	4601      	mov	r1, r0
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f9c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	fa92 f2a2 	rbit	r2, r2
 8002fa8:	603a      	str	r2, [r7, #0]
  return result;
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	40d3      	lsrs	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08005124 	.word	0x08005124

08002fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b092      	sub	sp, #72	@ 0x48
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80cd 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff0:	4b86      	ldr	r3, [pc, #536]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10e      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b83      	ldr	r3, [pc, #524]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4a82      	ldr	r2, [pc, #520]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003006:	61d3      	str	r3, [r2, #28]
 8003008:	4b80      	ldr	r3, [pc, #512]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b7d      	ldr	r3, [pc, #500]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b7a      	ldr	r3, [pc, #488]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a79      	ldr	r2, [pc, #484]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fd fe19 	bl	8000c68 <HAL_GetTick>
 8003036:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fd fe15 	bl	8000c68 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	@ 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e0db      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003058:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003060:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d07d      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003070:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003072:	429a      	cmp	r2, r3
 8003074:	d076      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003084:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800308e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	4b5e      	ldr	r3, [pc, #376]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	461a      	mov	r2, r3
 80030a0:	2301      	movs	r3, #1
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b55      	ldr	r3, [pc, #340]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030c8:	4a50      	ldr	r2, [pc, #320]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d045      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd fdc6 	bl	8000c68 <HAL_GetTick>
 80030dc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fd fdc2 	bl	8000c68 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e086      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80030f6:	2302      	movs	r3, #2
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
 8003102:	2302      	movs	r3, #2
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	61fb      	str	r3, [r7, #28]
  return result;
 800310e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d102      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003124:	4b39      	ldr	r3, [pc, #228]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	e007      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800312a:	2302      	movs	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	4b35      	ldr	r3, [pc, #212]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	2202      	movs	r2, #2
 800313c:	613a      	str	r2, [r7, #16]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	60fa      	str	r2, [r7, #12]
  return result;
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	f002 021f 	and.w	r2, r2, #31
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0bd      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003164:	4b29      	ldr	r3, [pc, #164]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4926      	ldr	r1, [pc, #152]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003172:	4313      	orrs	r3, r2
 8003174:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003176:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4a22      	ldr	r2, [pc, #136]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003188:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003196:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	491a      	ldr	r1, [pc, #104]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b4:	4b15      	ldr	r3, [pc, #84]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	f023 0210 	bic.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4912      	ldr	r1, [pc, #72]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031d2:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	490b      	ldr	r1, [pc, #44]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4903      	ldr	r1, [pc, #12]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3748      	adds	r7, #72	@ 0x48
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
 8003214:	10908100 	.word	0x10908100

08003218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e049      	b.n	80032be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fb36 	bl	80008b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f000 f94a 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0ff      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b14      	cmp	r3, #20
 80032f2:	f200 80f0 	bhi.w	80034d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032f6:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003351 	.word	0x08003351
 8003300:	080034d7 	.word	0x080034d7
 8003304:	080034d7 	.word	0x080034d7
 8003308:	080034d7 	.word	0x080034d7
 800330c:	08003391 	.word	0x08003391
 8003310:	080034d7 	.word	0x080034d7
 8003314:	080034d7 	.word	0x080034d7
 8003318:	080034d7 	.word	0x080034d7
 800331c:	080033d3 	.word	0x080033d3
 8003320:	080034d7 	.word	0x080034d7
 8003324:	080034d7 	.word	0x080034d7
 8003328:	080034d7 	.word	0x080034d7
 800332c:	08003413 	.word	0x08003413
 8003330:	080034d7 	.word	0x080034d7
 8003334:	080034d7 	.word	0x080034d7
 8003338:	080034d7 	.word	0x080034d7
 800333c:	08003455 	.word	0x08003455
 8003340:	080034d7 	.word	0x080034d7
 8003344:	080034d7 	.word	0x080034d7
 8003348:	080034d7 	.word	0x080034d7
 800334c:	08003495 	.word	0x08003495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f942 	bl	80035e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0208 	orr.w	r2, r2, #8
 800336a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0204 	bic.w	r2, r2, #4
 800337a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6999      	ldr	r1, [r3, #24]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	619a      	str	r2, [r3, #24]
      break;
 800338e:	e0a5      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f9a8 	bl	80036ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6999      	ldr	r1, [r3, #24]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	619a      	str	r2, [r3, #24]
      break;
 80033d0:	e084      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fa07 	bl	80037ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0208 	orr.w	r2, r2, #8
 80033ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0204 	bic.w	r2, r2, #4
 80033fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69d9      	ldr	r1, [r3, #28]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	61da      	str	r2, [r3, #28]
      break;
 8003410:	e064      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fa65 	bl	80038e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800342c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800343c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69d9      	ldr	r1, [r3, #28]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	021a      	lsls	r2, r3, #8
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	61da      	str	r2, [r3, #28]
      break;
 8003452:	e043      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 faa8 	bl	80039b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003492:	e023      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fae6 	bl	8003a6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034d4:	e002      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
      break;
 80034da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a32      	ldr	r2, [pc, #200]	@ (80035cc <TIM_Base_SetConfig+0xdc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x28>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x28>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2f      	ldr	r2, [pc, #188]	@ (80035d0 <TIM_Base_SetConfig+0xe0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a27      	ldr	r2, [pc, #156]	@ (80035cc <TIM_Base_SetConfig+0xdc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <TIM_Base_SetConfig+0x6a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003538:	d00f      	beq.n	800355a <TIM_Base_SetConfig+0x6a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <TIM_Base_SetConfig+0xe0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x6a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a23      	ldr	r2, [pc, #140]	@ (80035d4 <TIM_Base_SetConfig+0xe4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x6a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a22      	ldr	r2, [pc, #136]	@ (80035d8 <TIM_Base_SetConfig+0xe8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x6a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a21      	ldr	r2, [pc, #132]	@ (80035dc <TIM_Base_SetConfig+0xec>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0e      	ldr	r2, [pc, #56]	@ (80035cc <TIM_Base_SetConfig+0xdc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0xc0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <TIM_Base_SetConfig+0xe4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0xc0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0d      	ldr	r2, [pc, #52]	@ (80035d8 <TIM_Base_SetConfig+0xe8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0xc0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0c      	ldr	r2, [pc, #48]	@ (80035dc <TIM_Base_SetConfig+0xec>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d103      	bne.n	80035b8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	615a      	str	r2, [r3, #20]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40014400 	.word	0x40014400
 80035dc:	40014800 	.word	0x40014800

080035e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a28      	ldr	r2, [pc, #160]	@ (80036dc <TIM_OC1_SetConfig+0xfc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00b      	beq.n	8003658 <TIM_OC1_SetConfig+0x78>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a27      	ldr	r2, [pc, #156]	@ (80036e0 <TIM_OC1_SetConfig+0x100>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_OC1_SetConfig+0x78>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a26      	ldr	r2, [pc, #152]	@ (80036e4 <TIM_OC1_SetConfig+0x104>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC1_SetConfig+0x78>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a25      	ldr	r2, [pc, #148]	@ (80036e8 <TIM_OC1_SetConfig+0x108>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d10c      	bne.n	8003672 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0308 	bic.w	r3, r3, #8
 800365e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a19      	ldr	r2, [pc, #100]	@ (80036dc <TIM_OC1_SetConfig+0xfc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_OC1_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a18      	ldr	r2, [pc, #96]	@ (80036e0 <TIM_OC1_SetConfig+0x100>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_OC1_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <TIM_OC1_SetConfig+0x104>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC1_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <TIM_OC1_SetConfig+0x108>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d111      	bne.n	80036b6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	621a      	str	r2, [r3, #32]
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800

080036ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f023 0210 	bic.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800371e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0320 	bic.w	r3, r3, #32
 800373a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a24      	ldr	r2, [pc, #144]	@ (80037dc <TIM_OC2_SetConfig+0xf0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10d      	bne.n	800376c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a1b      	ldr	r2, [pc, #108]	@ (80037dc <TIM_OC2_SetConfig+0xf0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_OC2_SetConfig+0xa0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1a      	ldr	r2, [pc, #104]	@ (80037e0 <TIM_OC2_SetConfig+0xf4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_OC2_SetConfig+0xa0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <TIM_OC2_SetConfig+0xf8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC2_SetConfig+0xa0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a18      	ldr	r2, [pc, #96]	@ (80037e8 <TIM_OC2_SetConfig+0xfc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d113      	bne.n	80037b4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003792:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800379a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40014400 	.word	0x40014400
 80037e8:	40014800 	.word	0x40014800

080037ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <TIM_OC3_SetConfig+0xec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10d      	bne.n	800386a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003868:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1a      	ldr	r2, [pc, #104]	@ (80038d8 <TIM_OC3_SetConfig+0xec>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_OC3_SetConfig+0x9e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <TIM_OC3_SetConfig+0xf0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <TIM_OC3_SetConfig+0x9e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <TIM_OC3_SetConfig+0xf4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_OC3_SetConfig+0x9e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <TIM_OC3_SetConfig+0xf8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d113      	bne.n	80038b2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	621a      	str	r2, [r3, #32]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a16      	ldr	r2, [pc, #88]	@ (80039a0 <TIM_OC4_SetConfig+0xb8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_OC4_SetConfig+0x7c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a15      	ldr	r2, [pc, #84]	@ (80039a4 <TIM_OC4_SetConfig+0xbc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_OC4_SetConfig+0x7c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a14      	ldr	r2, [pc, #80]	@ (80039a8 <TIM_OC4_SetConfig+0xc0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_OC4_SetConfig+0x7c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a13      	ldr	r2, [pc, #76]	@ (80039ac <TIM_OC4_SetConfig+0xc4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d109      	bne.n	8003978 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800396a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800

080039b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a15      	ldr	r2, [pc, #84]	@ (8003a5c <TIM_OC5_SetConfig+0xac>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_OC5_SetConfig+0x72>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	@ (8003a60 <TIM_OC5_SetConfig+0xb0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_OC5_SetConfig+0x72>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a13      	ldr	r2, [pc, #76]	@ (8003a64 <TIM_OC5_SetConfig+0xb4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_OC5_SetConfig+0x72>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <TIM_OC5_SetConfig+0xb8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d109      	bne.n	8003a36 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800

08003a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	051b      	lsls	r3, r3, #20
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <TIM_OC6_SetConfig+0xb0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_OC6_SetConfig+0x74>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <TIM_OC6_SetConfig+0xb4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_OC6_SetConfig+0x74>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	@ (8003b24 <TIM_OC6_SetConfig+0xb8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_OC6_SetConfig+0x74>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a13      	ldr	r2, [pc, #76]	@ (8003b28 <TIM_OC6_SetConfig+0xbc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d109      	bne.n	8003af4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	029b      	lsls	r3, r3, #10
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800

08003b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e054      	b.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a17      	ldr	r2, [pc, #92]	@ (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bac:	d009      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a13      	ldr	r2, [pc, #76]	@ (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10c      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40014000 	.word	0x40014000

08003c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e060      	b.n	8003ce6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	@ (8003cf4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d115      	bne.n	8003cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	051b      	lsls	r3, r3, #20
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00

08003cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e040      	b.n	8003d8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fc fe20 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	@ 0x24
 8003d24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fbfc 	bl	8004534 <UART_SetConfig>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e022      	b.n	8003d8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fd26 	bl	80047a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fdad 	bl	80048e4 <UART_CheckIdleState>
 8003d8a:	4603      	mov	r3, r0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	@ 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d165      	bne.n	8003e76 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_UART_Transmit_DMA+0x22>
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e05e      	b.n	8003e78 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	88fa      	ldrh	r2, [r7, #6]
 8003dcc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2221      	movs	r2, #33	@ 0x21
 8003ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d027      	beq.n	8003e36 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <HAL_UART_Transmit_DMA+0xec>)
 8003dec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <HAL_UART_Transmit_DMA+0xf0>)
 8003df4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	4a23      	ldr	r2, [pc, #140]	@ (8003e88 <HAL_UART_Transmit_DMA+0xf4>)
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	2200      	movs	r2, #0
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3328      	adds	r3, #40	@ 0x28
 8003e16:	461a      	mov	r2, r3
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	f7fd faf7 	bl	800140c <HAL_DMA_Start_IT>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2210      	movs	r2, #16
 8003e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e020      	b.n	8003e78 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2240      	movs	r2, #64	@ 0x40
 8003e3c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5e:	623a      	str	r2, [r7, #32]
 8003e60:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	69f9      	ldr	r1, [r7, #28]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e5      	bne.n	8003e3e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	@ 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	08004d59 	.word	0x08004d59
 8003e84:	08004ded 	.word	0x08004ded
 8003e88:	08004f6d 	.word	0x08004f6d

08003e8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	@ 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d132      	bne.n	8003f0a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_UART_Receive_DMA+0x24>
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e02b      	b.n	8003f0c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d018      	beq.n	8003efa <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	69f9      	ldr	r1, [r7, #28]
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fdff 	bl	8004b04 <UART_Start_Receive_DMA>
 8003f06:	4603      	mov	r3, r0
 8003f08:	e000      	b.n	8003f0c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	@ 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b0ba      	sub	sp, #232	@ 0xe8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f42:	4013      	ands	r3, r2
 8003f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d115      	bne.n	8003f7c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00f      	beq.n	8003f7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 82ab 	beq.w	80044c8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
      }
      return;
 8003f7a:	e2a5      	b.n	80044c8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8117 	beq.w	80041b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f96:	4b85      	ldr	r3, [pc, #532]	@ (80041ac <HAL_UART_IRQHandler+0x298>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 810a 	beq.w	80041b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d011      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xbc>
 8003fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d011      	beq.n	8004000 <HAL_UART_IRQHandler+0xec>
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2202      	movs	r2, #2
 8003fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d011      	beq.n	8004030 <HAL_UART_IRQHandler+0x11c>
 800400c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00b      	beq.n	8004030 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2204      	movs	r2, #4
 800401e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800404c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2208      	movs	r2, #8
 800405a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004062:	f043 0208 	orr.w	r2, r3, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_UART_IRQHandler+0x18a>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800408c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8211 	beq.w	80044cc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d04f      	beq.n	8004196 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fdca 	bl	8004c90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d141      	bne.n	800418e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004136:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800413a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800414e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1d9      	bne.n	800410a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	2b00      	cmp	r3, #0
 800415c:	d013      	beq.n	8004186 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <HAL_UART_IRQHandler+0x29c>)
 8004164:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd f9e6 	bl	800153c <HAL_DMA_Abort_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d017      	beq.n	80041a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004180:	4610      	mov	r0, r2
 8004182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e00f      	b.n	80041a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9be 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e00b      	b.n	80041a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9ba 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e007      	b.n	80041a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9b6 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041a4:	e192      	b.n	80044cc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a6:	bf00      	nop
    return;
 80041a8:	e190      	b.n	80044cc <HAL_UART_IRQHandler+0x5b8>
 80041aa:	bf00      	nop
 80041ac:	04000120 	.word	0x04000120
 80041b0:	08004feb 	.word	0x08004feb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	f040 814b 	bne.w	8004454 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8144 	beq.w	8004454 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 813d 	beq.w	8004454 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2210      	movs	r2, #16
 80041e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	f040 80b5 	bne.w	800435c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8164 	beq.w	80044d0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800420e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004212:	429a      	cmp	r2, r3
 8004214:	f080 815c 	bcs.w	80044d0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800421e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b20      	cmp	r3, #32
 800422a:	f000 8086 	beq.w	800433a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004242:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800425c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004264:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1da      	bne.n	800422e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800429c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e1      	bne.n	8004278 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e3      	bne.n	80042b4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430a:	f023 0310 	bic.w	r3, r3, #16
 800430e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800431c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800431e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800432a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e4      	bne.n	80042fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004334:	4618      	mov	r0, r3
 8004336:	f7fd f8c8 	bl	80014ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800434c:	b29b      	uxth	r3, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	b29b      	uxth	r3, r3
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8e1 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800435a:	e0b9      	b.n	80044d0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004368:	b29b      	uxth	r3, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80ab 	beq.w	80044d4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800437e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80a6 	beq.w	80044d4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e4      	bne.n	8004388 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	623b      	str	r3, [r7, #32]
   return(result);
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e3      	bne.n	80043be <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	60fb      	str	r3, [r7, #12]
   return(result);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0310 	bic.w	r3, r3, #16
 800441e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	617b      	str	r3, [r7, #20]
   return(result);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e4      	bne.n	800440a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004446:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f865 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004452:	e03f      	b.n	80044d4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <HAL_UART_IRQHandler+0x56a>
 8004460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fdf7 	bl	800506a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800447c:	e02d      	b.n	80044da <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01c      	beq.n	80044d8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
    }
    return;
 80044a6:	e017      	b.n	80044d8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <HAL_UART_IRQHandler+0x5c6>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fda8 	bl	8005016 <UART_EndTransmit_IT>
    return;
 80044c6:	e008      	b.n	80044da <HAL_UART_IRQHandler+0x5c6>
      return;
 80044c8:	bf00      	nop
 80044ca:	e006      	b.n	80044da <HAL_UART_IRQHandler+0x5c6>
    return;
 80044cc:	bf00      	nop
 80044ce:	e004      	b.n	80044da <HAL_UART_IRQHandler+0x5c6>
      return;
 80044d0:	bf00      	nop
 80044d2:	e002      	b.n	80044da <HAL_UART_IRQHandler+0x5c6>
      return;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HAL_UART_IRQHandler+0x5c6>
    return;
 80044d8:	bf00      	nop
  }

}
 80044da:	37e8      	adds	r7, #232	@ 0xe8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8a      	ldr	r3, [pc, #552]	@ (8004788 <UART_SetConfig+0x254>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	430b      	orrs	r3, r1
 800456a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a78      	ldr	r2, [pc, #480]	@ (800478c <UART_SetConfig+0x258>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d120      	bne.n	80045f2 <UART_SetConfig+0xbe>
 80045b0:	4b77      	ldr	r3, [pc, #476]	@ (8004790 <UART_SetConfig+0x25c>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d817      	bhi.n	80045ec <UART_SetConfig+0xb8>
 80045bc:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <UART_SetConfig+0x90>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e1 	.word	0x080045e1
 80045cc:	080045e7 	.word	0x080045e7
 80045d0:	080045db 	.word	0x080045db
 80045d4:	2300      	movs	r3, #0
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e01d      	b.n	8004616 <UART_SetConfig+0xe2>
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e01a      	b.n	8004616 <UART_SetConfig+0xe2>
 80045e0:	2304      	movs	r3, #4
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e017      	b.n	8004616 <UART_SetConfig+0xe2>
 80045e6:	2308      	movs	r3, #8
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e014      	b.n	8004616 <UART_SetConfig+0xe2>
 80045ec:	2310      	movs	r3, #16
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e011      	b.n	8004616 <UART_SetConfig+0xe2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a67      	ldr	r2, [pc, #412]	@ (8004794 <UART_SetConfig+0x260>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d102      	bne.n	8004602 <UART_SetConfig+0xce>
 80045fc:	2300      	movs	r3, #0
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e009      	b.n	8004616 <UART_SetConfig+0xe2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a64      	ldr	r2, [pc, #400]	@ (8004798 <UART_SetConfig+0x264>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d102      	bne.n	8004612 <UART_SetConfig+0xde>
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e001      	b.n	8004616 <UART_SetConfig+0xe2>
 8004612:	2310      	movs	r3, #16
 8004614:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461e:	d15a      	bne.n	80046d6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d827      	bhi.n	8004676 <UART_SetConfig+0x142>
 8004626:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <UART_SetConfig+0xf8>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004651 	.word	0x08004651
 8004630:	08004659 	.word	0x08004659
 8004634:	08004661 	.word	0x08004661
 8004638:	08004677 	.word	0x08004677
 800463c:	08004667 	.word	0x08004667
 8004640:	08004677 	.word	0x08004677
 8004644:	08004677 	.word	0x08004677
 8004648:	08004677 	.word	0x08004677
 800464c:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7fe fc78 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8004654:	61b8      	str	r0, [r7, #24]
        break;
 8004656:	e013      	b.n	8004680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fc96 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 800465c:	61b8      	str	r0, [r7, #24]
        break;
 800465e:	e00f      	b.n	8004680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b4e      	ldr	r3, [pc, #312]	@ (800479c <UART_SetConfig+0x268>)
 8004662:	61bb      	str	r3, [r7, #24]
        break;
 8004664:	e00c      	b.n	8004680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7fe fbf7 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 800466a:	61b8      	str	r0, [r7, #24]
        break;
 800466c:	e008      	b.n	8004680 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004672:	61bb      	str	r3, [r7, #24]
        break;
 8004674:	e004      	b.n	8004680 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	77bb      	strb	r3, [r7, #30]
        break;
 800467e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d074      	beq.n	8004770 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	005a      	lsls	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d916      	bls.n	80046d0 <UART_SetConfig+0x19c>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a8:	d212      	bcs.n	80046d0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b29a      	uxth	r2, r3
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	89fa      	ldrh	r2, [r7, #14]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e04f      	b.n	8004770 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77bb      	strb	r3, [r7, #30]
 80046d4:	e04c      	b.n	8004770 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d6:	7ffb      	ldrb	r3, [r7, #31]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d828      	bhi.n	800472e <UART_SetConfig+0x1fa>
 80046dc:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <UART_SetConfig+0x1b0>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004719 	.word	0x08004719
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	0800472f 	.word	0x0800472f
 8004700:	0800472f 	.word	0x0800472f
 8004704:	08004727 	.word	0x08004727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe fc1c 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 800470c:	61b8      	str	r0, [r7, #24]
        break;
 800470e:	e013      	b.n	8004738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7fe fc3a 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8004714:	61b8      	str	r0, [r7, #24]
        break;
 8004716:	e00f      	b.n	8004738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004718:	4b20      	ldr	r3, [pc, #128]	@ (800479c <UART_SetConfig+0x268>)
 800471a:	61bb      	str	r3, [r7, #24]
        break;
 800471c:	e00c      	b.n	8004738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7fe fb9b 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8004722:	61b8      	str	r0, [r7, #24]
        break;
 8004724:	e008      	b.n	8004738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472a:	61bb      	str	r3, [r7, #24]
        break;
 800472c:	e004      	b.n	8004738 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	77bb      	strb	r3, [r7, #30]
        break;
 8004736:	bf00      	nop
    }

    if (pclk != 0U)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	085a      	lsrs	r2, r3, #1
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	441a      	add	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b0f      	cmp	r3, #15
 8004756:	d909      	bls.n	800476c <UART_SetConfig+0x238>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475e:	d205      	bcs.n	800476c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e001      	b.n	8004770 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800477c:	7fbb      	ldrb	r3, [r7, #30]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	efff69f3 	.word	0xefff69f3
 800478c:	40013800 	.word	0x40013800
 8004790:	40021000 	.word	0x40021000
 8004794:	40004400 	.word	0x40004400
 8004798:	40004800 	.word	0x40004800
 800479c:	007a1200 	.word	0x007a1200

080047a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489e:	d10a      	bne.n	80048b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b098      	sub	sp, #96	@ 0x60
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f4:	f7fc f9b8 	bl	8000c68 <HAL_GetTick>
 80048f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b08      	cmp	r3, #8
 8004906:	d12e      	bne.n	8004966 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f88c 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d021      	beq.n	8004966 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004936:	653b      	str	r3, [r7, #80]	@ 0x50
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004940:	647b      	str	r3, [r7, #68]	@ 0x44
 8004942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800494e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e6      	bne.n	8004922 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e062      	b.n	8004a2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d149      	bne.n	8004a08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f856 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d03c      	beq.n	8004a08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	623b      	str	r3, [r7, #32]
   return(result);
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e6      	bne.n	800498e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e0:	61fa      	str	r2, [r7, #28]
 80049e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	617b      	str	r3, [r7, #20]
   return(result);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e011      	b.n	8004a2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3758      	adds	r7, #88	@ 0x58
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	e049      	b.n	8004ada <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a4c:	d045      	beq.n	8004ada <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fc f90b 	bl	8000c68 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e048      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d031      	beq.n	8004ada <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d110      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f8ff 	bl	8004c90 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2208      	movs	r2, #8
 8004a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e029      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab4:	d111      	bne.n	8004ada <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f8e5 	bl	8004c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e00f      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d0a6      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b096      	sub	sp, #88	@ 0x58
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2222      	movs	r2, #34	@ 0x22
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d028      	beq.n	8004b8a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c38 <UART_Start_Receive_DMA+0x134>)
 8004b3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b44:	4a3d      	ldr	r2, [pc, #244]	@ (8004c3c <UART_Start_Receive_DMA+0x138>)
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c40 <UART_Start_Receive_DMA+0x13c>)
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b54:	2200      	movs	r2, #0
 8004b56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3324      	adds	r3, #36	@ 0x24
 8004b62:	4619      	mov	r1, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	461a      	mov	r2, r3
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	f7fc fc4e 	bl	800140c <HAL_DMA_Start_IT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2210      	movs	r2, #16
 8004b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e051      	b.n	8004c2e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bb2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004be4:	637a      	str	r2, [r7, #52]	@ 0x34
 8004be6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	613b      	str	r3, [r7, #16]
   return(result);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3308      	adds	r3, #8
 8004c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c18:	623a      	str	r2, [r7, #32]
 8004c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	6a3a      	ldr	r2, [r7, #32]
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3758      	adds	r7, #88	@ 0x58
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	08004e09 	.word	0x08004e09
 8004c3c:	08004f2f 	.word	0x08004f2f
 8004c40:	08004f6d 	.word	0x08004f6d

08004c44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	@ 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	613b      	str	r3, [r7, #16]
   return(result);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e6      	bne.n	8004c4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004c84:	bf00      	nop
 8004c86:	3724      	adds	r7, #36	@ 0x24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b095      	sub	sp, #84	@ 0x54
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e6      	bne.n	8004c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d118      	bne.n	8004d38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f023 0310 	bic.w	r3, r3, #16
 8004d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	613b      	str	r3, [r7, #16]
   return(result);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d4c:	bf00      	nop
 8004d4e:	3754      	adds	r7, #84	@ 0x54
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b090      	sub	sp, #64	@ 0x40
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d037      	beq.n	8004dde <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	623b      	str	r3, [r7, #32]
   return(result);
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3308      	adds	r3, #8
 8004d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e5      	bne.n	8004d76 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e6      	bne.n	8004daa <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ddc:	e002      	b.n	8004de4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8004dde:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004de0:	f7fb fa48 	bl	8000274 <HAL_UART_TxCpltCallback>
}
 8004de4:	bf00      	nop
 8004de6:	3740      	adds	r7, #64	@ 0x40
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fb70 	bl	80044e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b09c      	sub	sp, #112	@ 0x70
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d071      	beq.n	8004f02 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e6      	bne.n	8004e26 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e78:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e7a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004eac:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d118      	bne.n	8004f02 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0310 	bic.w	r3, r3, #16
 8004ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	617b      	str	r3, [r7, #20]
   return(result);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e6      	bne.n	8004ed0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f04:	2200      	movs	r2, #0
 8004f06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d107      	bne.n	8004f20 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f16:	4619      	mov	r1, r3
 8004f18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f1a:	f7ff faff 	bl	800451c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f1e:	e002      	b.n	8004f26 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f22:	f7fb f9b7 	bl	8000294 <HAL_UART_RxCpltCallback>
}
 8004f26:	bf00      	nop
 8004f28:	3770      	adds	r7, #112	@ 0x70
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d109      	bne.n	8004f5e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fae0 	bl	800451c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f5c:	e002      	b.n	8004f64 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fac8 	bl	80044f4 <HAL_UART_RxHalfCpltCallback>
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d109      	bne.n	8004faa <UART_DMAError+0x3e>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b21      	cmp	r3, #33	@ 0x21
 8004f9a:	d106      	bne.n	8004faa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	f7ff fe4d 	bl	8004c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	d109      	bne.n	8004fcc <UART_DMAError+0x60>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b22      	cmp	r3, #34	@ 0x22
 8004fbc:	d106      	bne.n	8004fcc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004fc6:	6978      	ldr	r0, [r7, #20]
 8004fc8:	f7ff fe62 	bl	8004c90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd2:	f043 0210 	orr.w	r2, r3, #16
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fdc:	6978      	ldr	r0, [r7, #20]
 8004fde:	f7ff fa93 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe2:	bf00      	nop
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff fa7d 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b088      	sub	sp, #32
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	60bb      	str	r3, [r7, #8]
   return(result);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6979      	ldr	r1, [r7, #20]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	613b      	str	r3, [r7, #16]
   return(result);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e6      	bne.n	800501e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fb f909 	bl	8000274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005062:	bf00      	nop
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <memset>:
 800507e:	4402      	add	r2, r0
 8005080:	4603      	mov	r3, r0
 8005082:	4293      	cmp	r3, r2
 8005084:	d100      	bne.n	8005088 <memset+0xa>
 8005086:	4770      	bx	lr
 8005088:	f803 1b01 	strb.w	r1, [r3], #1
 800508c:	e7f9      	b.n	8005082 <memset+0x4>
	...

08005090 <__libc_init_array>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4d0d      	ldr	r5, [pc, #52]	@ (80050c8 <__libc_init_array+0x38>)
 8005094:	4c0d      	ldr	r4, [pc, #52]	@ (80050cc <__libc_init_array+0x3c>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	2600      	movs	r6, #0
 800509c:	42a6      	cmp	r6, r4
 800509e:	d109      	bne.n	80050b4 <__libc_init_array+0x24>
 80050a0:	4d0b      	ldr	r5, [pc, #44]	@ (80050d0 <__libc_init_array+0x40>)
 80050a2:	4c0c      	ldr	r4, [pc, #48]	@ (80050d4 <__libc_init_array+0x44>)
 80050a4:	f000 f818 	bl	80050d8 <_init>
 80050a8:	1b64      	subs	r4, r4, r5
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	2600      	movs	r6, #0
 80050ae:	42a6      	cmp	r6, r4
 80050b0:	d105      	bne.n	80050be <__libc_init_array+0x2e>
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b8:	4798      	blx	r3
 80050ba:	3601      	adds	r6, #1
 80050bc:	e7ee      	b.n	800509c <__libc_init_array+0xc>
 80050be:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c2:	4798      	blx	r3
 80050c4:	3601      	adds	r6, #1
 80050c6:	e7f2      	b.n	80050ae <__libc_init_array+0x1e>
 80050c8:	0800514c 	.word	0x0800514c
 80050cc:	0800514c 	.word	0x0800514c
 80050d0:	0800514c 	.word	0x0800514c
 80050d4:	08005150 	.word	0x08005150

080050d8 <_init>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr

080050e4 <_fini>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr
