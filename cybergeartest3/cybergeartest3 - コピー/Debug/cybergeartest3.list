
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b0  080035b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035b0  080035b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b0  080035b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  080035c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080035c4  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb7c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000197b  00000000  00000000  0002bbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f1  00000000  00000000  0002de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001acf2  00000000  00000000  0002e521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b42d  00000000  00000000  00049213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d582  00000000  00000000  00054640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000236c  00000000  00000000  000f1bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f3f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800354c 	.word	0x0800354c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800354c 	.word	0x0800354c

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	; 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f003 f96a 	bl	8003530 <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	; 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f9a6 	bl	80005fa <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	; 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8cd 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	; 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8ac 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	; 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f888 	bl	80004ea <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	; 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	; 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f864 	bl	80004ea <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_ControlSpeed>:
void CyberGear_CurrentControlPram(CyberGear_Typedef *cyber, float kp, float ki,
		float gain);
void CyberGear_ControlSpeed(CyberGear_Typedef *cyber, float target_speed) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	ed87 0a00 	vstr	s0, [r7]
	cyber->cybermotion.velocity = target_speed;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
	union float_binary b_speed;
	b_speed.data = make_float_writedata(target_speed, V_MIN, V_MAX);
 8000442:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8000446:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 800044a:	ed97 0a00 	vldr	s0, [r7]
 800044e:	f7ff febb 	bl	80001c8 <make_float_writedata>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700A, b_speed.bin);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	461a      	mov	r2, r3
 8000460:	f247 010a 	movw	r1, #28682	; 0x700a
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f840 	bl	80004ea <CyberGear_WriteIndexParam>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af02      	add	r7, sp, #8
 8000478:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	b29a      	uxth	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7959      	ldrb	r1, [r3, #5]
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	460b      	mov	r3, r1
 8000494:	2103      	movs	r1, #3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff fec0 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80004a2:	200a      	movs	r0, #10
 80004a4:	4798      	blx	r3
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af02      	add	r7, sp, #8
 80004b4:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7959      	ldrb	r1, [r3, #5]
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	460b      	mov	r3, r1
 80004d0:	2104      	movs	r1, #4
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff fea2 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80004de:	200a      	movs	r0, #10
 80004e0:	4798      	blx	r3
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b08a      	sub	sp, #40	; 0x28
 80004ee:	af02      	add	r7, sp, #8
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	460b      	mov	r3, r1
 80004f4:	607a      	str	r2, [r7, #4]
 80004f6:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 8000504:	7d3b      	ldrb	r3, [r7, #20]
 8000506:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 8000508:	7d7b      	ldrb	r3, [r7, #21]
 800050a:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	789b      	ldrb	r3, [r3, #2]
 800051c:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	78db      	ldrb	r3, [r3, #3]
 8000522:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	b29a      	uxth	r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	7959      	ldrb	r1, [r3, #5]
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	460b      	mov	r3, r1
 8000536:	2112      	movs	r1, #18
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff fe6f 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000544:	2001      	movs	r0, #1
 8000546:	4798      	blx	r3
}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2200      	movs	r2, #0
 8000568:	639a      	str	r2, [r3, #56]	; 0x38
	ecan->filter.FilterIdLow = 0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	641a      	str	r2, [r3, #64]	; 0x40
	ecan->filter.FilterMaskIdLow = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	645a      	str	r2, [r3, #68]	; 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	649a      	str	r2, [r3, #72]	; 0x48

	if (can_nuumber == 1)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d103      	bne.n	8000590 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	64da      	str	r2, [r3, #76]	; 0x4c
 800058e:	e002      	b.n	8000596 <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	220e      	movs	r2, #14
 8000594:	64da      	str	r2, [r3, #76]	; 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	651a      	str	r2, [r3, #80]	; 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2201      	movs	r2, #1
 80005a0:	655a      	str	r2, [r3, #84]	; 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	659a      	str	r2, [r3, #88]	; 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	220e      	movs	r2, #14
 80005ac:	65da      	str	r2, [r3, #92]	; 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3338      	adds	r3, #56	; 0x38
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f000 fc4a 	bl	8000e52 <HAL_CAN_ConfigFilter>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <Easy_CAN6_Start+0x78>
		Error_Handler();
 80005c4:	f000 f9a8 	bl	8000918 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fe52 	bl	8001278 <HAL_CAN_ActivateNotification>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 80005da:	f000 f99d 	bl	8000918 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fcff 	bl	8000fe6 <HAL_CAN_Start>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005ee:	f000 ff58 	bl	80014a2 <HAL_NVIC_SystemReset>

}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2204      	movs	r2, #4
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
	ecan->TxHeader.DLC = size;
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 800062c:	e000      	b.n	8000630 <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 800062e:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fdea 	bl	800120e <HAL_CAN_GetTxMailboxesFreeLevel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f6      	beq.n	800062e <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f103 0120 	add.w	r1, r3, #32
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	f000 fd0d 	bl	800106e <HAL_CAN_AddTxMessage>

}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b0a2      	sub	sp, #136	; 0x88
 8000660:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  const uint8_t txBuff[] = "Hello, Worldaaaa\n";
 8000662:	4b3e      	ldr	r3, [pc, #248]	; (800075c <main+0x100>)
 8000664:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fa69 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f883 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f929 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067e:	f000 f8f7 	bl	8000870 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000682:	f000 f8bf 	bl	8000804 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 8000686:	2202      	movs	r2, #2
 8000688:	4935      	ldr	r1, [pc, #212]	; (8000760 <main+0x104>)
 800068a:	4836      	ldr	r0, [pc, #216]	; (8000764 <main+0x108>)
 800068c:	f7ff ff60 	bl	8000550 <Easy_CAN6_Start>
	for (int i = 0; i < 4; i++) {
 8000690:	2300      	movs	r3, #0
 8000692:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000694:	e03d      	b.n	8000712 <main+0xb6>
		CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 8000696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000698:	22b0      	movs	r2, #176	; 0xb0
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	4a32      	ldr	r2, [pc, #200]	; (8000768 <main+0x10c>)
 80006a0:	1898      	adds	r0, r3, r2
 80006a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	3370      	adds	r3, #112	; 0x70
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <main+0x110>)
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	492c      	ldr	r1, [pc, #176]	; (8000764 <main+0x108>)
 80006b2:	f7ff fe00 	bl	80002b6 <CyberGear_Init>
		CyberGear_ResetMotor(&my_cyber[i]);
 80006b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006b8:	22b0      	movs	r2, #176	; 0xb0
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <main+0x10c>)
 80006c0:	4413      	add	r3, r2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fef3 	bl	80004ae <CyberGear_ResetMotor>
		CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80006c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006ca:	22b0      	movs	r2, #176	; 0xb0
 80006cc:	fb02 f303 	mul.w	r3, r2, r3
 80006d0:	4a25      	ldr	r2, [pc, #148]	; (8000768 <main+0x10c>)
 80006d2:	4413      	add	r3, r2
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe28 	bl	800032c <CyberGear_SetMode>
		CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 80006dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006de:	22b0      	movs	r2, #176	; 0xb0
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <main+0x10c>)
 80006e6:	4413      	add	r3, r2
 80006e8:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 80006ec:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80006f0:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fdfc 	bl	80002f2 <CyberGear_SetConfig>
		CyberGear_EnableMotor(&my_cyber[i]);
 80006fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006fc:	22b0      	movs	r2, #176	; 0xb0
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <main+0x10c>)
 8000704:	4413      	add	r3, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff feb3 	bl	8000472 <CyberGear_EnableMotor>
	for (int i = 0; i < 4; i++) {
 800070c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800070e:	3301      	adds	r3, #1
 8000710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000714:	2b03      	cmp	r3, #3
 8000716:	ddbe      	ble.n	8000696 <main+0x3a>
	}
	CyberGear_ControlSpeed(&my_cyber[0], 1.0);
 8000718:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0x10c>)
 800071e:	f7ff fe87 	bl	8000430 <CyberGear_ControlSpeed>
	CyberGear_ControlSpeed(&my_cyber[1], -1.0);
 8000722:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <main+0x114>)
 8000728:	f7ff fe82 	bl	8000430 <CyberGear_ControlSpeed>
	CyberGear_ControlSpeed(&my_cyber[2], 30.0);
 800072c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <main+0x118>)
 8000732:	f7ff fe7d 	bl	8000430 <CyberGear_ControlSpeed>
	CyberGear_ControlSpeed(&my_cyber[3], -30.0);
 8000736:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <main+0x11c>)
 800073c:	f7ff fe78 	bl	8000430 <CyberGear_ControlSpeed>
	HAL_Delay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f000 fa66 	bl	8000c14 <HAL_Delay>
//	CyberGear_ControlSpeed(&my_cyber, -50.0);


//	  startTime = HAL_GetTick();

	  HAL_UART_Transmit(&huart2, txBuff, sizeof(txBuff), 0xFFFF);
 8000748:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800074c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000750:	2212      	movs	r2, #18
 8000752:	480a      	ldr	r0, [pc, #40]	; (800077c <main+0x120>)
 8000754:	f002 faea 	bl	8002d2c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0xfc>
 800075a:	bf00      	nop
 800075c:	08003564 	.word	0x08003564
 8000760:	20000028 	.word	0x20000028
 8000764:	20000398 	.word	0x20000398
 8000768:	200000d8 	.word	0x200000d8
 800076c:	08000c15 	.word	0x08000c15
 8000770:	20000188 	.word	0x20000188
 8000774:	20000238 	.word	0x20000238
 8000778:	200002e8 	.word	0x200002e8
 800077c:	20000050 	.word	0x20000050

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	; 0x40
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	2228      	movs	r2, #40	; 0x28
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fea1 	bl	80034d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2310      	movs	r3, #16
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80007b6:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fff1 	bl	80017a8 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007cc:	f000 f8a4 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f81a 	bl	8002824 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007f6:	f000 f88f 	bl	8000918 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3740      	adds	r7, #64	; 0x40
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_CAN_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_CAN_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_CAN_Init+0x64>)
 8000810:	2202      	movs	r2, #2
 8000812:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_CAN_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_CAN_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_CAN_Init+0x64>)
 8000822:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000826:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_CAN_Init+0x64>)
 800082a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800082e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_CAN_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_CAN_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_CAN_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CAN_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_CAN_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CAN_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_CAN_Init+0x64>)
 8000856:	f000 fa01 	bl	8000c5c <HAL_CAN_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f85a 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000028 	.word	0x20000028
 800086c:	40006400 	.word	0x40006400

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 800087e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 8000894:	220c      	movs	r2, #12
 8000896:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_USART2_UART_Init+0x54>)
 80008b2:	f002 f9ed 	bl	8002c90 <HAL_UART_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80008bc:	f000 f82c 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000050 	.word	0x20000050
 80008c8:	40004400 	.word	0x40004400
 80008cc:	0007a120 	.word	0x0007a120

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_GPIO_Init+0x44>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <MX_GPIO_Init+0x44>)
 80008dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_GPIO_Init+0x44>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_GPIO_Init+0x44>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <MX_GPIO_Init+0x44>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_GPIO_Init+0x44>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x44>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <HAL_CAN_MspInit+0x80>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d129      	bne.n	80009e2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_CAN_MspInit+0x84>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_CAN_MspInit+0x84>)
 8000994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_CAN_MspInit+0x84>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_CAN_MspInit+0x84>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_CAN_MspInit+0x84>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_CAN_MspInit+0x84>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80009d0:	2309      	movs	r3, #9
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f000 fd71 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40006400 	.word	0x40006400
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d129      	bne.n	8000a6a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a46:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 fd2d 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f884 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff ffea 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 fce1 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fd99 	bl	800065c <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b2c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b38:	080035b8 	.word	0x080035b8
  ldr r2, =_sbss
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b40:	20000404 	.word	0x20000404

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x28>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 fc7b 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fede 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fc89 	bl	80014aa <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 fc5b 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000400 	.word	0x20000400

08000bfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000400 	.word	0x20000400

08000c14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0ed      	b.n	8000e4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fe76 	bl	800096c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0201 	orr.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c90:	f7ff ffb4 	bl	8000bfc <HAL_GetTick>
 8000c94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c96:	e012      	b.n	8000cbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c98:	f7ff ffb0 	bl	8000bfc <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b0a      	cmp	r3, #10
 8000ca4:	d90b      	bls.n	8000cbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0c5      	b.n	8000e4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0e5      	beq.n	8000c98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0202 	bic.w	r2, r2, #2
 8000cda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cdc:	f7ff ff8e 	bl	8000bfc <HAL_GetTick>
 8000ce0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ce2:	e012      	b.n	8000d0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce4:	f7ff ff8a 	bl	8000bfc <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d90b      	bls.n	8000d0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2205      	movs	r2, #5
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e09f      	b.n	8000e4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1e5      	bne.n	8000ce4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7e1b      	ldrb	r3, [r3, #24]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d108      	bne.n	8000d32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7e5b      	ldrb	r3, [r3, #25]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d108      	bne.n	8000d5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7e9b      	ldrb	r3, [r3, #26]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d108      	bne.n	8000d86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0220 	orr.w	r2, r2, #32
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0220 	bic.w	r2, r2, #32
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7edb      	ldrb	r3, [r3, #27]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0210 	bic.w	r2, r2, #16
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0210 	orr.w	r2, r2, #16
 8000dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7f1b      	ldrb	r3, [r3, #28]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0208 	orr.w	r2, r2, #8
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e007      	b.n	8000dea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0208 	bic.w	r2, r2, #8
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7f5b      	ldrb	r3, [r3, #29]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0204 	orr.w	r2, r2, #4
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0204 	bic.w	r2, r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	ea42 0103 	orr.w	r1, r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b087      	sub	sp, #28
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e6a:	7cfb      	ldrb	r3, [r7, #19]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <HAL_CAN_ConfigFilter+0x26>
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	f040 80aa 	bne.w	8000fcc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2201      	movs	r2, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d123      	bne.n	8000efa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3248      	adds	r2, #72	; 0x48
 8000eda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef0:	6979      	ldr	r1, [r7, #20]
 8000ef2:	3348      	adds	r3, #72	; 0x48
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d122      	bne.n	8000f48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3248      	adds	r2, #72	; 0x48
 8000f28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3e:	6979      	ldr	r1, [r7, #20]
 8000f40:	3348      	adds	r3, #72	; 0x48
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d109      	bne.n	8000f64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f62:	e007      	b.n	8000f74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f8e:	e007      	b.n	8000fa0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d107      	bne.n	8000fb8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fbe:	f023 0201 	bic.w	r2, r3, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e006      	b.n	8000fda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
  }
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	371c      	adds	r7, #28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d12e      	bne.n	8001058 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001012:	f7ff fdf3 	bl	8000bfc <HAL_GetTick>
 8001016:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001018:	e012      	b.n	8001040 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800101a:	f7ff fdef 	bl	8000bfc <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d90b      	bls.n	8001040 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e012      	b.n	8001066 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e5      	bne.n	800101a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	e006      	b.n	8001066 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800106e:	b480      	push	{r7}
 8001070:	b089      	sub	sp, #36	; 0x24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d003      	beq.n	800109a <HAL_CAN_AddTxMessage+0x2c>
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	2b02      	cmp	r3, #2
 8001096:	f040 80ad 	bne.w	80011f4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10a      	bne.n	80010ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8095 	beq.w	80011e4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	0e1b      	lsrs	r3, r3, #24
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010c4:	2201      	movs	r2, #1
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	409a      	lsls	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	6809      	ldr	r1, [r1, #0]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3318      	adds	r3, #24
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	440b      	add	r3, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e00f      	b.n	8001112 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001106:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3318      	adds	r3, #24
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	440b      	add	r3, r1
 8001110:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3318      	adds	r3, #24
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	440b      	add	r3, r1
 8001122:	3304      	adds	r3, #4
 8001124:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	7d1b      	ldrb	r3, [r3, #20]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d111      	bne.n	8001152 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3318      	adds	r3, #24
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3318      	adds	r3, #24
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	440b      	add	r3, r1
 800114e:	3304      	adds	r3, #4
 8001150:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3307      	adds	r3, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	061a      	lsls	r2, r3, #24
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3306      	adds	r3, #6
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	041b      	lsls	r3, r3, #16
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3305      	adds	r3, #5
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	4313      	orrs	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	3204      	adds	r2, #4
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	4610      	mov	r0, r2
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6811      	ldr	r1, [r2, #0]
 800117a:	ea43 0200 	orr.w	r2, r3, r0
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	440b      	add	r3, r1
 8001184:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001188:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3303      	adds	r3, #3
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	061a      	lsls	r2, r3, #24
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3302      	adds	r3, #2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3301      	adds	r3, #1
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4313      	orrs	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	4610      	mov	r0, r2
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	6811      	ldr	r1, [r2, #0]
 80011b0:	ea43 0200 	orr.w	r2, r3, r0
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3318      	adds	r3, #24
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	6811      	ldr	r1, [r2, #0]
 80011d2:	f043 0201 	orr.w	r2, r3, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e00e      	b.n	8001202 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e006      	b.n	8001202 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
  }
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001220:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d002      	beq.n	800122e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001228:	7afb      	ldrb	r3, [r7, #11]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d11d      	bne.n	800126a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001288:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d002      	beq.n	8001296 <HAL_CAN_ActivateNotification+0x1e>
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d109      	bne.n	80012aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6959      	ldr	r1, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e006      	b.n	80012b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
  }
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013e8:	f3bf 8f4f 	dsb	sy
}
 80013ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <__NVIC_SystemReset+0x24>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013f6:	4904      	ldr	r1, [pc, #16]	; (8001408 <__NVIC_SystemReset+0x24>)
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_SystemReset+0x28>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <__NVIC_SystemReset+0x20>
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	05fa0004 	.word	0x05fa0004

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff78 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff46 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff78 	bl	800137c <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff47 	bl	8001328 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80014a6:	f7ff ff9d 	bl	80013e4 <__NVIC_SystemReset>

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffac 	bl	8001410 <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d2:	e14e      	b.n	8001772 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8140 	beq.w	800176c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d005      	beq.n	8001504 <HAL_GPIO_Init+0x40>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d130      	bne.n	8001566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153a:	2201      	movs	r2, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f003 0201 	and.w	r2, r3, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b03      	cmp	r3, #3
 8001570:	d017      	beq.n	80015a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d123      	bne.n	80015f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	08da      	lsrs	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3208      	adds	r2, #8
 80015b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0203 	and.w	r2, r3, #3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 809a 	beq.w	800176c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	4b55      	ldr	r3, [pc, #340]	; (8001790 <HAL_GPIO_Init+0x2cc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_GPIO_Init+0x2cc>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_GPIO_Init+0x2cc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001650:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1e0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x2d4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1dc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_GPIO_Init+0x2d8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1d8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <HAL_GPIO_Init+0x2dc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1d4>
 8001694:	2303      	movs	r3, #3
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x1e2>
 8001698:	2305      	movs	r3, #5
 800169a:	e004      	b.n	80016a6 <HAL_GPIO_Init+0x1e2>
 800169c:	2302      	movs	r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x1e2>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_GPIO_Init+0x1e2>
 80016a4:	2300      	movs	r3, #0
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4093      	lsls	r3, r2
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b6:	4937      	ldr	r1, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c4:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e8:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001712:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800173c:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_GPIO_Init+0x2e0>)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	f47f aea9 	bne.w	80014d4 <HAL_GPIO_Init+0x10>
  }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	40010400 	.word	0x40010400

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f001 b823 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 817d 	beq.w	8001ade <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017e4:	4bbc      	ldr	r3, [pc, #752]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00c      	beq.n	800180a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f0:	4bb9      	ldr	r3, [pc, #740]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d15c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x10e>
 80017fc:	4bb6      	ldr	r3, [pc, #728]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d155      	bne.n	80018b6 <HAL_RCC_OscConfig+0x10e>
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800181e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d102      	bne.n	800183c <HAL_RCC_OscConfig+0x94>
 8001836:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	e015      	b.n	8001868 <HAL_RCC_OscConfig+0xc0>
 800183c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001840:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001854:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001858:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001870:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001874:	fa92 f2a2 	rbit	r2, r2
 8001878:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800187c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 811f 	beq.w	8001adc <HAL_RCC_OscConfig+0x334>
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 8116 	bne.w	8001adc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f000 bfaf 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12e>
 80018c8:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a82      	ldr	r2, [pc, #520]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e036      	b.n	8001944 <HAL_RCC_OscConfig+0x19c>
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x158>
 80018e6:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7b      	ldr	r2, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a78      	ldr	r2, [pc, #480]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e021      	b.n	8001944 <HAL_RCC_OscConfig+0x19c>
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x184>
 8001912:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a70      	ldr	r2, [pc, #448]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6d      	ldr	r2, [pc, #436]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x19c>
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a69      	ldr	r2, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a66      	ldr	r2, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001944:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f023 020f 	bic.w	r2, r3, #15
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	495f      	ldr	r1, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 800195a:	4313      	orrs	r3, r2
 800195c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d059      	beq.n	8001a22 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff f945 	bl	8000bfc <HAL_GetTick>
 8001972:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff f940 	bl	8000bfc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d902      	bls.n	800198e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	f000 bf43 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
 800198e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001992:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0x218>
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0x244>
 80019c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019e8:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019f8:	fa92 f2a2 	rbit	r2, r2
 80019fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a00:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ab      	beq.n	8001978 <HAL_RCC_OscConfig+0x1d0>
 8001a20:	e05d      	b.n	8001ade <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f8eb 	bl	8000bfc <HAL_GetTick>
 8001a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f8e6 	bl	8000bfc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d902      	bls.n	8001a42 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f000 bee9 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
 8001a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a46:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2cc>
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2f8>
 8001a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a78:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a90:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_RCC_OscConfig+0x330>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001aa8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001aac:	fa92 f2a2 	rbit	r2, r2
 8001ab0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ab4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ab8:	fab2 f282 	clz	r2, r2
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f002 021f 	and.w	r2, r2, #31
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ab      	bne.n	8001a2c <HAL_RCC_OscConfig+0x284>
 8001ad4:	e003      	b.n	8001ade <HAL_RCC_OscConfig+0x336>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 817d 	beq.w	8001dee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001af4:	4ba6      	ldr	r3, [pc, #664]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b00:	4ba3      	ldr	r3, [pc, #652]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d172      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x44a>
 8001b0c:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d16c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x44a>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3a0>
 8001b42:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c8>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b6c:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2202      	movs	r2, #2
 8001b72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b7a:	fa92 f2a2 	rbit	r2, r2
 8001b7e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b82:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f042 0220 	orr.w	r2, r2, #32
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f002 021f 	and.w	r2, r2, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x410>
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f000 be2e 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	21f8      	movs	r1, #248	; 0xf8
 8001bce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bd6:	fa91 f1a1 	rbit	r1, r1
 8001bda:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001bde:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001be2:	fab1 f181 	clz	r1, r1
 8001be6:	b2c9      	uxtb	r1, r1
 8001be8:	408b      	lsls	r3, r1
 8001bea:	4969      	ldr	r1, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf0:	e0fd      	b.n	8001dee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8088 	beq.w	8001d14 <HAL_RCC_OscConfig+0x56c>
 8001c04:	2301      	movs	r3, #1
 8001c06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffe4 	bl	8000bfc <HAL_GetTick>
 8001c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7fe ffdf 	bl	8000bfc <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d902      	bls.n	8001c50 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f000 bde2 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4d8>
 8001c7a:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e013      	b.n	8001ca8 <HAL_RCC_OscConfig+0x500>
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0af      	beq.n	8001c3a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	21f8      	movs	r1, #248	; 0xf8
 8001cf0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cf8:	fa91 f1a1 	rbit	r1, r1
 8001cfc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d00:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d04:	fab1 f181 	clz	r1, r1
 8001d08:	b2c9      	uxtb	r1, r1
 8001d0a:	408b      	lsls	r3, r1
 8001d0c:	4920      	ldr	r1, [pc, #128]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
 8001d12:	e06c      	b.n	8001dee <HAL_RCC_OscConfig+0x646>
 8001d14:	2301      	movs	r3, #1
 8001d16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe ff5c 	bl	8000bfc <HAL_GetTick>
 8001d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7fe ff57 	bl	8000bfc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d902      	bls.n	8001d60 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f000 bd5a 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d104      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5ec>
 8001d8a:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <HAL_RCC_OscConfig+0x5e8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_OscConfig+0x614>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001da6:	2302      	movs	r3, #2
 8001da8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001db8:	4bc8      	ldr	r3, [pc, #800]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001dce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ad      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8110 	beq.w	8002024 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d079      	beq.n	8001f08 <HAL_RCC_OscConfig+0x760>
 8001e14:	2301      	movs	r3, #1
 8001e16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	4bab      	ldr	r3, [pc, #684]	; (80020e0 <HAL_RCC_OscConfig+0x938>)
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fedd 	bl	8000bfc <HAL_GetTick>
 8001e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7fe fed8 	bl	8000bfc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d902      	bls.n	8001e5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f000 bcdb 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001eb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb8:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 8001eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	6019      	str	r1, [r3, #0]
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f1a3 	rbit	r1, r3
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ede:	6019      	str	r1, [r3, #0]
  return result;
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0a0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x6a0>
 8001f06:	e08d      	b.n	8002024 <HAL_RCC_OscConfig+0x87c>
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f2a:	601a      	str	r2, [r3, #0]
  return result;
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x938>)
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	461a      	mov	r2, r3
 8001f46:	2300      	movs	r3, #0
 8001f48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe fe57 	bl	8000bfc <HAL_GetTick>
 8001f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f54:	f7fe fe52 	bl	8000bfc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d902      	bls.n	8001f6a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	f000 bc55 	b.w	8002814 <HAL_RCC_OscConfig+0x106c>
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f72:	2202      	movs	r2, #2
 8001f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f96:	2202      	movs	r2, #2
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fba:	2202      	movs	r2, #2
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001fd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 8001fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	6019      	str	r1, [r3, #0]
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f1a3 	rbit	r1, r3
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ffc:	6019      	str	r1, [r3, #0]
  return result;
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d197      	bne.n	8001f54 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 81a1 	beq.w	800237c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d116      	bne.n	800207a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	61d3      	str	r3, [r2, #28]
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002072:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x93c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11a      	bne.n	80020bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x93c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_RCC_OscConfig+0x93c>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fdb3 	bl	8000bfc <HAL_GetTick>
 8002096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	e009      	b.n	80020b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7fe fdae 	bl	8000bfc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	; 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e3b1      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_RCC_OscConfig+0x93c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ef      	beq.n	800209c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_OscConfig+0x940>
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a02      	ldr	r2, [pc, #8]	; (80020dc <HAL_RCC_OscConfig+0x934>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e03c      	b.n	8002154 <HAL_RCC_OscConfig+0x9ac>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	10908120 	.word	0x10908120
 80020e4:	40007000 	.word	0x40007000
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x96a>
 80020f8:	4bc1      	ldr	r3, [pc, #772]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4ac0      	ldr	r2, [pc, #768]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4bbe      	ldr	r3, [pc, #760]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4abd      	ldr	r2, [pc, #756]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e020      	b.n	8002154 <HAL_RCC_OscConfig+0x9ac>
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x994>
 8002122:	4bb7      	ldr	r3, [pc, #732]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4ab6      	ldr	r2, [pc, #728]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4bb4      	ldr	r3, [pc, #720]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4ab3      	ldr	r2, [pc, #716]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x9ac>
 800213c:	4bb0      	ldr	r3, [pc, #704]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4aaf      	ldr	r2, [pc, #700]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	4bad      	ldr	r3, [pc, #692]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4aac      	ldr	r2, [pc, #688]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8081 	beq.w	8002268 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7fe fd49 	bl	8000bfc <HAL_GetTick>
 800216a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7fe fd44 	bl	8000bfc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e345      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021ce:	601a      	str	r2, [r3, #0]
  return result;
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_OscConfig+0xa4c>
 80021ee:	4b84      	ldr	r3, [pc, #528]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	e013      	b.n	800221c <HAL_RCC_OscConfig+0xa74>
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021fc:	2202      	movs	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	4b79      	ldr	r3, [pc, #484]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002220:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002224:	2102      	movs	r1, #2
 8002226:	6011      	str	r1, [r2, #0]
 8002228:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800222c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	fa92 f1a2 	rbit	r1, r2
 8002236:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800223a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800223e:	6011      	str	r1, [r2, #0]
  return result;
 8002240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002244:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	fab2 f282 	clz	r2, r2
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f002 021f 	and.w	r2, r2, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f202 	lsl.w	r2, r1, r2
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d084      	beq.n	8002170 <HAL_RCC_OscConfig+0x9c8>
 8002266:	e07f      	b.n	8002368 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7fe fcc8 	bl	8000bfc <HAL_GetTick>
 800226c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fcc3 	bl	8000bfc <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e2c4      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022d0:	601a      	str	r2, [r3, #0]
  return result;
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_OscConfig+0xb4e>
 80022f0:	4b43      	ldr	r3, [pc, #268]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	e013      	b.n	800231e <HAL_RCC_OscConfig+0xb76>
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022fe:	2202      	movs	r2, #2
 8002300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002322:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002326:	2102      	movs	r1, #2
 8002328:	6011      	str	r1, [r2, #0]
 800232a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800232e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	fa92 f1a2 	rbit	r1, r2
 8002338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002340:	6011      	str	r1, [r2, #0]
  return result;
 8002342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002346:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f002 021f 	and.w	r2, r2, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d184      	bne.n	8002272 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002368:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8242 	beq.w	8002812 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_RCC_OscConfig+0xc58>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	f000 8213 	beq.w	80027c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	f040 8162 	bne.w	8002672 <HAL_RCC_OscConfig+0xeca>
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023d2:	601a      	str	r2, [r3, #0]
  return result;
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	461a      	mov	r2, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fc02 	bl	8000bfc <HAL_GetTick>
 80023f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fc:	e00c      	b.n	8002418 <HAL_RCC_OscConfig+0xc70>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fbfa 	bl	8000bfc <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1fd      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002420:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800243c:	601a      	str	r2, [r3, #0]
  return result;
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002446:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0xcba>
 800245c:	4bb0      	ldr	r3, [pc, #704]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e027      	b.n	80024b2 <HAL_RCC_OscConfig+0xd0a>
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800246a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	4b9c      	ldr	r3, [pc, #624]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024be:	6011      	str	r1, [r2, #0]
 80024c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	fa92 f1a2 	rbit	r1, r2
 80024ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024d6:	6011      	str	r1, [r2, #0]
  return result;
 80024d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	fab2 f282 	clz	r2, r2
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f042 0220 	orr.w	r2, r2, #32
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f002 021f 	and.w	r2, r2, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d182      	bne.n	8002404 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	430b      	orrs	r3, r1
 8002520:	497f      	ldr	r1, [pc, #508]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800252e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800254a:	601a      	str	r2, [r3, #0]
  return result;
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002554:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	461a      	mov	r2, r3
 8002568:	2301      	movs	r3, #1
 800256a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fb46 	bl	8000bfc <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	e009      	b.n	800258a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fb41 	bl	8000bfc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e144      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025ae:	601a      	str	r2, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_OscConfig+0xe2c>
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e027      	b.n	8002624 <HAL_RCC_OscConfig+0xe7c>
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002628:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800262c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002630:	6011      	str	r1, [r2, #0]
 8002632:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002636:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	fa92 f1a2 	rbit	r1, r2
 8002640:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002644:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002648:	6011      	str	r1, [r2, #0]
  return result;
 800264a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d082      	beq.n	8002576 <HAL_RCC_OscConfig+0xdce>
 8002670:	e0cf      	b.n	8002812 <HAL_RCC_OscConfig+0x106a>
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800267a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800267e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002696:	601a      	str	r2, [r3, #0]
  return result;
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	461a      	mov	r2, r3
 80026b4:	2300      	movs	r3, #0
 80026b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe faa0 	bl	8000bfc <HAL_GetTick>
 80026bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c0:	e009      	b.n	80026d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fa9b 	bl	8000bfc <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e09e      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026fa:	601a      	str	r2, [r3, #0]
  return result;
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002704:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d104      	bne.n	8002724 <HAL_RCC_OscConfig+0xf7c>
 800271a:	4b01      	ldr	r3, [pc, #4]	; (8002720 <HAL_RCC_OscConfig+0xf78>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	e029      	b.n	8002774 <HAL_RCC_OscConfig+0xfcc>
 8002720:	40021000 	.word	0x40021000
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800272c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x1078>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002778:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800277c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002780:	6011      	str	r1, [r2, #0]
 8002782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002786:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	fa92 f1a2 	rbit	r1, r2
 8002790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002794:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002798:	6011      	str	r1, [r2, #0]
  return result;
 800279a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800279e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f002 021f 	and.w	r2, r2, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d180      	bne.n	80026c2 <HAL_RCC_OscConfig+0xf1a>
 80027c0:	e027      	b.n	8002812 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e01e      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_OscConfig+0x1078>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b09e      	sub	sp, #120	; 0x78
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e162      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b90      	ldr	r3, [pc, #576]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d910      	bls.n	800286c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b8d      	ldr	r3, [pc, #564]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	498b      	ldr	r1, [pc, #556]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e14a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	497f      	ldr	r1, [pc, #508]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80dc 	beq.w	8002a50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d13c      	bne.n	800291a <HAL_RCC_ClockConfig+0xf6>
 80028a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_ClockConfig+0xa6>
 80028c4:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e00f      	b.n	80028ea <HAL_RCC_ClockConfig+0xc6>
 80028ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	667b      	str	r3, [r7, #100]	; 0x64
 80028d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028dc:	663b      	str	r3, [r7, #96]	; 0x60
 80028de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80028f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028fa:	fab2 f282 	clz	r2, r2
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f002 021f 	and.w	r2, r2, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d17b      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0f3      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d13c      	bne.n	800299c <HAL_RCC_ClockConfig+0x178>
 8002922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_RCC_ClockConfig+0x128>
 8002946:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e00f      	b.n	800296c <HAL_RCC_ClockConfig+0x148>
 800294c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
 800295a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295e:	643b      	str	r3, [r7, #64]	; 0x40
 8002960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002970:	63ba      	str	r2, [r7, #56]	; 0x38
 8002972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800297a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f042 0220 	orr.w	r2, r2, #32
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f002 021f 	and.w	r2, r2, #31
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d13a      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b2      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
 800299c:	2302      	movs	r3, #2
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1a0>
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e00d      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1bc>
 80029c4:	2302      	movs	r3, #2
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	2302      	movs	r3, #2
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	2202      	movs	r2, #2
 80029e2:	61ba      	str	r2, [r7, #24]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	617a      	str	r2, [r7, #20]
  return result;
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f002 021f 	and.w	r2, r2, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e079      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	491a      	ldr	r1, [pc, #104]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7fe f8ec 	bl	8000bfc <HAL_GetTick>
 8002a24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fe f8e8 	bl	8000bfc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e061      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d214      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 0207 	bic.w	r2, r3, #7
 8002a66:	4906      	ldr	r1, [pc, #24]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_ClockConfig+0x25c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e040      	b.n	8002b02 <HAL_RCC_ClockConfig+0x2de>
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_ClockConfig+0x2e8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	491a      	ldr	r1, [pc, #104]	; (8002b0c <HAL_RCC_ClockConfig+0x2e8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4912      	ldr	r1, [pc, #72]	; (8002b0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ac6:	f000 f829 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad4:	22f0      	movs	r2, #240	; 0xf0
 8002ad6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	fa92 f2a2 	rbit	r2, r2
 8002ade:	60fa      	str	r2, [r7, #12]
  return result;
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	40d3      	lsrs	r3, r2
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_RCC_ClockConfig+0x2ec>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	fa21 f303 	lsr.w	r3, r1, r3
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_RCC_ClockConfig+0x2f0>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_RCC_ClockConfig+0x2f4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f83a 	bl	8000b74 <HAL_InitTick>
  
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3778      	adds	r7, #120	; 0x78
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08003578 	.word	0x08003578
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b08b      	sub	sp, #44	; 0x2c
 8002b20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x30>
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x36>
 8002b4a:	e03c      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b4e:	623b      	str	r3, [r7, #32]
      break;
 8002b50:	e03c      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	fa92 f2a2 	rbit	r2, r2
 8002b64:	607a      	str	r2, [r7, #4]
  return result;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	fab2 f282 	clz	r2, r2
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	40d3      	lsrs	r3, r2
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	220f      	movs	r2, #15
 8002b80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	fa92 f2a2 	rbit	r2, r2
 8002b88:	60fa      	str	r2, [r7, #12]
  return result;
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	fab2 f282 	clz	r2, r2
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	40d3      	lsrs	r3, r2
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	e004      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	e002      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bc8:	623b      	str	r3, [r7, #32]
      break;
 8002bca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	372c      	adds	r7, #44	; 0x2c
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	08003590 	.word	0x08003590
 8002be8:	080035a0 	.word	0x080035a0
 8002bec:	003d0900 	.word	0x003d0900

08002bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c0e:	f7ff ffef 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	603a      	str	r2, [r7, #0]
  return result;
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	40d3      	lsrs	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08003588 	.word	0x08003588

08002c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c52:	f7ff ffcd 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c56:	4601      	mov	r1, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	fa92 f2a2 	rbit	r2, r2
 8002c6c:	603a      	str	r2, [r7, #0]
  return result;
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	fab2 f282 	clz	r2, r2
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	40d3      	lsrs	r3, r2
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08003588 	.word	0x08003588

08002c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e040      	b.n	8002d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fe9e 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	; 0x24
 8002cbc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8b6 	bl	8002e40 <UART_SetConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e022      	b.n	8002d24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9e0 	bl	80030ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fa67 	bl	80031f0 <UART_CheckIdleState>
 8002d22:	4603      	mov	r3, r0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d178      	bne.n	8002e36 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_UART_Transmit+0x24>
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e071      	b.n	8002e38 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d62:	f7fd ff4b 	bl	8000bfc <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d108      	bne.n	8002d94 <HAL_UART_Transmit+0x68>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e003      	b.n	8002d9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d9c:	e030      	b.n	8002e00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2180      	movs	r1, #128	; 0x80
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fac9 	bl	8003340 <UART_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e03c      	b.n	8002e38 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e008      	b.n	8002dee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b292      	uxth	r2, r2
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1c8      	bne.n	8002d9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fa92 	bl	8003340 <UART_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e005      	b.n	8002e38 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <UART_SetConfig+0x254>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	6979      	ldr	r1, [r7, #20]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a78      	ldr	r2, [pc, #480]	; (8003098 <UART_SetConfig+0x258>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d120      	bne.n	8002efe <UART_SetConfig+0xbe>
 8002ebc:	4b77      	ldr	r3, [pc, #476]	; (800309c <UART_SetConfig+0x25c>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0xb8>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <UART_SetConfig+0x90>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002eed 	.word	0x08002eed
 8002ed8:	08002ef3 	.word	0x08002ef3
 8002edc:	08002ee7 	.word	0x08002ee7
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e01d      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e01a      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002eec:	2304      	movs	r3, #4
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e017      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e014      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e011      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <UART_SetConfig+0x260>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d102      	bne.n	8002f0e <UART_SetConfig+0xce>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e009      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a64      	ldr	r2, [pc, #400]	; (80030a4 <UART_SetConfig+0x264>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d102      	bne.n	8002f1e <UART_SetConfig+0xde>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e001      	b.n	8002f22 <UART_SetConfig+0xe2>
 8002f1e:	2310      	movs	r3, #16
 8002f20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2a:	d15a      	bne.n	8002fe2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d827      	bhi.n	8002f82 <UART_SetConfig+0x142>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <UART_SetConfig+0xf8>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08002f83 	.word	0x08002f83
 8002f48:	08002f73 	.word	0x08002f73
 8002f4c:	08002f83 	.word	0x08002f83
 8002f50:	08002f83 	.word	0x08002f83
 8002f54:	08002f83 	.word	0x08002f83
 8002f58:	08002f7b 	.word	0x08002f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7ff fe54 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8002f60:	61b8      	str	r0, [r7, #24]
        break;
 8002f62:	e013      	b.n	8002f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7ff fe72 	bl	8002c4c <HAL_RCC_GetPCLK2Freq>
 8002f68:	61b8      	str	r0, [r7, #24]
        break;
 8002f6a:	e00f      	b.n	8002f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6c:	4b4e      	ldr	r3, [pc, #312]	; (80030a8 <UART_SetConfig+0x268>)
 8002f6e:	61bb      	str	r3, [r7, #24]
        break;
 8002f70:	e00c      	b.n	8002f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f72:	f7ff fdd3 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002f76:	61b8      	str	r0, [r7, #24]
        break;
 8002f78:	e008      	b.n	8002f8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7e:	61bb      	str	r3, [r7, #24]
        break;
 8002f80:	e004      	b.n	8002f8c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	77bb      	strb	r3, [r7, #30]
        break;
 8002f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d074      	beq.n	800307c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	005a      	lsls	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	d916      	bls.n	8002fdc <UART_SetConfig+0x19c>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d212      	bcs.n	8002fdc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f023 030f 	bic.w	r3, r3, #15
 8002fbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	89fa      	ldrh	r2, [r7, #14]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	e04f      	b.n	800307c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77bb      	strb	r3, [r7, #30]
 8002fe0:	e04c      	b.n	800307c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d828      	bhi.n	800303a <UART_SetConfig+0x1fa>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0x1b0>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	0800301d 	.word	0x0800301d
 8002ff8:	08003025 	.word	0x08003025
 8002ffc:	0800303b 	.word	0x0800303b
 8003000:	0800302b 	.word	0x0800302b
 8003004:	0800303b 	.word	0x0800303b
 8003008:	0800303b 	.word	0x0800303b
 800300c:	0800303b 	.word	0x0800303b
 8003010:	08003033 	.word	0x08003033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003014:	f7ff fdf8 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003018:	61b8      	str	r0, [r7, #24]
        break;
 800301a:	e013      	b.n	8003044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff fe16 	bl	8002c4c <HAL_RCC_GetPCLK2Freq>
 8003020:	61b8      	str	r0, [r7, #24]
        break;
 8003022:	e00f      	b.n	8003044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <UART_SetConfig+0x268>)
 8003026:	61bb      	str	r3, [r7, #24]
        break;
 8003028:	e00c      	b.n	8003044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302a:	f7ff fd77 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 800302e:	61b8      	str	r0, [r7, #24]
        break;
 8003030:	e008      	b.n	8003044 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	61bb      	str	r3, [r7, #24]
        break;
 8003038:	e004      	b.n	8003044 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	77bb      	strb	r3, [r7, #30]
        break;
 8003042:	bf00      	nop
    }

    if (pclk != 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085a      	lsrs	r2, r3, #1
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	441a      	add	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d909      	bls.n	8003078 <UART_SetConfig+0x238>
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306a:	d205      	bcs.n	8003078 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	b29a      	uxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	e001      	b.n	800307c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003088:	7fbb      	ldrb	r3, [r7, #30]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	efff69f3 	.word	0xefff69f3
 8003098:	40013800 	.word	0x40013800
 800309c:	40021000 	.word	0x40021000
 80030a0:	40004400 	.word	0x40004400
 80030a4:	40004800 	.word	0x40004800
 80030a8:	007a1200 	.word	0x007a1200

080030ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031aa:	d10a      	bne.n	80031c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b098      	sub	sp, #96	; 0x60
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003200:	f7fd fcfc 	bl	8000bfc <HAL_GetTick>
 8003204:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d12e      	bne.n	8003272 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f88c 	bl	8003340 <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d021      	beq.n	8003272 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003242:	653b      	str	r3, [r7, #80]	; 0x50
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
 800324e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800325a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e6      	bne.n	800322e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e062      	b.n	8003338 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b04      	cmp	r3, #4
 800327e:	d149      	bne.n	8003314 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f856 	bl	8003340 <UART_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d03c      	beq.n	8003314 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	623b      	str	r3, [r7, #32]
   return(result);
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e6      	bne.n	800329a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3308      	adds	r3, #8
 80032d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	60fb      	str	r3, [r7, #12]
   return(result);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3308      	adds	r3, #8
 80032ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ec:	61fa      	str	r2, [r7, #28]
 80032ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	69b9      	ldr	r1, [r7, #24]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	617b      	str	r3, [r7, #20]
   return(result);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e5      	bne.n	80032cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e011      	b.n	8003338 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3758      	adds	r7, #88	; 0x58
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003350:	e049      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d045      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7fd fc4f 	bl	8000bfc <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <UART_WaitOnFlagUntilTimeout+0x30>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e048      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d031      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d110      	bne.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2208      	movs	r2, #8
 8003396:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f838 	bl	800340e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2208      	movs	r2, #8
 80033a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e029      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c0:	d111      	bne.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f81e 	bl	800340e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00f      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d0a6      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800340e:	b480      	push	{r7}
 8003410:	b095      	sub	sp, #84	; 0x54
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
 8003436:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800343a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e6      	bne.n	8003416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	61fb      	str	r3, [r7, #28]
   return(result);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3308      	adds	r3, #8
 8003466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	2b01      	cmp	r3, #1
 8003482:	d118      	bne.n	80034b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	60bb      	str	r3, [r7, #8]
   return(result);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f023 0310 	bic.w	r3, r3, #16
 8003498:	647b      	str	r3, [r7, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6979      	ldr	r1, [r7, #20]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	613b      	str	r3, [r7, #16]
   return(result);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e6      	bne.n	8003484 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034ca:	bf00      	nop
 80034cc:	3754      	adds	r7, #84	; 0x54
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <memset>:
 80034d6:	4402      	add	r2, r0
 80034d8:	4603      	mov	r3, r0
 80034da:	4293      	cmp	r3, r2
 80034dc:	d100      	bne.n	80034e0 <memset+0xa>
 80034de:	4770      	bx	lr
 80034e0:	f803 1b01 	strb.w	r1, [r3], #1
 80034e4:	e7f9      	b.n	80034da <memset+0x4>
	...

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	; (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	; (800352c <__libc_init_array+0x44>)
 80034fc:	f000 f826 	bl	800354c <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	080035b0 	.word	0x080035b0
 8003524:	080035b0 	.word	0x080035b0
 8003528:	080035b0 	.word	0x080035b0
 800352c:	080035b4 	.word	0x080035b4

08003530 <memcpy>:
 8003530:	440a      	add	r2, r1
 8003532:	4291      	cmp	r1, r2
 8003534:	f100 33ff 	add.w	r3, r0, #4294967295
 8003538:	d100      	bne.n	800353c <memcpy+0xc>
 800353a:	4770      	bx	lr
 800353c:	b510      	push	{r4, lr}
 800353e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003546:	4291      	cmp	r1, r2
 8003548:	d1f9      	bne.n	800353e <memcpy+0xe>
 800354a:	bd10      	pop	{r4, pc}

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
