
cybergeartest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003578  08003578  00004578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000045c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  080035d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080035d8  00005404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb84  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000198d  00000000  00000000  00010bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  00012550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  00012e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad13  00000000  00000000  000134f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb8  00000000  00000000  0002e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d60d  00000000  00000000  00038dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d63d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000236c  00000000  00000000  000d6414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d8780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003560 	.word	0x08003560

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003560 	.word	0x08003560

080001c8 <make_float_writedata>:
	uint16_t type_max = 0xFFFF;
	float span = x_max - x_min;
	return (float) x / type_max * span + x_min;
}

static float make_float_writedata(float x, float x_min, float x_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80001d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80001d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x > x_max)
 80001da:	ed97 7a03 	vldr	s14, [r7, #12]
 80001de:	edd7 7a01 	vldr	s15, [r7, #4]
 80001e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	dd02      	ble.n	80001f2 <make_float_writedata+0x2a>
		x = x_max;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00a      	b.n	8000208 <make_float_writedata+0x40>
	else if (x < x_min)
 80001f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80001f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80001fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80001fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000202:	d501      	bpl.n	8000208 <make_float_writedata+0x40>
		x = x_min;
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60fb      	str	r3, [r7, #12]
	return x;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	ee07 3a90 	vmov	s15, r3
}
 800020e:	eeb0 0a67 	vmov.f32	s0, s15
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <CyberGear_SendCANData>:

void CyberGear_SendCANData(CyberGear_Typedef *cyber, uint8_t com_type,
		uint16_t data_area2, uint8_t target_id, uint8_t *data_area1) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4603      	mov	r3, r0
 800022c:	70fb      	strb	r3, [r7, #3]
 800022e:	460b      	mov	r3, r1
 8000230:	803b      	strh	r3, [r7, #0]
 8000232:	4613      	mov	r3, r2
 8000234:	70bb      	strb	r3, [r7, #2]

	cyber->tx_candata.com_type = com_type;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78fa      	ldrb	r2, [r7, #3]
 800023a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	cyber->tx_candata.data_area2 = data_area2;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	883a      	ldrh	r2, [r7, #0]
 8000242:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	cyber->tx_candata.target_id = target_id;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	78ba      	ldrb	r2, [r7, #2]
 800024a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	memcpy(cyber->tx_candata.data_area1, data_area1, 8);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	338d      	adds	r3, #141	@ 0x8d
 8000252:	2208      	movs	r2, #8
 8000254:	6939      	ldr	r1, [r7, #16]
 8000256:	4618      	mov	r0, r3
 8000258:	f003 f974 	bl	8003544 <memcpy>

	cyber->tx_candata.ext_id = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) com_type << 24;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) data_area2 << 8;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	cyber->tx_candata.ext_id |= (uint32_t) target_id << 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
			cyber->tx_candata.data_area1, sizeof(cyber->tx_candata.data_area1));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 028d 	add.w	r2, r3, #141	@ 0x8d
	Easy_CAN6_BlockingTransmit_Ext(cyber->ecan, cyber->tx_candata.ext_id,
 80002a8:	2308      	movs	r3, #8
 80002aa:	f000 f9a9 	bl	8000600 <Easy_CAN6_BlockingTransmit_Ext>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <CyberGear_Init>:
uint8_t CyberGear_GetTargetID(CyberGear_Typedef *cyber) {
	return cyber->rx_candata.target_id;
}

void CyberGear_Init(CyberGear_Typedef *cyber, Easy_CAN6_Typedef *ecan,
		uint8_t motor_id, uint8_t master_id, void (*delay)(uint32_t)) {
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	4611      	mov	r1, r2
 80002c2:	461a      	mov	r2, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	cyber->ecan = ecan;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
	cyber->cyberconfig.id = motor_id;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	715a      	strb	r2, [r3, #5]
	cyber->cyberconfig.master_id = master_id;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	711a      	strb	r2, [r3, #4]
	cyber->delay = delay;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	69ba      	ldr	r2, [r7, #24]
 80002e2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <CyberGear_SetConfig>:

void CyberGear_SetConfig(CyberGear_Typedef *cyber, float torque_limit,
		float speed_limit, float current_limit) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80002fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000302:	ed87 1a00 	vstr	s2, [r7]
	CyberGear_TorqueLimit(cyber, torque_limit);
 8000306:	ed97 0a02 	vldr	s0, [r7, #8]
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f848 	bl	80003a0 <CyberGear_TorqueLimit>
	CyberGear_SpeedLimit(cyber, speed_limit);
 8000310:	ed97 0a01 	vldr	s0, [r7, #4]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f81f 	bl	8000358 <CyberGear_SpeedLimit>
	CyberGear_CurrentLimit(cyber, current_limit);
 800031a:	ed97 0a00 	vldr	s0, [r7]
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f000 f862 	bl	80003e8 <CyberGear_CurrentLimit>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CyberGear_SetMode>:

void CyberGear_SetMode(CyberGear_Typedef *cyber, uint8_t mode) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	uint8_t index_data[4] = { 0 };
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	index_data[0] = mode;
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	733b      	strb	r3, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7005, index_data);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	461a      	mov	r2, r3
 8000346:	f247 0105 	movw	r1, #28677	@ 0x7005
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8cf 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <CyberGear_SpeedLimit>:

void CyberGear_SpeedLimit(CyberGear_Typedef *cyber, float limit) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_speed = limit;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	609a      	str	r2, [r3, #8]
	union float_binary limit_speed;
	limit_speed.data = make_float_writedata(limit, 0, V_MAX);
 800036a:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 800036e:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800039c <CyberGear_SpeedLimit+0x44>
 8000372:	ed97 0a00 	vldr	s0, [r7]
 8000376:	f7ff ff27 	bl	80001c8 <make_float_writedata>
 800037a:	eef0 7a40 	vmov.f32	s15, s0
 800037e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7017, limit_speed.bin);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	461a      	mov	r2, r3
 8000388:	f247 0117 	movw	r1, #28695	@ 0x7017
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8ae 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00000000 	.word	0x00000000

080003a0 <CyberGear_TorqueLimit>:
void CyberGear_TorqueLimit(CyberGear_Typedef *cyber, float limit) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_torque = limit;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	611a      	str	r2, [r3, #16]
	union float_binary limit_torque;
	limit_torque.data = make_float_writedata(limit, 0, T_MAX);
 80003b2:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 80003b6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80003e4 <CyberGear_TorqueLimit+0x44>
 80003ba:	ed97 0a00 	vldr	s0, [r7]
 80003be:	f7ff ff03 	bl	80001c8 <make_float_writedata>
 80003c2:	eef0 7a40 	vmov.f32	s15, s0
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700B, limit_torque.bin);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	461a      	mov	r2, r3
 80003d0:	f247 010b 	movw	r1, #28683	@ 0x700b
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f88a 	bl	80004ee <CyberGear_WriteIndexParam>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	00000000 	.word	0x00000000

080003e8 <CyberGear_CurrentLimit>:
void CyberGear_CurrentLimit(CyberGear_Typedef *cyber, float limit) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	ed87 0a00 	vstr	s0, [r7]
	cyber->cyberconfig.limit_current = limit;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60da      	str	r2, [r3, #12]
	union float_binary limit_current;
	limit_current.data = make_float_writedata(limit, 0, 23.0);
 80003fa:	eeb3 1a07 	vmov.f32	s2, #55	@ 0x41b80000  23.0
 80003fe:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800042c <CyberGear_CurrentLimit+0x44>
 8000402:	ed97 0a00 	vldr	s0, [r7]
 8000406:	f7ff fedf 	bl	80001c8 <make_float_writedata>
 800040a:	eef0 7a40 	vmov.f32	s15, s0
 800040e:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x7018, limit_current.bin);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	461a      	mov	r2, r3
 8000418:	f247 0118 	movw	r1, #28696	@ 0x7018
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f866 	bl	80004ee <CyberGear_WriteIndexParam>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00000000 	.word	0x00000000

08000430 <CyberGear_ControlSpeed>:
void CyberGear_CurrentControlPram(CyberGear_Typedef *cyber, float kp, float ki,
		float gain);
void CyberGear_ControlSpeed(CyberGear_Typedef *cyber, float target_speed) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	ed87 0a00 	vstr	s0, [r7]
	cyber->cybermotion.velocity = target_speed;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
	union float_binary b_speed;
	b_speed.data = make_float_writedata(target_speed, V_MIN, V_MAX);
 8000442:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000446:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 800044a:	ed97 0a00 	vldr	s0, [r7]
 800044e:	f7ff febb 	bl	80001c8 <make_float_writedata>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	edc7 7a03 	vstr	s15, [r7, #12]
	CyberGear_WriteIndexParam(cyber, 0x700A, b_speed.bin);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	461a      	mov	r2, r3
 8000460:	f247 010a 	movw	r1, #28682	@ 0x700a
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f842 	bl	80004ee <CyberGear_WriteIndexParam>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <CyberGear_EnableMotor>:
	txdata[6] = (uint_kd >> 8) & 0xff;

	CyberGear_SendCANData(cyber, 1, uint_torque, cyber->cyberconfig.id, txdata);
}

void CyberGear_EnableMotor(CyberGear_Typedef *cyber) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af02      	add	r7, sp, #8
 8000478:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 3, cyber->cyberconfig.master_id,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795a      	ldrb	r2, [r3, #5]
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	4613      	mov	r3, r2
 8000494:	460a      	mov	r2, r1
 8000496:	2103      	movs	r1, #3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff febf 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80004a4:	200a      	movs	r0, #10
 80004a6:	4798      	blx	r3
}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <CyberGear_ResetMotor>:

void CyberGear_ResetMotor(CyberGear_Typedef *cyber) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
	uint8_t txdata[8] = { 0 };
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]

	CyberGear_SendCANData(cyber, 4, cyber->cyberconfig.master_id,
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795a      	ldrb	r2, [r3, #5]
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	4613      	mov	r3, r2
 80004d2:	460a      	mov	r2, r1
 80004d4:	2104      	movs	r1, #4
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff fea0 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(10);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80004e2:	200a      	movs	r0, #10
 80004e4:	4798      	blx	r3
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <CyberGear_WriteIndexParam>:
	CyberGear_SendCANData(cyber, 17, cyber->cyberconfig.master_id,
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
}
void CyberGear_WriteIndexParam(CyberGear_Typedef *cyber, uint16_t index,
		uint8_t *write_data) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b08a      	sub	sp, #40	@ 0x28
 80004f2:	af02      	add	r7, sp, #8
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	460b      	mov	r3, r1
 80004f8:	607a      	str	r2, [r7, #4]
 80004fa:	817b      	strh	r3, [r7, #10]
	uint8_t txdata[8] = { 0 };
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
	union uint16_binary index_bin;
	index_bin.data = index;
 8000504:	897b      	ldrh	r3, [r7, #10]
 8000506:	82bb      	strh	r3, [r7, #20]
	txdata[0] = index_bin.bin[0];
 8000508:	7d3b      	ldrb	r3, [r7, #20]
 800050a:	763b      	strb	r3, [r7, #24]
	txdata[1] = index_bin.bin[1];
 800050c:	7d7b      	ldrb	r3, [r7, #21]
 800050e:	767b      	strb	r3, [r7, #25]
	txdata[4] = write_data[0];
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	773b      	strb	r3, [r7, #28]
	txdata[5] = write_data[1];
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	777b      	strb	r3, [r7, #29]
	txdata[6] = write_data[2];
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	77bb      	strb	r3, [r7, #30]
	txdata[7] = write_data[3];
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	77fb      	strb	r3, [r7, #31]
	CyberGear_SendCANData(cyber, 18, cyber->cyberconfig.master_id,
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	795a      	ldrb	r2, [r3, #5]
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4613      	mov	r3, r2
 800053a:	460a      	mov	r2, r1
 800053c:	2112      	movs	r1, #18
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f7ff fe6c 	bl	800021c <CyberGear_SendCANData>
			cyber->cyberconfig.id, txdata);
	cyber->delay(1);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800054a:	2001      	movs	r0, #1
 800054c:	4798      	blx	r3
}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <Easy_CAN6_Start>:

#include<string.h>

#ifdef HAL_CAN_MODULE_ENABLED
void Easy_CAN6_Start(Easy_CAN6_Typedef *ecan, CAN_HandleTypeDef *hcan,
		uint8_t can_nuumber) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	4613      	mov	r3, r2
 8000562:	71fb      	strb	r3, [r7, #7]
	ecan->hcan = hcan;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	601a      	str	r2, [r3, #0]
	ecan->filter.FilterIdHigh = 0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	639a      	str	r2, [r3, #56]	@ 0x38
	ecan->filter.FilterIdLow = 0;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	63da      	str	r2, [r3, #60]	@ 0x3c
	ecan->filter.FilterMaskIdHigh = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	641a      	str	r2, [r3, #64]	@ 0x40
	ecan->filter.FilterMaskIdLow = 0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	645a      	str	r2, [r3, #68]	@ 0x44
	ecan->filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	649a      	str	r2, [r3, #72]	@ 0x48

	if (can_nuumber == 1)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d103      	bne.n	8000596 <Easy_CAN6_Start+0x40>
		ecan->filter.FilterBank = 0;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000594:	e002      	b.n	800059c <Easy_CAN6_Start+0x46>
	else
		ecan->filter.FilterBank = 14;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	220e      	movs	r2, #14
 800059a:	64da      	str	r2, [r3, #76]	@ 0x4c

	ecan->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	651a      	str	r2, [r3, #80]	@ 0x50
	ecan->filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	655a      	str	r2, [r3, #84]	@ 0x54
	ecan->filter.FilterActivation = CAN_FILTER_ENABLE;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2201      	movs	r2, #1
 80005ac:	659a      	str	r2, [r3, #88]	@ 0x58
	ecan->filter.SlaveStartFilterBank = 14;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	220e      	movs	r2, #14
 80005b2:	65da      	str	r2, [r3, #92]	@ 0x5c

	if (HAL_CAN_ConfigFilter(ecan->hcan, &(ecan->filter)) != HAL_OK)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3338      	adds	r3, #56	@ 0x38
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f000 fc51 	bl	8000e66 <HAL_CAN_ConfigFilter>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <Easy_CAN6_Start+0x78>
		Error_Handler();
 80005ca:	f000 f9a9 	bl	8000920 <Error_Handler>
	if (HAL_CAN_ActivateNotification(ecan->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2102      	movs	r1, #2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fe59 	bl	800128c <HAL_CAN_ActivateNotification>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <Easy_CAN6_Start+0x8e>
			!= HAL_OK)
		Error_Handler();
 80005e0:	f000 f99e 	bl	8000920 <Error_Handler>
	if (HAL_CAN_Start(ecan->hcan) != HAL_OK)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd06 	bl	8000ffa <HAL_CAN_Start>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <Easy_CAN6_Start+0xa2>
		HAL_NVIC_SystemReset();
 80005f4:	f000 ff5f 	bl	80014b6 <HAL_NVIC_SystemReset>

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Easy_CAN6_BlockingTransmit_Ext>:
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);

}

void Easy_CAN6_BlockingTransmit_Ext(Easy_CAN6_Typedef *ecan, uint32_t ext_id,
		uint8_t *txdata, uint8_t size) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	70fb      	strb	r3, [r7, #3]
	uint32_t TxMailbox = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
	ecan->TxHeader.ExtId = ext_id;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
	ecan->TxHeader.IDE = CAN_ID_EXT;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2204      	movs	r2, #4
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
	ecan->TxHeader.RTR = CAN_RTR_DATA;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
	ecan->TxHeader.DLC = size;
 8000624:	78fa      	ldrb	r2, [r7, #3]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
	ecan->TxHeader.TransmitGlobalTime = DISABLE;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000632:	e000      	b.n	8000636 <Easy_CAN6_BlockingTransmit_Ext+0x36>
		asm("NOP");
 8000634:	bf00      	nop
	while (HAL_CAN_GetTxMailboxesFreeLevel(ecan->hcan) == 0)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fdf1 	bl	8001222 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f6      	beq.n	8000634 <Easy_CAN6_BlockingTransmit_Ext+0x34>
	HAL_CAN_AddTxMessage(ecan->hcan, &(ecan->TxHeader), txdata, &TxMailbox);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f103 0120 	add.w	r1, r3, #32
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	f000 fd14 	bl	8001082 <HAL_CAN_AddTxMessage>

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b0a2      	sub	sp, #136	@ 0x88
 8000668:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  const uint8_t txBuff[] = "Hello, Worldaaaa\n";
 800066a:	4b3e      	ldr	r3, [pc, #248]	@ (8000764 <main+0x100>)
 800066c:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	682b      	ldr	r3, [r5, #0]
 8000678:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fa6f 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f883 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f929 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000686:	f000 f8f7 	bl	8000878 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800068a:	f000 f8bf 	bl	800080c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	Easy_CAN6_Start(&ecan, &hcan, 2);
 800068e:	2202      	movs	r2, #2
 8000690:	4935      	ldr	r1, [pc, #212]	@ (8000768 <main+0x104>)
 8000692:	4836      	ldr	r0, [pc, #216]	@ (800076c <main+0x108>)
 8000694:	f7ff ff5f 	bl	8000556 <Easy_CAN6_Start>
	for (int i = 0; i < 4; i++) {
 8000698:	2300      	movs	r3, #0
 800069a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800069c:	e03d      	b.n	800071a <main+0xb6>
		CyberGear_Init(&my_cyber[i], &ecan, 0x70 + i, 0, HAL_Delay);
 800069e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006a0:	22b0      	movs	r2, #176	@ 0xb0
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <main+0x10c>)
 80006a8:	1898      	adds	r0, r3, r2
 80006aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	3370      	adds	r3, #112	@ 0x70
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <main+0x110>)
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	492c      	ldr	r1, [pc, #176]	@ (800076c <main+0x108>)
 80006ba:	f7ff fdfc 	bl	80002b6 <CyberGear_Init>
		CyberGear_ResetMotor(&my_cyber[i]);
 80006be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006c0:	22b0      	movs	r2, #176	@ 0xb0
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <main+0x10c>)
 80006c8:	4413      	add	r3, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fef0 	bl	80004b0 <CyberGear_ResetMotor>
		CyberGear_SetMode(&my_cyber[i], MODE_SPEED);
 80006d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006d2:	22b0      	movs	r2, #176	@ 0xb0
 80006d4:	fb02 f303 	mul.w	r3, r2, r3
 80006d8:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0x10c>)
 80006da:	4413      	add	r3, r2
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe24 	bl	800032c <CyberGear_SetMode>
		CyberGear_SetConfig(&my_cyber[i], 12.0f, 30.0f, 6.0f);
 80006e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006e6:	22b0      	movs	r2, #176	@ 0xb0
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <main+0x10c>)
 80006ee:	4413      	add	r3, r2
 80006f0:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 80006f4:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80006f8:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fdf8 	bl	80002f2 <CyberGear_SetConfig>
		CyberGear_EnableMotor(&my_cyber[i]);
 8000702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000704:	22b0      	movs	r2, #176	@ 0xb0
 8000706:	fb02 f303 	mul.w	r3, r2, r3
 800070a:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <main+0x10c>)
 800070c:	4413      	add	r3, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff feaf 	bl	8000472 <CyberGear_EnableMotor>
	for (int i = 0; i < 4; i++) {
 8000714:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000716:	3301      	adds	r3, #1
 8000718:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800071a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800071c:	2b03      	cmp	r3, #3
 800071e:	ddbe      	ble.n	800069e <main+0x3a>
	}
	CyberGear_ControlSpeed(&my_cyber[0], 1.0);
 8000720:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000724:	4812      	ldr	r0, [pc, #72]	@ (8000770 <main+0x10c>)
 8000726:	f7ff fe83 	bl	8000430 <CyberGear_ControlSpeed>
	CyberGear_ControlSpeed(&my_cyber[1], -1.0);
 800072a:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <main+0x114>)
 8000730:	f7ff fe7e 	bl	8000430 <CyberGear_ControlSpeed>
	CyberGear_ControlSpeed(&my_cyber[2], 30.0);
 8000734:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000738:	4810      	ldr	r0, [pc, #64]	@ (800077c <main+0x118>)
 800073a:	f7ff fe79 	bl	8000430 <CyberGear_ControlSpeed>
	CyberGear_ControlSpeed(&my_cyber[3], -30.0);
 800073e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8000742:	480f      	ldr	r0, [pc, #60]	@ (8000780 <main+0x11c>)
 8000744:	f7ff fe74 	bl	8000430 <CyberGear_ControlSpeed>
	HAL_Delay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f000 fa6c 	bl	8000c28 <HAL_Delay>
//	CyberGear_ControlSpeed(&my_cyber, -50.0);


//	  startTime = HAL_GetTick();

	  HAL_UART_Transmit(&huart2, txBuff, sizeof(txBuff), 0xFFFF);
 8000750:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000754:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000758:	2212      	movs	r2, #18
 800075a:	480a      	ldr	r0, [pc, #40]	@ (8000784 <main+0x120>)
 800075c:	f002 faf0 	bl	8002d40 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <main+0xfc>
 8000764:	08003578 	.word	0x08003578
 8000768:	20000028 	.word	0x20000028
 800076c:	20000398 	.word	0x20000398
 8000770:	200000d8 	.word	0x200000d8
 8000774:	08000c29 	.word	0x08000c29
 8000778:	20000188 	.word	0x20000188
 800077c:	20000238 	.word	0x20000238
 8000780:	200002e8 	.word	0x200002e8
 8000784:	20000050 	.word	0x20000050

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b090      	sub	sp, #64	@ 0x40
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2228      	movs	r2, #40	@ 0x28
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fea7 	bl	80034ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ae:	2301      	movs	r3, #1
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	2310      	movs	r3, #16
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80007be:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80007c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fff7 	bl	80017bc <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007d4:	f000 f8a4 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f820 	bl	8002838 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007fe:	f000 f88f 	bl	8000920 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3740      	adds	r7, #64	@ 0x40
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_CAN_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_CAN_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_CAN_Init+0x64>)
 8000818:	2202      	movs	r2, #2
 800081a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_CAN_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_CAN_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_CAN_Init+0x64>)
 800082a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800082e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_CAN_Init+0x64>)
 8000832:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000836:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <MX_CAN_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_CAN_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_CAN_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_CAN_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_CAN_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_CAN_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_CAN_Init+0x64>)
 800085e:	f000 fa07 	bl	8000c70 <HAL_CAN_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f85a 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000028 	.word	0x20000028
 8000874:	40006400 	.word	0x40006400

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 800087e:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <MX_USART2_UART_Init+0x58>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 8000884:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <MX_USART2_UART_Init+0x5c>)
 8000886:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 800089c:	220c      	movs	r2, #12
 800089e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_USART2_UART_Init+0x54>)
 80008ba:	f002 f9f3 	bl	8002ca4 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80008c4:	f000 f82c 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000050 	.word	0x20000050
 80008d0:	40004400 	.word	0x40004400
 80008d4:	0007a120 	.word	0x0007a120

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_GPIO_Init+0x44>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <MX_GPIO_Init+0x44>)
 80008e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_GPIO_Init+0x44>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_GPIO_Init+0x44>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a08      	ldr	r2, [pc, #32]	@ (800091c <MX_GPIO_Init+0x44>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_GPIO_Init+0x44>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x44>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x44>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x44>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x44>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a18      	ldr	r2, [pc, #96]	@ (80009f4 <HAL_CAN_MspInit+0x80>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d129      	bne.n	80009ea <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_CAN_MspInit+0x84>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <HAL_CAN_MspInit+0x84>)
 800099c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_CAN_MspInit+0x84>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_CAN_MspInit+0x84>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a11      	ldr	r2, [pc, #68]	@ (80009f8 <HAL_CAN_MspInit+0x84>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <HAL_CAN_MspInit+0x84>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80009d8:	2309      	movs	r3, #9
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e6:	f000 fd77 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	@ 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40006400 	.word	0x40006400
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a18      	ldr	r2, [pc, #96]	@ (8000a7c <HAL_UART_MspInit+0x80>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d129      	bne.n	8000a72 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <HAL_UART_MspInit+0x84>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <HAL_UART_MspInit+0x84>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <HAL_UART_MspInit+0x84>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_UART_MspInit+0x84>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_UART_MspInit+0x84>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_UART_MspInit+0x84>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a4e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f000 fd33 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	@ 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40021000 	.word	0x40021000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <NMI_Handler+0x4>

08000a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ada:	f000 f885 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ffea 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	@ (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 fce1 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fd93 	bl	8000664 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b40:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	20000404 	.word	0x20000404

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 fc7b 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fed8 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fc89 	bl	80014be <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 fc5b 	bl	800147e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000400 	.word	0x20000400

08000c10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000400 	.word	0x20000400

08000c28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e0ed      	b.n	8000e5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fe70 	bl	8000974 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0201 	orr.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca4:	f7ff ffb4 	bl	8000c10 <HAL_GetTick>
 8000ca8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000caa:	e012      	b.n	8000cd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cac:	f7ff ffb0 	bl	8000c10 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b0a      	cmp	r3, #10
 8000cb8:	d90b      	bls.n	8000cd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2205      	movs	r2, #5
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e0c5      	b.n	8000e5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0e5      	beq.n	8000cac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0202 	bic.w	r2, r2, #2
 8000cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf0:	f7ff ff8e 	bl	8000c10 <HAL_GetTick>
 8000cf4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf6:	e012      	b.n	8000d1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf8:	f7ff ff8a 	bl	8000c10 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d90b      	bls.n	8000d1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2205      	movs	r2, #5
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e09f      	b.n	8000e5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e5      	bne.n	8000cf8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7e1b      	ldrb	r3, [r3, #24]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d108      	bne.n	8000d46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e007      	b.n	8000d56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7e5b      	ldrb	r3, [r3, #25]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d108      	bne.n	8000d70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e007      	b.n	8000d80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7e9b      	ldrb	r3, [r3, #26]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d108      	bne.n	8000d9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0220 	orr.w	r2, r2, #32
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	e007      	b.n	8000daa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0220 	bic.w	r2, r2, #32
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7edb      	ldrb	r3, [r3, #27]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d108      	bne.n	8000dc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0210 	bic.w	r2, r2, #16
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e007      	b.n	8000dd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0210 	orr.w	r2, r2, #16
 8000dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7f1b      	ldrb	r3, [r3, #28]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d108      	bne.n	8000dee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0208 	orr.w	r2, r2, #8
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	e007      	b.n	8000dfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 0208 	bic.w	r2, r2, #8
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7f5b      	ldrb	r3, [r3, #29]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d108      	bne.n	8000e18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f042 0204 	orr.w	r2, r2, #4
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e007      	b.n	8000e28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0204 	bic.w	r2, r2, #4
 8000e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	ea42 0103 	orr.w	r1, r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	1e5a      	subs	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b087      	sub	sp, #28
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e7e:	7cfb      	ldrb	r3, [r7, #19]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d003      	beq.n	8000e8c <HAL_CAN_ConfigFilter+0x26>
 8000e84:	7cfb      	ldrb	r3, [r7, #19]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	f040 80aa 	bne.w	8000fe0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d123      	bne.n	8000f0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ee8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3248      	adds	r2, #72	@ 0x48
 8000eee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f04:	6979      	ldr	r1, [r7, #20]
 8000f06:	3348      	adds	r3, #72	@ 0x48
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d122      	bne.n	8000f5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3248      	adds	r2, #72	@ 0x48
 8000f3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f52:	6979      	ldr	r1, [r7, #20]
 8000f54:	3348      	adds	r3, #72	@ 0x48
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f76:	e007      	b.n	8000f88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000fa2:	e007      	b.n	8000fb4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d107      	bne.n	8000fcc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fd2:	f023 0201 	bic.w	r2, r3, #1
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e006      	b.n	8000fee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d12e      	bne.n	800106c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001026:	f7ff fdf3 	bl	8000c10 <HAL_GetTick>
 800102a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800102c:	e012      	b.n	8001054 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102e:	f7ff fdef 	bl	8000c10 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b0a      	cmp	r3, #10
 800103a:	d90b      	bls.n	8001054 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001040:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2205      	movs	r2, #5
 800104c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e012      	b.n	800107a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	e006      	b.n	800107a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
  }
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001082:	b480      	push	{r7}
 8001084:	b089      	sub	sp, #36	@ 0x24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001096:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d003      	beq.n	80010ae <HAL_CAN_AddTxMessage+0x2c>
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	f040 80ad 	bne.w	8001208 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10a      	bne.n	80010ce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d105      	bne.n	80010ce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8095 	beq.w	80011f8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	0e1b      	lsrs	r3, r3, #24
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010d8:	2201      	movs	r2, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	409a      	lsls	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	6809      	ldr	r1, [r1, #0]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3318      	adds	r3, #24
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	440b      	add	r3, r1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e00f      	b.n	8001126 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001110:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800111a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3318      	adds	r3, #24
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	440b      	add	r3, r1
 8001124:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3318      	adds	r3, #24
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	3304      	adds	r3, #4
 8001138:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	7d1b      	ldrb	r3, [r3, #20]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d111      	bne.n	8001166 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3318      	adds	r3, #24
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	3304      	adds	r3, #4
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	6811      	ldr	r1, [r2, #0]
 8001156:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3318      	adds	r3, #24
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	440b      	add	r3, r1
 8001162:	3304      	adds	r3, #4
 8001164:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3307      	adds	r3, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	061a      	lsls	r2, r3, #24
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3306      	adds	r3, #6
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3305      	adds	r3, #5
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	4313      	orrs	r3, r2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	3204      	adds	r2, #4
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	4610      	mov	r0, r2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	6811      	ldr	r1, [r2, #0]
 800118e:	ea43 0200 	orr.w	r2, r3, r0
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800119c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3303      	adds	r3, #3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	061a      	lsls	r2, r3, #24
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3302      	adds	r3, #2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	4313      	orrs	r3, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	4610      	mov	r0, r2
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	6811      	ldr	r1, [r2, #0]
 80011c4:	ea43 0200 	orr.w	r2, r3, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	440b      	add	r3, r1
 80011ce:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80011d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3318      	adds	r3, #24
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	6811      	ldr	r1, [r2, #0]
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3318      	adds	r3, #24
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	440b      	add	r3, r1
 80011f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e00e      	b.n	8001216 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e006      	b.n	8001216 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
  }
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001222:	b480      	push	{r7}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d002      	beq.n	8001242 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d11d      	bne.n	800127e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d002      	beq.n	80012aa <HAL_CAN_ActivateNotification+0x1e>
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d109      	bne.n	80012be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6959      	ldr	r1, [r3, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e006      	b.n	80012cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
  }
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013fc:	f3bf 8f4f 	dsb	sy
}
 8001400:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <__NVIC_SystemReset+0x24>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800140a:	4904      	ldr	r1, [pc, #16]	@ (800141c <__NVIC_SystemReset+0x24>)
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <__NVIC_SystemReset+0x28>)
 800140e:	4313      	orrs	r3, r2
 8001410:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001412:	f3bf 8f4f 	dsb	sy
}
 8001416:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <__NVIC_SystemReset+0x20>
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	05fa0004 	.word	0x05fa0004

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001448:	f7ff ff78 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff46 	bl	8001320 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff78 	bl	8001390 <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff47 	bl	800133c <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80014ba:	f7ff ff9d 	bl	80013f8 <__NVIC_SystemReset>

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffac 	bl	8001424 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	e14e      	b.n	8001786 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8140 	beq.w	8001780 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x40>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 809a 	beq.w	8001780 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b55      	ldr	r3, [pc, #340]	@ (80017a4 <HAL_GPIO_Init+0x2cc>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <HAL_GPIO_Init+0x2cc>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b52      	ldr	r3, [pc, #328]	@ (80017a4 <HAL_GPIO_Init+0x2cc>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001664:	4a50      	ldr	r2, [pc, #320]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x1e0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a46      	ldr	r2, [pc, #280]	@ (80017ac <HAL_GPIO_Init+0x2d4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1dc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a45      	ldr	r2, [pc, #276]	@ (80017b0 <HAL_GPIO_Init+0x2d8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1d8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a44      	ldr	r2, [pc, #272]	@ (80017b4 <HAL_GPIO_Init+0x2dc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1d4>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016b8:	2300      	movs	r3, #0
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ca:	4937      	ldr	r1, [pc, #220]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d8:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016fc:	4a2e      	ldr	r2, [pc, #184]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001702:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001726:	4a24      	ldr	r2, [pc, #144]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172c:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800177a:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f aea9 	bne.w	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	48000400 	.word	0x48000400
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000c00 	.word	0x48000c00
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f001 b823 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 817d 	beq.w	8001af2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017f8:	4bbc      	ldr	r3, [pc, #752]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b04      	cmp	r3, #4
 8001802:	d00c      	beq.n	800181e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001804:	4bb9      	ldr	r3, [pc, #740]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d15c      	bne.n	80018ca <HAL_RCC_OscConfig+0x10e>
 8001810:	4bb6      	ldr	r3, [pc, #728]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800181c:	d155      	bne.n	80018ca <HAL_RCC_OscConfig+0x10e>
 800181e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001822:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001832:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0x94>
 800184a:	4ba8      	ldr	r3, [pc, #672]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e015      	b.n	800187c <HAL_RCC_OscConfig+0xc0>
 8001850:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001854:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001868:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800186c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001878:	4b9c      	ldr	r3, [pc, #624]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001880:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001884:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001888:	fa92 f2a2 	rbit	r2, r2
 800188c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001890:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 811f 	beq.w	8001af0 <HAL_RCC_OscConfig+0x334>
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 8116 	bne.w	8001af0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f000 bfaf 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x12e>
 80018dc:	4b83      	ldr	r3, [pc, #524]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a82      	ldr	r2, [pc, #520]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e036      	b.n	8001958 <HAL_RCC_OscConfig+0x19c>
 80018ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x158>
 80018fa:	4b7c      	ldr	r3, [pc, #496]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7b      	ldr	r2, [pc, #492]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b79      	ldr	r3, [pc, #484]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a78      	ldr	r2, [pc, #480]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800190c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e021      	b.n	8001958 <HAL_RCC_OscConfig+0x19c>
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x184>
 8001926:	4b71      	ldr	r3, [pc, #452]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a70      	ldr	r2, [pc, #448]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b6e      	ldr	r3, [pc, #440]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6d      	ldr	r2, [pc, #436]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0x19c>
 8001940:	4b6a      	ldr	r3, [pc, #424]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a69      	ldr	r2, [pc, #420]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a66      	ldr	r2, [pc, #408]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001956:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001958:	4b64      	ldr	r3, [pc, #400]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195c:	f023 020f 	bic.w	r2, r3, #15
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	495f      	ldr	r1, [pc, #380]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 800196e:	4313      	orrs	r3, r2
 8001970:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d059      	beq.n	8001a36 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff f945 	bl	8000c10 <HAL_GetTick>
 8001986:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f940 	bl	8000c10 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	@ 0x64
 800199a:	d902      	bls.n	80019a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	f000 bf43 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
 80019a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80019b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_OscConfig+0x218>
 80019ce:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	e015      	b.n	8001a00 <HAL_RCC_OscConfig+0x244>
 80019d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80019e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80019f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a04:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001a08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a0c:	fa92 f2a2 	rbit	r2, r2
 8001a10:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001a14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a18:	fab2 f282 	clz	r2, r2
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f002 021f 	and.w	r2, r2, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ab      	beq.n	800198c <HAL_RCC_OscConfig+0x1d0>
 8001a34:	e05d      	b.n	8001af2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f8eb 	bl	8000c10 <HAL_GetTick>
 8001a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f8e6 	bl	8000c10 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	@ 0x64
 8001a4e:	d902      	bls.n	8001a56 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f000 bee9 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
 8001a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a5a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001a6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	095b      	lsrs	r3, r3, #5
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2cc>
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e015      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2f8>
 8001a88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a8c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001aa4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ab8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001abc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ac0:	fa92 f2a2 	rbit	r2, r2
 8001ac4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ac8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ab      	bne.n	8001a40 <HAL_RCC_OscConfig+0x284>
 8001ae8:	e003      	b.n	8001af2 <HAL_RCC_OscConfig+0x336>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 817d 	beq.w	8001e02 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b08:	4ba6      	ldr	r3, [pc, #664]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b14:	4ba3      	ldr	r3, [pc, #652]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d172      	bne.n	8001c06 <HAL_RCC_OscConfig+0x44a>
 8001b20:	4ba0      	ldr	r3, [pc, #640]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d16c      	bne.n	8001c06 <HAL_RCC_OscConfig+0x44a>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001b3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x3a0>
 8001b56:	4b93      	ldr	r3, [pc, #588]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e013      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c8>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b74:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b80:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2202      	movs	r2, #2
 8001b86:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001b8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001b8e:	fa92 f2a2 	rbit	r2, r2
 8001b92:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b96:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b9a:	fab2 f282 	clz	r2, r2
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f042 0220 	orr.w	r2, r2, #32
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f002 021f 	and.w	r2, r2, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCC_OscConfig+0x410>
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f000 be2e 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b75      	ldr	r3, [pc, #468]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	21f8      	movs	r1, #248	@ 0xf8
 8001be2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001bea:	fa91 f1a1 	rbit	r1, r1
 8001bee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001bf2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001bf6:	fab1 f181 	clz	r1, r1
 8001bfa:	b2c9      	uxtb	r1, r1
 8001bfc:	408b      	lsls	r3, r1
 8001bfe:	4969      	ldr	r1, [pc, #420]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c04:	e0fd      	b.n	8001e02 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8088 	beq.w	8001d28 <HAL_RCC_OscConfig+0x56c>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001c2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2301      	movs	r3, #1
 8001c42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe ffe4 	bl	8000c10 <HAL_GetTick>
 8001c48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7fe ffdf 	bl	8000c10 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d902      	bls.n	8001c64 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	f000 bde2 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001c76:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4d8>
 8001c8e:	4b45      	ldr	r3, [pc, #276]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e013      	b.n	8001cbc <HAL_RCC_OscConfig+0x500>
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001cc2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001cc6:	fa92 f2a2 	rbit	r2, r2
 8001cca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001cce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001cd2:	fab2 f282 	clz	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f042 0220 	orr.w	r2, r2, #32
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0af      	beq.n	8001c4e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	21f8      	movs	r1, #248	@ 0xf8
 8001d04:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d0c:	fa91 f1a1 	rbit	r1, r1
 8001d10:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001d14:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001d18:	fab1 f181 	clz	r1, r1
 8001d1c:	b2c9      	uxtb	r1, r1
 8001d1e:	408b      	lsls	r3, r1
 8001d20:	4920      	ldr	r1, [pc, #128]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	e06c      	b.n	8001e02 <HAL_RCC_OscConfig+0x646>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe ff5c 	bl	8000c10 <HAL_GetTick>
 8001d58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7fe ff57 	bl	8000c10 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d902      	bls.n	8001d74 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f000 bd5a 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d104      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5ec>
 8001d9e:	4b01      	ldr	r3, [pc, #4]	@ (8001da4 <HAL_RCC_OscConfig+0x5e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e015      	b.n	8001dd0 <HAL_RCC_OscConfig+0x614>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001dc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001dcc:	4bc8      	ldr	r3, [pc, #800]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001dd6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001de2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f002 021f 	and.w	r2, r2, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ad      	bne.n	8001d5e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8110 	beq.w	8002038 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d079      	beq.n	8001f1c <HAL_RCC_OscConfig+0x760>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4bab      	ldr	r3, [pc, #684]	@ (80020f4 <HAL_RCC_OscConfig+0x938>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2301      	movs	r3, #1
 8001e50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fedd 	bl	8000c10 <HAL_GetTick>
 8001e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe fed8 	bl	8000c10 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d902      	bls.n	8001e72 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f000 bcdb 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fa93 f2a3 	rbit	r2, r3
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ecc:	4b88      	ldr	r3, [pc, #544]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 8001ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ed8:	2102      	movs	r1, #2
 8001eda:	6019      	str	r1, [r3, #0]
 8001edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f1a3 	rbit	r1, r3
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ef2:	6019      	str	r1, [r3, #0]
  return result;
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0a0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x6a0>
 8001f1a:	e08d      	b.n	8002038 <HAL_RCC_OscConfig+0x87c>
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f3e:	601a      	str	r2, [r3, #0]
  return result;
 8001f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f48:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b68      	ldr	r3, [pc, #416]	@ (80020f4 <HAL_RCC_OscConfig+0x938>)
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fe57 	bl	8000c10 <HAL_GetTick>
 8001f62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f68:	f7fe fe52 	bl	8000c10 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d902      	bls.n	8001f7e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	f000 bc55 	b.w	8002828 <HAL_RCC_OscConfig+0x106c>
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001faa:	2202      	movs	r2, #2
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fce:	2202      	movs	r2, #2
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fea:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 8001fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	6019      	str	r1, [r3, #0]
 8001ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f1a3 	rbit	r1, r3
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002010:	6019      	str	r1, [r3, #0]
  return result;
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d197      	bne.n	8001f68 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 81a1 	beq.w	8002390 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002054:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	4a22      	ldr	r2, [pc, #136]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206a:	61d3      	str	r3, [r2, #28]
 800206c:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002082:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002086:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <HAL_RCC_OscConfig+0x93c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11a      	bne.n	80020d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <HAL_RCC_OscConfig+0x93c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a16      	ldr	r2, [pc, #88]	@ (80020f8 <HAL_RCC_OscConfig+0x93c>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7fe fdb3 	bl	8000c10 <HAL_GetTick>
 80020aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	e009      	b.n	80020c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe fdae 	bl	8000c10 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	@ 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e3b1      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <HAL_RCC_OscConfig+0x93c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ef      	beq.n	80020b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10d      	bne.n	80020fc <HAL_RCC_OscConfig+0x940>
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a02      	ldr	r2, [pc, #8]	@ (80020f0 <HAL_RCC_OscConfig+0x934>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e03c      	b.n	8002168 <HAL_RCC_OscConfig+0x9ac>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	10908120 	.word	0x10908120
 80020f8:	40007000 	.word	0x40007000
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x96a>
 800210c:	4bc1      	ldr	r3, [pc, #772]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4ac0      	ldr	r2, [pc, #768]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4bbe      	ldr	r3, [pc, #760]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4abd      	ldr	r2, [pc, #756]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e020      	b.n	8002168 <HAL_RCC_OscConfig+0x9ac>
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x994>
 8002136:	4bb7      	ldr	r3, [pc, #732]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4ab6      	ldr	r2, [pc, #728]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4bb4      	ldr	r3, [pc, #720]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4ab3      	ldr	r2, [pc, #716]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0x9ac>
 8002150:	4bb0      	ldr	r3, [pc, #704]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4aaf      	ldr	r2, [pc, #700]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	4bad      	ldr	r3, [pc, #692]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4aac      	ldr	r2, [pc, #688]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8081 	beq.w	800227c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7fe fd49 	bl	8000c10 <HAL_GetTick>
 800217e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fd44 	bl	8000c10 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e345      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021a4:	2202      	movs	r2, #2
 80021a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021c8:	2202      	movs	r2, #2
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021e2:	601a      	str	r2, [r3, #0]
  return result;
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d102      	bne.n	8002208 <HAL_RCC_OscConfig+0xa4c>
 8002202:	4b84      	ldr	r3, [pc, #528]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	e013      	b.n	8002230 <HAL_RCC_OscConfig+0xa74>
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	4b79      	ldr	r3, [pc, #484]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002234:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002238:	2102      	movs	r1, #2
 800223a:	6011      	str	r1, [r2, #0]
 800223c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002240:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	fa92 f1a2 	rbit	r1, r2
 800224a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800224e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002252:	6011      	str	r1, [r2, #0]
  return result;
 8002254:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002258:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	fab2 f282 	clz	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f002 021f 	and.w	r2, r2, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d084      	beq.n	8002184 <HAL_RCC_OscConfig+0x9c8>
 800227a:	e07f      	b.n	800237c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7fe fcc8 	bl	8000c10 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fcc3 	bl	8000c10 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e2c4      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022ca:	2202      	movs	r2, #2
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022e4:	601a      	str	r2, [r3, #0]
  return result;
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d102      	bne.n	800230a <HAL_RCC_OscConfig+0xb4e>
 8002304:	4b43      	ldr	r3, [pc, #268]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	e013      	b.n	8002332 <HAL_RCC_OscConfig+0xb76>
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002312:	2202      	movs	r2, #2
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	4b39      	ldr	r3, [pc, #228]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002336:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800233a:	2102      	movs	r1, #2
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002342:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	fa92 f1a2 	rbit	r1, r2
 800234c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002350:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002354:	6011      	str	r1, [r2, #0]
  return result;
 8002356:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800235a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d184      	bne.n	8002286 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800237c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8242 	beq.w	8002826 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <HAL_RCC_OscConfig+0xc58>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	f000 8213 	beq.w	80027d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	f040 8162 	bne.w	8002686 <HAL_RCC_OscConfig+0xeca>
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023e6:	601a      	str	r2, [r3, #0]
  return result;
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fc02 	bl	8000c10 <HAL_GetTick>
 800240c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e00c      	b.n	800242c <HAL_RCC_OscConfig+0xc70>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fbfa 	bl	8000c10 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1fd      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002434:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002456:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800245a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0xcba>
 8002470:	4bb0      	ldr	r3, [pc, #704]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e027      	b.n	80024c6 <HAL_RCC_OscConfig+0xd0a>
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800247e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	4b9c      	ldr	r3, [pc, #624]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80024ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024d2:	6011      	str	r1, [r2, #0]
 80024d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	fa92 f1a2 	rbit	r1, r2
 80024e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024ea:	6011      	str	r1, [r2, #0]
  return result;
 80024ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024f0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	fab2 f282 	clz	r2, r2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f002 021f 	and.w	r2, r2, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d182      	bne.n	8002418 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002512:	4b88      	ldr	r3, [pc, #544]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	430b      	orrs	r3, r1
 8002534:	497f      	ldr	r1, [pc, #508]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002542:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800255e:	601a      	str	r2, [r3, #0]
  return result;
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002568:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002574:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	461a      	mov	r2, r3
 800257c:	2301      	movs	r3, #1
 800257e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fb46 	bl	8000c10 <HAL_GetTick>
 8002584:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002588:	e009      	b.n	800259e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fb41 	bl	8000c10 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e144      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0xe2c>
 80025e2:	4b54      	ldr	r3, [pc, #336]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e027      	b.n	8002638 <HAL_RCC_OscConfig+0xe7c>
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002616:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	4b3f      	ldr	r3, [pc, #252]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800263c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002640:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002644:	6011      	str	r1, [r2, #0]
 8002646:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	fa92 f1a2 	rbit	r1, r2
 8002654:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002658:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800265c:	6011      	str	r1, [r2, #0]
  return result;
 800265e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002662:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	fab2 f282 	clz	r2, r2
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f042 0220 	orr.w	r2, r2, #32
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f002 021f 	and.w	r2, r2, #31
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d082      	beq.n	800258a <HAL_RCC_OscConfig+0xdce>
 8002684:	e0cf      	b.n	8002826 <HAL_RCC_OscConfig+0x106a>
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800268e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fa93 f2a3 	rbit	r2, r3
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026aa:	601a      	str	r2, [r3, #0]
  return result;
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	461a      	mov	r2, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe faa0 	bl	8000c10 <HAL_GetTick>
 80026d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fa9b 	bl	8000c10 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e09e      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002718:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d104      	bne.n	8002738 <HAL_RCC_OscConfig+0xf7c>
 800272e:	4b01      	ldr	r3, [pc, #4]	@ (8002734 <HAL_RCC_OscConfig+0xf78>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	e029      	b.n	8002788 <HAL_RCC_OscConfig+0xfcc>
 8002734:	40021000 	.word	0x40021000
 8002738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f2a3 	rbit	r2, r3
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002766:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_RCC_OscConfig+0x1078>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800278c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002790:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002794:	6011      	str	r1, [r2, #0]
 8002796:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800279a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	fa92 f1a2 	rbit	r1, r2
 80027a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027ac:	6011      	str	r1, [r2, #0]
  return result;
 80027ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f002 021f 	and.w	r2, r2, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d180      	bne.n	80026d6 <HAL_RCC_OscConfig+0xf1a>
 80027d4:	e027      	b.n	8002826 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e01e      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_RCC_OscConfig+0x1078>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80027f6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	429a      	cmp	r2, r3
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800280a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800280e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b09e      	sub	sp, #120	@ 0x78
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e162      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b90      	ldr	r3, [pc, #576]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d910      	bls.n	8002880 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	498b      	ldr	r1, [pc, #556]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b89      	ldr	r3, [pc, #548]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e14a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b82      	ldr	r3, [pc, #520]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	497f      	ldr	r1, [pc, #508]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80dc 	beq.w	8002a64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d13c      	bne.n	800292e <HAL_RCC_ClockConfig+0xf6>
 80028b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_RCC_ClockConfig+0xa6>
 80028d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e00f      	b.n	80028fe <HAL_RCC_ClockConfig+0xc6>
 80028de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80028ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80028f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028fa:	4b67      	ldr	r3, [pc, #412]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002902:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002904:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800290c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800290e:	fab2 f282 	clz	r2, r2
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d17b      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0f3      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d13c      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x178>
 8002936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800293a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d102      	bne.n	8002960 <HAL_RCC_ClockConfig+0x128>
 800295a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e00f      	b.n	8002980 <HAL_RCC_ClockConfig+0x148>
 8002960:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002964:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	647b      	str	r3, [r7, #68]	@ 0x44
 800296e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002972:	643b      	str	r3, [r7, #64]	@ 0x40
 8002974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800297c:	4b46      	ldr	r3, [pc, #280]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002984:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800298e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0220 	orr.w	r2, r2, #32
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d13a      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b2      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
 80029b0:	2302      	movs	r3, #2
 80029b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x1a0>
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e00d      	b.n	80029f4 <HAL_RCC_ClockConfig+0x1bc>
 80029d8:	2302      	movs	r3, #2
 80029da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	2202      	movs	r2, #2
 80029f6:	61ba      	str	r2, [r7, #24]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	617a      	str	r2, [r7, #20]
  return result;
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e079      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	491a      	ldr	r1, [pc, #104]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe f8ec 	bl	8000c10 <HAL_GetTick>
 8002a38:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe f8e8 	bl	8000c10 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e061      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_RCC_ClockConfig+0x260>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d214      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4906      	ldr	r1, [pc, #24]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <HAL_RCC_ClockConfig+0x25c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e040      	b.n	8002b16 <HAL_RCC_ClockConfig+0x2de>
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	491a      	ldr	r1, [pc, #104]	@ (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4912      	ldr	r1, [pc, #72]	@ (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ada:	f000 f829 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_RCC_ClockConfig+0x2e8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae8:	22f0      	movs	r2, #240	@ 0xf0
 8002aea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	60fa      	str	r2, [r7, #12]
  return result;
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	40d3      	lsrs	r3, r2
 8002afe:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <HAL_RCC_ClockConfig+0x2ec>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	fa21 f303 	lsr.w	r3, r1, r3
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <HAL_RCC_ClockConfig+0x2f0>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_RCC_ClockConfig+0x2f4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f83a 	bl	8000b88 <HAL_InitTick>
  
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3778      	adds	r7, #120	@ 0x78
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	0800358c 	.word	0x0800358c
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b08b      	sub	sp, #44	@ 0x2c
 8002b34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x30>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x36>
 8002b5e:	e03c      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b60:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b62:	623b      	str	r3, [r7, #32]
      break;
 8002b64:	e03c      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b6c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002b70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	fa92 f2a2 	rbit	r2, r2
 8002b78:	607a      	str	r2, [r7, #4]
  return result;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	40d3      	lsrs	r3, r2
 8002b84:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b8a:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	220f      	movs	r2, #15
 8002b94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	40d3      	lsrs	r3, r2
 8002ba8:	4a14      	ldr	r2, [pc, #80]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	623b      	str	r3, [r7, #32]
      break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bdc:	623b      	str	r3, [r7, #32]
      break;
 8002bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	372c      	adds	r7, #44	@ 0x2c
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	007a1200 	.word	0x007a1200
 8002bf8:	080035a4 	.word	0x080035a4
 8002bfc:	080035b4 	.word	0x080035b4
 8002c00:	003d0900 	.word	0x003d0900

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c22:	f7ff ffef 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c26:	4601      	mov	r1, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c30:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	603a      	str	r2, [r7, #0]
  return result;
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	40d3      	lsrs	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	0800359c 	.word	0x0800359c

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c66:	f7ff ffcd 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002c74:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	603a      	str	r2, [r7, #0]
  return result;
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	40d3      	lsrs	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	0800359c 	.word	0x0800359c

08002ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e040      	b.n	8002d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fe98 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	@ 0x24
 8002cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8b6 	bl	8002e54 <UART_SetConfig>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e022      	b.n	8002d38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f9e0 	bl	80030c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fa67 	bl	8003204 <UART_CheckIdleState>
 8002d36:	4603      	mov	r3, r0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d177      	bne.n	8002e48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_Transmit+0x24>
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e070      	b.n	8002e4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2221      	movs	r2, #33	@ 0x21
 8002d74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d76:	f7fd ff4b 	bl	8000c10 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d94:	d108      	bne.n	8002da8 <HAL_UART_Transmit+0x68>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e003      	b.n	8002db0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db0:	e02f      	b.n	8002e12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	@ 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fac9 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e03b      	b.n	8002e4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	881a      	ldrh	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de4:	b292      	uxth	r2, r2
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	3302      	adds	r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e007      	b.n	8002e00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1c9      	bne.n	8002db2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2140      	movs	r1, #64	@ 0x40
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fa93 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e005      	b.n	8002e4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b8a      	ldr	r3, [pc, #552]	@ (80030a8 <UART_SetConfig+0x254>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a78      	ldr	r2, [pc, #480]	@ (80030ac <UART_SetConfig+0x258>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d120      	bne.n	8002f12 <UART_SetConfig+0xbe>
 8002ed0:	4b77      	ldr	r3, [pc, #476]	@ (80030b0 <UART_SetConfig+0x25c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d817      	bhi.n	8002f0c <UART_SetConfig+0xb8>
 8002edc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <UART_SetConfig+0x90>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002f07 	.word	0x08002f07
 8002ef0:	08002efb 	.word	0x08002efb
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e01d      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e01a      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e017      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002f06:	2308      	movs	r3, #8
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e014      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e011      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a67      	ldr	r2, [pc, #412]	@ (80030b4 <UART_SetConfig+0x260>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <UART_SetConfig+0xce>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e009      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a64      	ldr	r2, [pc, #400]	@ (80030b8 <UART_SetConfig+0x264>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d102      	bne.n	8002f32 <UART_SetConfig+0xde>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e001      	b.n	8002f36 <UART_SetConfig+0xe2>
 8002f32:	2310      	movs	r3, #16
 8002f34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3e:	d15a      	bne.n	8002ff6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d827      	bhi.n	8002f96 <UART_SetConfig+0x142>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <UART_SetConfig+0xf8>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f79 	.word	0x08002f79
 8002f54:	08002f81 	.word	0x08002f81
 8002f58:	08002f97 	.word	0x08002f97
 8002f5c:	08002f87 	.word	0x08002f87
 8002f60:	08002f97 	.word	0x08002f97
 8002f64:	08002f97 	.word	0x08002f97
 8002f68:	08002f97 	.word	0x08002f97
 8002f6c:	08002f8f 	.word	0x08002f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7ff fe54 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8002f74:	61b8      	str	r0, [r7, #24]
        break;
 8002f76:	e013      	b.n	8002fa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7ff fe72 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	61b8      	str	r0, [r7, #24]
        break;
 8002f7e:	e00f      	b.n	8002fa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f80:	4b4e      	ldr	r3, [pc, #312]	@ (80030bc <UART_SetConfig+0x268>)
 8002f82:	61bb      	str	r3, [r7, #24]
        break;
 8002f84:	e00c      	b.n	8002fa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f86:	f7ff fdd3 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002f8a:	61b8      	str	r0, [r7, #24]
        break;
 8002f8c:	e008      	b.n	8002fa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f92:	61bb      	str	r3, [r7, #24]
        break;
 8002f94:	e004      	b.n	8002fa0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d074      	beq.n	8003090 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	005a      	lsls	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	d916      	bls.n	8002ff0 <UART_SetConfig+0x19c>
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc8:	d212      	bcs.n	8002ff0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	89fa      	ldrh	r2, [r7, #14]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	e04f      	b.n	8003090 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	77bb      	strb	r3, [r7, #30]
 8002ff4:	e04c      	b.n	8003090 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d828      	bhi.n	800304e <UART_SetConfig+0x1fa>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <UART_SetConfig+0x1b0>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003029 	.word	0x08003029
 8003008:	08003031 	.word	0x08003031
 800300c:	08003039 	.word	0x08003039
 8003010:	0800304f 	.word	0x0800304f
 8003014:	0800303f 	.word	0x0800303f
 8003018:	0800304f 	.word	0x0800304f
 800301c:	0800304f 	.word	0x0800304f
 8003020:	0800304f 	.word	0x0800304f
 8003024:	08003047 	.word	0x08003047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003028:	f7ff fdf8 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 800302c:	61b8      	str	r0, [r7, #24]
        break;
 800302e:	e013      	b.n	8003058 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003030:	f7ff fe16 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8003034:	61b8      	str	r0, [r7, #24]
        break;
 8003036:	e00f      	b.n	8003058 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <UART_SetConfig+0x268>)
 800303a:	61bb      	str	r3, [r7, #24]
        break;
 800303c:	e00c      	b.n	8003058 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303e:	f7ff fd77 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8003042:	61b8      	str	r0, [r7, #24]
        break;
 8003044:	e008      	b.n	8003058 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800304a:	61bb      	str	r3, [r7, #24]
        break;
 800304c:	e004      	b.n	8003058 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77bb      	strb	r3, [r7, #30]
        break;
 8003056:	bf00      	nop
    }

    if (pclk != 0U)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d018      	beq.n	8003090 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	085a      	lsrs	r2, r3, #1
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	441a      	add	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d909      	bls.n	800308c <UART_SetConfig+0x238>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307e:	d205      	bcs.n	800308c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	e001      	b.n	8003090 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800309c:	7fbb      	ldrb	r3, [r7, #30]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	efff69f3 	.word	0xefff69f3
 80030ac:	40013800 	.word	0x40013800
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40004400 	.word	0x40004400
 80030b8:	40004800 	.word	0x40004800
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01a      	beq.n	80031d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031be:	d10a      	bne.n	80031d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b098      	sub	sp, #96	@ 0x60
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003214:	f7fd fcfc 	bl	8000c10 <HAL_GetTick>
 8003218:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d12e      	bne.n	8003286 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f88c 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d021      	beq.n	8003286 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003256:	653b      	str	r3, [r7, #80]	@ 0x50
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003260:	647b      	str	r3, [r7, #68]	@ 0x44
 8003262:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800326e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e6      	bne.n	8003242 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e062      	b.n	800334c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d149      	bne.n	8003328 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003294:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329c:	2200      	movs	r2, #0
 800329e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f856 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03c      	beq.n	8003328 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	623b      	str	r3, [r7, #32]
   return(result);
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e6      	bne.n	80032ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003300:	61fa      	str	r2, [r7, #28]
 8003302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	69b9      	ldr	r1, [r7, #24]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	617b      	str	r3, [r7, #20]
   return(result);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e011      	b.n	800334c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3758      	adds	r7, #88	@ 0x58
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003364:	e049      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800336c:	d045      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fd fc4f 	bl	8000c10 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <UART_WaitOnFlagUntilTimeout+0x30>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e048      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d031      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d110      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2208      	movs	r2, #8
 80033aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f838 	bl	8003422 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2208      	movs	r2, #8
 80033b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e029      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033d4:	d111      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f81e 	bl	8003422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e00f      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d0a6      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b095      	sub	sp, #84	@ 0x54
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003448:	643b      	str	r3, [r7, #64]	@ 0x40
 800344a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800344e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e6      	bne.n	800342a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	61fb      	str	r3, [r7, #28]
   return(result);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3308      	adds	r3, #8
 800347a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800347c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003494:	2b01      	cmp	r3, #1
 8003496:	d118      	bne.n	80034ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f023 0310 	bic.w	r3, r3, #16
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6979      	ldr	r1, [r7, #20]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	613b      	str	r3, [r7, #16]
   return(result);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e6      	bne.n	8003498 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80034de:	bf00      	nop
 80034e0:	3754      	adds	r7, #84	@ 0x54
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <memset>:
 80034ea:	4402      	add	r2, r0
 80034ec:	4603      	mov	r3, r0
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d100      	bne.n	80034f4 <memset+0xa>
 80034f2:	4770      	bx	lr
 80034f4:	f803 1b01 	strb.w	r1, [r3], #1
 80034f8:	e7f9      	b.n	80034ee <memset+0x4>
	...

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003534 <__libc_init_array+0x38>)
 8003500:	4c0d      	ldr	r4, [pc, #52]	@ (8003538 <__libc_init_array+0x3c>)
 8003502:	1b64      	subs	r4, r4, r5
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	2600      	movs	r6, #0
 8003508:	42a6      	cmp	r6, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	4d0b      	ldr	r5, [pc, #44]	@ (800353c <__libc_init_array+0x40>)
 800350e:	4c0c      	ldr	r4, [pc, #48]	@ (8003540 <__libc_init_array+0x44>)
 8003510:	f000 f826 	bl	8003560 <_init>
 8003514:	1b64      	subs	r4, r4, r5
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	2600      	movs	r6, #0
 800351a:	42a6      	cmp	r6, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f855 3b04 	ldr.w	r3, [r5], #4
 8003524:	4798      	blx	r3
 8003526:	3601      	adds	r6, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f855 3b04 	ldr.w	r3, [r5], #4
 800352e:	4798      	blx	r3
 8003530:	3601      	adds	r6, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	080035c4 	.word	0x080035c4
 8003538:	080035c4 	.word	0x080035c4
 800353c:	080035c4 	.word	0x080035c4
 8003540:	080035c8 	.word	0x080035c8

08003544 <memcpy>:
 8003544:	440a      	add	r2, r1
 8003546:	4291      	cmp	r1, r2
 8003548:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800354c:	d100      	bne.n	8003550 <memcpy+0xc>
 800354e:	4770      	bx	lr
 8003550:	b510      	push	{r4, lr}
 8003552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800355a:	4291      	cmp	r1, r2
 800355c:	d1f9      	bne.n	8003552 <memcpy+0xe>
 800355e:	bd10      	pop	{r4, pc}

08003560 <_init>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr

0800356c <_fini>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr
